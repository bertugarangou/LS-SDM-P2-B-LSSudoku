

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed May 04 13:05:12 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    94                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    95                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    96                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    97  0000                     
    98                           ; Version 2.32
    99                           ; Generated 02/02/2021 GMT
   100                           ; 
   101                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution. Publication is not required when
   115                           ;        this file is used in an embedded application.
   116                           ; 
   117                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   118                           ;        software without specific prior written permission.
   119                           ; 
   120                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   121                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   122                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   123                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   124                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   125                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   126                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   127                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   128                           ; 
   129                           ; 
   130                           ; Code-generator required, PIC18F4321 Definitions
   131                           ; 
   132                           ; SFR Addresses
   133  0000                     
   134                           	psect	idataCOMRAM
   135  001B10                     __pidataCOMRAM:
   136                           	callstack 0
   137                           
   138                           ;initializer for _lletraInici
   139  001B10  41                 	db	65
   140  001B11  44                 	db	68
   141  001B12  47                 	db	71
   142  001B13  4A                 	db	74
   143  001B14  4D                 	db	77
   144  001B15  50                 	db	80
   145  001B16  54                 	db	84
   146  001B17  57                 	db	87
   147  001B18  00                 	db	0
   148                           
   149                           ;initializer for _arrayZero
   150  001B19  30                 	db	48
   151  001B1A  20                 	db	32
   152  001B1B  00                 	db	0
   153                           
   154                           ;initializer for _novaTeclaSIO
   155  001B1C  FF                 	db	255
   156                           
   157                           ;initializer for _direccio
   158  001B1D  FF                 	db	255
   159                           
   160                           ;initializer for _usuariActualSIO
   161  001B1E  FF                 	db	255
   162                           
   163                           ;initializer for _usuariJoc
   164  001B1F  FF                 	db	255
   165                           
   166                           ;initializer for GLCDMotor@max2
   167  001B20  0F                 	db	15
   168                           
   169                           ;initializer for GLCDMotor@max1
   170  001B21  0F                 	db	15
   171                           
   172                           ;initializer for _usuariLoguejat
   173  001B22  FF                 	db	255
   174                           
   175                           ;initializer for _novaDireccio
   176  001B23  FF                 	db	255
   177                           
   178                           ;initializer for _novaLletra
   179  001B24  FF                 	db	255
   180                           
   181                           ;initializer for _NovaTecla
   182  001B25  FF                 	db	255
   183                           
   184                           ;initializer for _ultimaTecla
   185  001B26  FF                 	db	255
   186                           
   187                           ;initializer for _timerSMS
   188  001B27  FF                 	db	255
   189                           
   190                           ;initializer for _novaTecla
   191  001B28  FF                 	db	255
   192                           
   193                           ;initializer for _lletraASCII
   194  001B29  FF                 	db	255
   195                           
   196                           ;initializer for _hora
   197  001B2A  33                 	db	51
   198  001B2B  30                 	db	48
   199  001B2C  3A                 	db	58
   200  001B2D  30                 	db	48
   201  001B2E  30                 	db	48
   202  001B2F  00                 	db	0
   203                           
   204                           	psect	idataBANK0
   205  001B50                     __pidataBANK0:
   206                           	callstack 0
   207                           
   208                           ;initializer for _teclaPremuda
   209  001B50  01                 	db	1
   210  001B51  02                 	db	2
   211  001B52  03                 	db	3
   212  001B53  04                 	db	4
   213  001B54  05                 	db	5
   214  001B55  06                 	db	6
   215  001B56  07                 	db	7
   216  001B57  08                 	db	8
   217  001B58  09                 	db	9
   218  001B59  0A                 	db	10
   219  001B5A  00                 	db	0
   220  001B5B  0B                 	db	11
   221                           
   222                           ;initializer for _registerText
   223  001B5C  32                 	db	50
   224  001B5D  2E                 	db	46
   225  001B5E  52                 	db	82
   226  001B5F  45                 	db	69
   227  001B60  47                 	db	71
   228  001B61  49                 	db	73
   229  001B62  53                 	db	83
   230  001B63  54                 	db	84
   231  001B64  45                 	db	69
   232  001B65  52                 	db	82
   233  001B66  00                 	db	0
   234                           
   235                           ;initializer for _loginText
   236  001B67  31                 	db	49
   237  001B68  2E                 	db	46
   238  001B69  4C                 	db	76
   239  001B6A  4F                 	db	79
   240  001B6B  47                 	db	71
   241  001B6C  49                 	db	73
   242  001B6D  4E                 	db	78
   243  001B6E  00                 	db	0
   244                           
   245                           	psect	smallconst
   246  000200                     __psmallconst:
   247                           	callstack 0
   248  000200  00                 	db	0
   249  000201                     _menuList:
   250                           	callstack 0
   251  000201  31                 	db	49
   252  000202  2E                 	db	46
   253  000203  50                 	db	80
   254  000204  6C                 	db	108
   255  000205  61                 	db	97
   256  000206  79                 	db	121
   257  000207  20                 	db	32
   258  000208  61                 	db	97
   259  000209  20                 	db	32
   260  00020A  47                 	db	71
   261  00020B  61                 	db	97
   262  00020C  6D                 	db	109
   263  00020D  65                 	db	101
   264  00020E  00                 	db	0
   265  00020F  00                 	db	0
   266  000210  00                 	db	0
   267  000211  00                 	db	0
   268  000212  00                 	db	0
   269  000213  00                 	db	0
   270  000214  00                 	db	0
   271  000215  00                 	db	0
   272  000216  00                 	db	0
   273  000217  00                 	db	0
   274  000218  00                 	db	0
   275  000219  00                 	db	0
   276  00021A  00                 	db	0
   277  00021B  00                 	db	0
   278  00021C  00                 	db	0
   279  00021D  00                 	db	0
   280  00021E  32                 	db	50
   281  00021F  2E                 	db	46
   282  000220  4D                 	db	77
   283  000221  6F                 	db	111
   284  000222  64                 	db	100
   285  000223  69                 	db	105
   286  000224  66                 	db	102
   287  000225  79                 	db	121
   288  000226  20                 	db	32
   289  000227  54                 	db	84
   290  000228  69                 	db	105
   291  000229  6D                 	db	109
   292  00022A  65                 	db	101
   293  00022B  00                 	db	0
   294  00022C  00                 	db	0
   295  00022D  00                 	db	0
   296  00022E  00                 	db	0
   297  00022F  00                 	db	0
   298  000230  00                 	db	0
   299  000231  00                 	db	0
   300  000232  00                 	db	0
   301  000233  00                 	db	0
   302  000234  00                 	db	0
   303  000235  00                 	db	0
   304  000236  00                 	db	0
   305  000237  00                 	db	0
   306  000238  00                 	db	0
   307  000239  00                 	db	0
   308  00023A  00                 	db	0
   309  00023B  33                 	db	51
   310  00023C  2E                 	db	46
   311  00023D  53                 	db	83
   312  00023E  68                 	db	104
   313  00023F  6F                 	db	111
   314  000240  77                 	db	119
   315  000241  20                 	db	32
   316  000242  47                 	db	71
   317  000243  65                 	db	101
   318  000244  6E                 	db	110
   319  000245  65                 	db	101
   320  000246  72                 	db	114
   321  000247  61                 	db	97
   322  000248  6C                 	db	108
   323  000249  20                 	db	32
   324  00024A  54                 	db	84
   325  00024B  6F                 	db	111
   326  00024C  70                 	db	112
   327  00024D  20                 	db	32
   328  00024E  35                 	db	53
   329  00024F  20                 	db	32
   330  000250  53                 	db	83
   331  000251  63                 	db	99
   332  000252  6F                 	db	111
   333  000253  72                 	db	114
   334  000254  65                 	db	101
   335  000255  73                 	db	115
   336  000256  20                 	db	32
   337  000257  00                 	db	0
   338  000258  34                 	db	52
   339  000259  2E                 	db	46
   340  00025A  4C                 	db	76
   341  00025B  6F                 	db	111
   342  00025C  67                 	db	103
   343  00025D  6F                 	db	111
   344  00025E  75                 	db	117
   345  00025F  74                 	db	116
   346  000260  00                 	db	0
   347  000261  00                 	db	0
   348  000262  00                 	db	0
   349  000263  00                 	db	0
   350  000264  00                 	db	0
   351  000265  00                 	db	0
   352  000266  00                 	db	0
   353  000267  00                 	db	0
   354  000268  00                 	db	0
   355  000269  00                 	db	0
   356  00026A  00                 	db	0
   357  00026B  00                 	db	0
   358  00026C  00                 	db	0
   359  00026D  00                 	db	0
   360  00026E  00                 	db	0
   361  00026F  00                 	db	0
   362  000270  00                 	db	0
   363  000271  00                 	db	0
   364  000272  00                 	db	0
   365  000273  00                 	db	0
   366  000274  00                 	db	0
   367  000275  35                 	db	53
   368  000276  2E                 	db	46
   369  000277  53                 	db	83
   370  000278  68                 	db	104
   371  000279  6F                 	db	111
   372  00027A  77                 	db	119
   373  00027B  20                 	db	32
   374  00027C  41                 	db	65
   375  00027D  6C                 	db	108
   376  00027E  6C                 	db	108
   377  00027F  20                 	db	32
   378  000280  55                 	db	85
   379  000281  73                 	db	115
   380  000282  65                 	db	101
   381  000283  72                 	db	114
   382  000284  73                 	db	115
   383  000285  00                 	db	0
   384  000286  00                 	db	0
   385  000287  00                 	db	0
   386  000288  00                 	db	0
   387  000289  00                 	db	0
   388  00028A  00                 	db	0
   389  00028B  00                 	db	0
   390  00028C  00                 	db	0
   391  00028D  00                 	db	0
   392  00028E  00                 	db	0
   393  00028F  00                 	db	0
   394  000290  00                 	db	0
   395  000291  00                 	db	0
   396  000292                     __end_of_menuList:
   397                           	callstack 0
   398  0000                     _RCREG	set	4014
   399  0000                     _TXREG	set	4013
   400  0000                     _TXSTAbits	set	4012
   401  0000                     _ADCON0bits	set	4034
   402  0000                     _ADRESH	set	4036
   403  0000                     _ADCON2	set	4032
   404  0000                     _ADCON1	set	4033
   405  0000                     _ADCON0	set	4034
   406  0000                     _EECON2	set	4007
   407  0000                     _EEDATA	set	4008
   408  0000                     _EEADR	set	4009
   409  0000                     _T0CONbits	set	4053
   410  0000                     _TMR0L	set	4054
   411  0000                     _TMR0H	set	4055
   412  0000                     _T0CON	set	4053
   413  0000                     _INTCONbits	set	4082
   414  0000                     _RCONbits	set	4048
   415  0000                     _PORTDbits	set	3971
   416  0000                     _SPBRG	set	4015
   417  0000                     _SPBRGH	set	4016
   418  0000                     _BAUDCON	set	4024
   419  0000                     _RCSTA	set	4011
   420  0000                     _TXSTA	set	4012
   421  0000                     _EECON1bits	set	4006
   422  0000                     _LATD	set	3980
   423  0000                     _TRISD	set	3989
   424  0000                     _TRISC	set	3988
   425  0000                     _LATBbits	set	3978
   426  0000                     _TRISB	set	3987
   427  0000                     _TRISA	set	3986
   428  0000                     _PORTCbits	set	3970
   429  0000                     _LATDbits	set	3980
   430  0000                     _LATCbits	set	3979
   431  0000                     _TRISDbits	set	3989
   432  0000                     _TRISCbits	set	3988
   433  000292                     STR_5:
   434  000292  54                 	db	84	;'T'
   435  000293  49                 	db	73	;'I'
   436  000294  4D                 	db	77	;'M'
   437  000295  45                 	db	69	;'E'
   438  000296  20                 	db	32
   439  000297  52                 	db	82	;'R'
   440  000298  45                 	db	69	;'E'
   441  000299  4D                 	db	77	;'M'
   442  00029A  41                 	db	65	;'A'
   443  00029B  49                 	db	73	;'I'
   444  00029C  4E                 	db	78	;'N'
   445  00029D  49                 	db	73	;'I'
   446  00029E  4E                 	db	78	;'N'
   447  00029F  47                 	db	71	;'G'
   448  0002A0  3A                 	db	58	;':'
   449  0002A1  00                 	db	0
   450  0002A2                     STR_4:
   451  0002A2  4D                 	db	77	;'M'
   452  0002A3  6F                 	db	111	;'o'
   453  0002A4  64                 	db	100	;'d'
   454  0002A5  69                 	db	105	;'i'
   455  0002A6  66                 	db	102	;'f'
   456  0002A7  79                 	db	121	;'y'
   457  0002A8  20                 	db	32
   458  0002A9  54                 	db	84	;'T'
   459  0002AA  69                 	db	105	;'i'
   460  0002AB  6D                 	db	109	;'m'
   461  0002AC  65                 	db	101	;'e'
   462  0002AD  3A                 	db	58	;':'
   463  0002AE  00                 	db	0
   464  0002AF                     STR_3:
   465  0002AF  42                 	db	66	;'B'
   466  0002B0  59                 	db	89	;'Y'
   467  0002B1  45                 	db	69	;'E'
   468  0002B2  20                 	db	32
   469  0002B3  42                 	db	66	;'B'
   470  0002B4  59                 	db	89	;'Y'
   471  0002B5  45                 	db	69	;'E'
   472  0002B6  20                 	db	32
   473  0002B7  00                 	db	0
   474  0002B8                     STR_2:
   475  0002B8  50                 	db	80	;'P'
   476  0002B9  53                 	db	83	;'S'
   477  0002BA  57                 	db	87	;'W'
   478  0002BB  44                 	db	68	;'D'
   479  0002BC  3A                 	db	58	;':'
   480  0002BD  20                 	db	32
   481  0002BE  00                 	db	0
   482  0002BF                     STR_1:
   483  0002BF  55                 	db	85	;'U'
   484  0002C0  53                 	db	83	;'S'
   485  0002C1  45                 	db	69	;'E'
   486  0002C2  52                 	db	82	;'R'
   487  0002C3  3A                 	db	58	;':'
   488  0002C4  20                 	db	32
   489  0002C5  00                 	db	0
   490  0002C6  00                 	db	0	; dummy byte at the end
   491  0000                     
   492                           ; #config settings
   493                           
   494                           	psect	cinit
   495  001592                     __pcinit:
   496                           	callstack 0
   497  001592                     start_initialization:
   498                           	callstack 0
   499  001592                     __initialization:
   500                           	callstack 0
   501                           
   502                           ; Initialize objects allocated to BANK0 (31 bytes)
   503                           ; load TBLPTR registers with __pidataBANK0
   504  001592  0E50               	movlw	low __pidataBANK0
   505  001594  6EF6               	movwf	tblptrl,c
   506  001596  0E1B               	movlw	high __pidataBANK0
   507  001598  6EF7               	movwf	tblptrh,c
   508  00159A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   509  00159C  6EF8               	movwf	tblptru,c
   510  00159E  EE00  F0A1         	lfsr	0,__pdataBANK0
   511  0015A2  EE10 F01F          	lfsr	1,31
   512  0015A6                     copy_data0:
   513  0015A6  0009               	tblrd		*+
   514  0015A8  CFF5 FFEE          	movff	tablat,postinc0
   515  0015AC  50E5               	movf	postdec1,w,c
   516  0015AE  50E1               	movf	fsr1l,w,c
   517  0015B0  E1FA               	bnz	copy_data0
   518                           
   519                           ; Initialize objects allocated to COMRAM (32 bytes)
   520                           ; load TBLPTR registers with __pidataCOMRAM
   521  0015B2  0E10               	movlw	low __pidataCOMRAM
   522  0015B4  6EF6               	movwf	tblptrl,c
   523  0015B6  0E1B               	movlw	high __pidataCOMRAM
   524  0015B8  6EF7               	movwf	tblptrh,c
   525  0015BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   526  0015BC  6EF8               	movwf	tblptru,c
   527  0015BE  EE00  F043         	lfsr	0,__pdataCOMRAM
   528  0015C2  EE10 F020          	lfsr	1,32
   529  0015C6                     copy_data1:
   530  0015C6  0009               	tblrd		*+
   531  0015C8  CFF5 FFEE          	movff	tablat,postinc0
   532  0015CC  50E5               	movf	postdec1,w,c
   533  0015CE  50E1               	movf	fsr1l,w,c
   534  0015D0  E1FA               	bnz	copy_data1
   535                           
   536                           ; Clear objects allocated to BANK1 (184 bytes)
   537  0015D2  EE01  F000         	lfsr	0,__pbssBANK1
   538  0015D6  0EB8               	movlw	184
   539  0015D8                     clear_0:
   540  0015D8  6AEE               	clrf	postinc0,c
   541  0015DA  06E8               	decf	wreg,f,c
   542  0015DC  E1FD               	bnz	clear_0
   543                           
   544                           ; Clear objects allocated to BANK0 (33 bytes)
   545  0015DE  EE00  F080         	lfsr	0,__pbssBANK0
   546  0015E2  0E21               	movlw	33
   547  0015E4                     clear_1:
   548  0015E4  6AEE               	clrf	postinc0,c
   549  0015E6  06E8               	decf	wreg,f,c
   550  0015E8  E1FD               	bnz	clear_1
   551                           
   552                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   553  0015EA  6A79               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   554  0015EC  6A78               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   555                           
   556                           ; Clear objects allocated to COMRAM (66 bytes)
   557  0015EE  EE00  F001         	lfsr	0,__pbssCOMRAM
   558  0015F2  0E42               	movlw	66
   559  0015F4                     clear_2:
   560  0015F4  6AEE               	clrf	postinc0,c
   561  0015F6  06E8               	decf	wreg,f,c
   562  0015F8  E1FD               	bnz	clear_2
   563  0015FA                     end_of_initialization:
   564                           	callstack 0
   565  0015FA                     __end_of__initialization:
   566                           	callstack 0
   567  0015FA  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   568  0015FC  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   569  0015FE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   570  001600  6EF8               	movwf	tblptru,c
   571  001602  0100               	movlb	0
   572  001604  EF04  F00B         	goto	_main	;jump to C main() function
   573                           
   574                           	psect	bitbssCOMRAM
   575  0003C0                     __pbitbssCOMRAM:
   576                           	callstack 0
   577  0003C0                     _nouSegon:
   578                           	callstack 0
   579  0003C0                     	ds	1
   580  0003C1                     _jugant:
   581                           	callstack 0
   582  0003C1                     	ds	1
   583  0003C2                     _cap2:
   584                           	callstack 0
   585  0003C2                     	ds	1
   586  0003C3                     _cap1:
   587                           	callstack 0
   588  0003C3                     	ds	1
   589  0003C4                     _newString:
   590                           	callstack 0
   591  0003C4                     	ds	1
   592  0003C5                     _ferMenu:
   593                           	callstack 0
   594  0003C5                     	ds	1
   595  0003C6                     _reproduir:
   596                           	callstack 0
   597  0003C6                     	ds	1
   598  0003C7                     _borram:
   599                           	callstack 0
   600  0003C7                     	ds	1
   601  0003C8                     _do_register:
   602                           	callstack 0
   603  0003C8                     	ds	1
   604  0003C9                     _do_check_exists:
   605                           	callstack 0
   606  0003C9                     	ds	1
   607  0003CA                     _loginNOTRegister:
   608                           	callstack 0
   609  0003CA                     	ds	1
   610  0003CB                     _setSMSon:
   611                           	callstack 0
   612  0003CB                     	ds	1
   613  0003CC                     _nou_s:
   614                           	callstack 0
   615  0003CC                     	ds	1
   616                           
   617                           	psect	bssCOMRAM
   618  000001                     __pbssCOMRAM:
   619                           	callstack 0
   620  000001                     _userPtr:
   621                           	callstack 0
   622  000001                     	ds	2
   623  000003                     _h_Tics:
   624                           	callstack 0
   625  000003                     	ds	2
   626  000005                     _s_ptr:
   627                           	callstack 0
   628  000005                     	ds	2
   629  000007                     motorSIO@state:
   630                           	callstack 0
   631  000007                     	ds	1
   632  000008                     _rebut:
   633                           	callstack 0
   634  000008                     	ds	1
   635  000009                     motorJoc@state:
   636                           	callstack 0
   637  000009                     	ds	1
   638  00000A                     motorHora@state:
   639                           	callstack 0
   640  00000A                     	ds	1
   641  00000B                     _segons:
   642                           	callstack 0
   643  00000B                     	ds	1
   644  00000C                     _timerHora:
   645                           	callstack 0
   646  00000C                     	ds	1
   647  00000D                     JoystickMotor@state:
   648                           	callstack 0
   649  00000D                     	ds	1
   650  00000E                     _ultimaTeclaAD:
   651                           	callstack 0
   652  00000E                     	ds	1
   653  00000F                     GLCDMotor@length2:
   654                           	callstack 0
   655  00000F                     	ds	1
   656  000010                     GLCDMotor@length1:
   657                           	callstack 0
   658  000010                     	ds	1
   659  000011                     GLCDMotor@k2:
   660                           	callstack 0
   661  000011                     	ds	1
   662  000012                     GLCDMotor@k1:
   663                           	callstack 0
   664  000012                     	ds	1
   665  000013                     GLCDMotor@min2:
   666                           	callstack 0
   667  000013                     	ds	1
   668  000014                     GLCDMotor@min1:
   669                           	callstack 0
   670  000014                     	ds	1
   671  000015                     GLCDMotor@j:
   672                           	callstack 0
   673  000015                     	ds	1
   674  000016                     GLCDMotor@state:
   675                           	callstack 0
   676  000016                     	ds	1
   677  000017                     _menuDaltGLCD:
   678                           	callstack 0
   679  000017                     	ds	1
   680  000018                     _timerGLCD:
   681                           	callstack 0
   682  000018                     	ds	1
   683  000019                     motorAltaveu@state:
   684                           	callstack 0
   685  000019                     	ds	1
   686  00001A                     _copsNota:
   687                           	callstack 0
   688  00001A                     	ds	1
   689  00001B                     _timerAltaveu:
   690                           	callstack 0
   691  00001B                     	ds	1
   692  00001C                     _nota:
   693                           	callstack 0
   694  00001C                     	ds	1
   695  00001D                     UmotorUsers@state:
   696                           	callstack 0
   697  00001D                     	ds	1
   698  00001E                     _j:
   699                           	callstack 0
   700  00001E                     	ds	1
   701  00001F                     _i:
   702                           	callstack 0
   703  00001F                     	ds	1
   704  000020                     _indexNextUserStruct:
   705                           	callstack 0
   706  000020                     	ds	1
   707  000021                     _indexNextUser:
   708                           	callstack 0
   709  000021                     	ds	1
   710  000022                     _numUsuaris:
   711                           	callstack 0
   712  000022                     	ds	1
   713  000023                     _currentUsrIndex:
   714                           	callstack 0
   715  000023                     	ds	1
   716  000024                     menu@state:
   717                           	callstack 0
   718  000024                     	ds	1
   719  000025                     _indexUsuari:
   720                           	callstack 0
   721  000025                     	ds	1
   722  000026                     _menuDalt:
   723                           	callstack 0
   724  000026                     	ds	1
   725  000027                     _timerMenu:
   726                           	callstack 0
   727  000027                     	ds	1
   728  000028                     _tmp:
   729                           	callstack 0
   730  000028                     	ds	1
   731  000029                     _counter:
   732                           	callstack 0
   733  000029                     	ds	1
   734  00002A                     TeTeclat@files:
   735                           	callstack 0
   736  00002A                     	ds	1
   737  00002B                     TeTeclat@cols:
   738                           	callstack 0
   739  00002B                     	ds	1
   740  00002C                     TeTeclat@state:
   741                           	callstack 0
   742  00002C                     	ds	1
   743  00002D                     _tiTeclat:
   744                           	callstack 0
   745  00002D                     	ds	1
   746  00002E                     SMotor@state:
   747                           	callstack 0
   748  00002E                     	ds	1
   749  00002F                     _zeroTecla:
   750                           	callstack 0
   751  00002F                     	ds	1
   752  000030                     _sumaPulsacions:
   753                           	callstack 0
   754  000030                     	ds	1
   755  000031                     _Timer:
   756                           	callstack 0
   757  000031                     	ds	1
   758  000032                     _ColumnAct:
   759                           	callstack 0
   760  000032                     	ds	1
   761  000033                     _RowAct:
   762                           	callstack 0
   763  000033                     	ds	1
   764  000034                     _Columns:
   765                           	callstack 0
   766  000034                     	ds	1
   767  000035                     _Rows:
   768                           	callstack 0
   769  000035                     	ds	1
   770  000036                     _tmpUsername:
   771                           	callstack 0
   772  000036                     	ds	9
   773  00003F                     _horaTmp:
   774                           	callstack 0
   775  00003F                     	ds	4
   776                           
   777                           	psect	dataCOMRAM
   778  000043                     __pdataCOMRAM:
   779                           	callstack 0
   780  000043                     _lletraInici:
   781                           	callstack 0
   782  000043                     	ds	9
   783  00004C                     _arrayZero:
   784                           	callstack 0
   785  00004C                     	ds	3
   786  00004F                     _novaTeclaSIO:
   787                           	callstack 0
   788  00004F                     	ds	1
   789  000050                     _direccio:
   790                           	callstack 0
   791  000050                     	ds	1
   792  000051                     _usuariActualSIO:
   793                           	callstack 0
   794  000051                     	ds	1
   795  000052                     _usuariJoc:
   796                           	callstack 0
   797  000052                     	ds	1
   798  000053                     GLCDMotor@max2:
   799                           	callstack 0
   800  000053                     	ds	1
   801  000054                     GLCDMotor@max1:
   802                           	callstack 0
   803  000054                     	ds	1
   804  000055                     _usuariLoguejat:
   805                           	callstack 0
   806  000055                     	ds	1
   807  000056                     _novaDireccio:
   808                           	callstack 0
   809  000056                     	ds	1
   810  000057                     _novaLletra:
   811                           	callstack 0
   812  000057                     	ds	1
   813  000058                     _NovaTecla:
   814                           	callstack 0
   815  000058                     	ds	1
   816  000059                     _ultimaTecla:
   817                           	callstack 0
   818  000059                     	ds	1
   819  00005A                     _timerSMS:
   820                           	callstack 0
   821  00005A                     	ds	1
   822  00005B                     _novaTecla:
   823                           	callstack 0
   824  00005B                     	ds	1
   825  00005C                     _lletraASCII:
   826                           	callstack 0
   827  00005C                     	ds	1
   828  00005D                     _hora:
   829                           	callstack 0
   830  00005D                     	ds	6
   831                           
   832                           	psect	bssBANK0
   833  000080                     __pbssBANK0:
   834                           	callstack 0
   835  000080                     _s_Timers:
   836                           	callstack 0
   837  000080                     	ds	24
   838  000098                     _tmpPassword:
   839                           	callstack 0
   840  000098                     	ds	9
   841                           
   842                           	psect	dataBANK0
   843  0000A1                     __pdataBANK0:
   844                           	callstack 0
   845  0000A1                     _teclaPremuda:
   846                           	callstack 0
   847  0000A1                     	ds	12
   848  0000AD                     _registerText:
   849                           	callstack 0
   850  0000AD                     	ds	11
   851  0000B8                     _loginText:
   852                           	callstack 0
   853  0000B8                     	ds	8
   854                           
   855                           	psect	bssBANK1
   856  000100                     __pbssBANK1:
   857                           	callstack 0
   858  000100                     _usuaris:
   859                           	callstack 0
   860  000100                     	ds	184
   861                           
   862                           	psect	cstackBANK0
   863  0000C0                     __pcstackBANK0:
   864                           	callstack 0
   865  0000C0                     ??_menu:
   866  0000C0                     ??_GLCDMotor:
   867                           
   868                           ; 1 bytes @ 0x0
   869  0000C0                     	ds	2
   870                           
   871                           	psect	cstackCOMRAM
   872  000063                     __pcstackCOMRAM:
   873                           	callstack 0
   874  000063                     
   875                           ; 1 bytes @ 0x0
   876  000063                     	ds	1
   877  000064                     ??_high_rsi:
   878                           
   879                           ; 1 bytes @ 0x1
   880  000064                     	ds	4
   881  000068                     ??_EscriuPrimeraOrdre:
   882  000068                     ??_Uinit:
   883  000068                     ??_UcheckExistsGetError:
   884  000068                     ??_CantaPartAlta:
   885  000068                     ??_CantaPartBaixa:
   886  000068                     ?_TiGetTics:
   887                           	callstack 0
   888  000068                     ?_UgetUserName:
   889                           	callstack 0
   890  000068                     SsetNovaTecla@tecla:
   891                           	callstack 0
   892  000068                     TiResetTics@Handle:
   893                           	callstack 0
   894  000068                     MsetNovaTecla@tecla:
   895                           	callstack 0
   896  000068                     MNovaLletra@lletra:
   897                           	callstack 0
   898  000068                     MNouJoystick@posicio:
   899                           	callstack 0
   900  000068                     UenviaChar@pos:
   901                           	callstack 0
   902  000068                     UenviaPas@pos:
   903                           	callstack 0
   904  000068                     escriureCharEEPROM@pos:
   905                           	callstack 0
   906  000068                     compareStrings@a:
   907                           	callstack 0
   908  000068                     escriureEEPROM@caca:
   909                           	callstack 0
   910  000068                     GLCDMostraMenu@num:
   911                           	callstack 0
   912  000068                     HActualitzaHora@nova:
   913                           	callstack 0
   914  000068                     JJuguem@usuari:
   915                           	callstack 0
   916  000068                     SIONovaDireccio@num:
   917                           	callstack 0
   918  000068                     SIOStartGame@usuari:
   919                           	callstack 0
   920  000068                     SIONovaTecla@tecla:
   921                           	callstack 0
   922                           
   923                           ; 1 bytes @ 0x5
   924  000068                     	ds	1
   925  000069                     ??_JoystickMotor:
   926  000069                     CantaPartAlta@c:
   927                           	callstack 0
   928  000069                     CantaPartBaixa@c:
   929                           	callstack 0
   930  000069                     EscriuPrimeraOrdre@ordre:
   931                           	callstack 0
   932  000069                     UenviaChar@c:
   933                           	callstack 0
   934  000069                     UenviaPas@c:
   935                           	callstack 0
   936  000069                     escriureCharEEPROM@c:
   937                           	callstack 0
   938  000069                     compareStrings@b:
   939                           	callstack 0
   940                           
   941                           ; 2 bytes @ 0x6
   942  000069                     	ds	1
   943  00006A                     ??_TiGetTics:
   944  00006A                     CantaIR@IR:
   945                           	callstack 0
   946  00006A                     CantaData@Data:
   947                           	callstack 0
   948  00006A                     UgetUserName@quin:
   949                           	callstack 0
   950  00006A                     Uinit@i:
   951                           	callstack 0
   952                           
   953                           ; 1 bytes @ 0x7
   954  00006A                     	ds	1
   955  00006B                     ??_motorSIO:
   956  00006B                     ??_compareStrings:
   957  00006B                     Uinit@j:
   958                           	callstack 0
   959  00006B                     LcNewString@new_s:
   960                           	callstack 0
   961                           
   962                           ; 2 bytes @ 0x8
   963  00006B                     	ds	1
   964  00006C                     TiGetTics@Handle:
   965                           	callstack 0
   966  00006C                     Uinit@j_1130:
   967                           	callstack 0
   968                           
   969                           ; 1 bytes @ 0x9
   970  00006C                     	ds	1
   971  00006D                     ??_UmotorUsers:
   972  00006D                     TiGetTics@actual:
   973                           	callstack 0
   974                           
   975                           ; 2 bytes @ 0xA
   976  00006D                     	ds	2
   977  00006F                     ??_SMotor:
   978  00006F                     ??_motorHora:
   979  00006F                     ??_motorAltaveu:
   980  00006F                     ??_TeTeclat:
   981  00006F                     WaitForBusy@Busy:
   982                           	callstack 0
   983  00006F                     Espera@ms:
   984                           	callstack 0
   985                           
   986                           ; 2 bytes @ 0xC
   987  00006F                     	ds	1
   988  000070                     LcGotoXY@Row:
   989                           	callstack 0
   990                           
   991                           ; 1 bytes @ 0xD
   992  000070                     	ds	1
   993  000071                     ??_Espera:
   994  000071                     LcGotoXY@Fisics:
   995                           	callstack 0
   996                           
   997                           ; 2 bytes @ 0xE
   998  000071                     	ds	1
   999  000072                     Espera@Timer:
  1000                           	callstack 0
  1001                           
  1002                           ; 1 bytes @ 0xF
  1003  000072                     	ds	1
  1004  000073                     LcInit@columns:
  1005                           	callstack 0
  1006  000073                     _LcGotoXY$336:
  1007                           	callstack 0
  1008                           
  1009                           ; 2 bytes @ 0x10
  1010  000073                     	ds	1
  1011  000074                     LcInit@rows:
  1012                           	callstack 0
  1013                           
  1014                           ; 1 bytes @ 0x11
  1015  000074                     	ds	1
  1016  000075                     LcGotoXY@Column:
  1017                           	callstack 0
  1018  000075                     LcInit@i:
  1019                           	callstack 0
  1020                           
  1021                           ; 2 bytes @ 0x12
  1022  000075                     	ds	1
  1023  000076                     ??_motorJoc:
  1024  000076                     LcPutChar@c:
  1025                           	callstack 0
  1026                           
  1027                           ; 1 bytes @ 0x13
  1028  000076                     	ds	1
  1029  000077                     
  1030                           ; 1 bytes @ 0x14
  1031  000077                     	ds	1
  1032  000078                     
  1033                           ; 1 bytes @ 0x15
  1034 ;;
  1035 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1036 ;;
  1037 ;; *************** function _main *****************
  1038 ;; Defined at:
  1039 ;;		line 75 in file "main.c"
  1040 ;; Parameters:    Size  Location     Type
  1041 ;;		None
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;		None
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMRAM   BANK0   BANK1
  1053 ;;      Params:         0       0       0
  1054 ;;      Locals:         0       0       0
  1055 ;;      Temps:          0       0       0
  1056 ;;      Totals:         0       0       0
  1057 ;;Total ram usage:        0 bytes
  1058 ;; Hardware stack levels required when called: 7
  1059 ;; This function calls:
  1060 ;;		_GLCDInit
  1061 ;;		_GLCDMotor
  1062 ;;		_JoystickInit
  1063 ;;		_JoystickMotor
  1064 ;;		_LcInit
  1065 ;;		_LcLCD
  1066 ;;		_Minit
  1067 ;;		_SMotor
  1068 ;;		_Sinit
  1069 ;;		_TeInit
  1070 ;;		_TeTeclat
  1071 ;;		_TiInitTimer
  1072 ;;		_Uinit
  1073 ;;		_UmotorUsers
  1074 ;;		_escriure2usuarisStruct
  1075 ;;		_escriureEEPROM
  1076 ;;		_initAltaveu
  1077 ;;		_initHora
  1078 ;;		_init_eusart
  1079 ;;		_init_ports
  1080 ;;		_menu
  1081 ;;		_motorAltaveu
  1082 ;;		_motorHora
  1083 ;;		_motorJoc
  1084 ;;		_motorSIO
  1085 ;; This function is called by:
  1086 ;;		Startup code after reset
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text0
  1091  001608                     __ptext0:
  1092                           	callstack 0
  1093  001608                     _main:
  1094                           	callstack 24
  1095                           
  1096                           ;main.c: 76:     init_ports();
  1097                           
  1098                           ;incstack = 0
  1099  001608  EC98  F00D         	call	_init_ports	;wreg free
  1100                           
  1101                           ;main.c: 77:     escriureEEPROM();
  1102  00160C  EC0F  F00D         	call	_escriureEEPROM	;wreg free
  1103                           
  1104                           ;main.c: 78:     init_eusart();
  1105  001610  ECC4  F00D         	call	_init_eusart	;wreg free
  1106                           
  1107                           ;main.c: 79:     TiInitTimer();
  1108  001614  ECA6  F00C         	call	_TiInitTimer	;wreg free
  1109                           
  1110                           ;main.c: 80:     TeInit();
  1111  001618  EC3A  F00E         	call	_TeInit	;wreg free
  1112                           
  1113                           ;main.c: 81:     Sinit();
  1114  00161C  EC3E  F00E         	call	_Sinit	;wreg free
  1115                           
  1116                           ;main.c: 82:     SMotor();
  1117  001620  EC81  F005         	call	_SMotor	;wreg free
  1118                           
  1119                           ;main.c: 83:     Uinit();
  1120  001624  ECA3  F009         	call	_Uinit	;wreg free
  1121                           
  1122                           ;main.c: 84:     initAltaveu();
  1123  001628  EC2E  F00E         	call	_initAltaveu	;wreg free
  1124                           
  1125                           ;main.c: 85:     GLCDInit();
  1126  00162C  EC4E  F00E         	call	_GLCDInit	;wreg free
  1127                           
  1128                           ;main.c: 86:     JoystickInit();
  1129  001630  ECD9  F00D         	call	_JoystickInit	;wreg free
  1130                           
  1131                           ;main.c: 87:     initHora();
  1132  001634  EC2A  F00E         	call	_initHora	;wreg free
  1133                           
  1134                           ;main.c: 89:     LcInit(2,16);
  1135  001638  0E10               	movlw	16
  1136  00163A  6E73               	movwf	LcInit@columns^0,c
  1137  00163C  0E02               	movlw	2
  1138  00163E  ECD8  F008         	call	_LcInit
  1139                           
  1140                           ;main.c: 90:     Minit();
  1141  001642  EC46  F00E         	call	_Minit	;wreg free
  1142                           
  1143                           ;main.c: 92:     escriure2usuarisStruct();
  1144  001646  EC26  F00D         	call	_escriure2usuarisStruct	;wreg free
  1145  00164A                     l5976:
  1146                           
  1147                           ;main.c: 95:         motorJoc();
  1148  00164A  ECFD  F009         	call	_motorJoc	;wreg free
  1149                           
  1150                           ;main.c: 96:         motorSIO();
  1151  00164E  EC64  F008         	call	_motorSIO	;wreg free
  1152                           
  1153                           ;main.c: 97:         motorHora();
  1154  001652  EC4D  F00A         	call	_motorHora	;wreg free
  1155                           
  1156                           ;main.c: 98:         JoystickMotor();
  1157  001656  ECEE  F007         	call	_JoystickMotor	;wreg free
  1158                           
  1159                           ;main.c: 99:         menu();
  1160  00165A  EC64  F001         	call	_menu	;wreg free
  1161                           
  1162                           ;main.c: 100:         motorAltaveu();
  1163  00165E  EC48  F009         	call	_motorAltaveu	;wreg free
  1164                           
  1165                           ;main.c: 101:         UmotorUsers();
  1166  001662  EC7F  F006         	call	_UmotorUsers	;wreg free
  1167                           
  1168                           ;main.c: 102:         GLCDMotor();
  1169  001666  EC95  F003         	call	_GLCDMotor	;wreg free
  1170                           
  1171                           ;main.c: 103:         TeTeclat();
  1172  00166A  EC3C  F007         	call	_TeTeclat	;wreg free
  1173                           
  1174                           ;main.c: 104:         SMotor();
  1175  00166E  EC81  F005         	call	_SMotor	;wreg free
  1176                           
  1177                           ;main.c: 105:         LcLCD();
  1178  001672  ECA4  F00B         	call	_LcLCD	;wreg free
  1179  001676  D7E9               	goto	l5976
  1180  001678                     __end_of_main:
  1181                           	callstack 0
  1182                           
  1183 ;; *************** function _motorSIO *****************
  1184 ;; Defined at:
  1185 ;;		line 31 in file "SIO.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;		None
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/1
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1
  1199 ;;      Params:         0       0       0
  1200 ;;      Locals:         0       0       0
  1201 ;;      Temps:          2       0       0
  1202 ;;      Totals:         2       0       0
  1203 ;;Total ram usage:        2 bytes
  1204 ;; Hardware stack levels used: 1
  1205 ;; Hardware stack levels required when called: 3
  1206 ;; This function calls:
  1207 ;;		_UgetUserName
  1208 ;; This function is called by:
  1209 ;;		_main
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text1
  1214  0010C8                     __ptext1:
  1215                           	callstack 0
  1216  0010C8                     _motorSIO:
  1217                           	callstack 27
  1218                           
  1219                           ;SIO.c: 32:     static char state = 0;;SIO.c: 34:  switch(state) {
  1220                           
  1221                           ;incstack = 0
  1222  0010C8  D05D               	goto	l4330
  1223  0010CA                     l4276:
  1224                           
  1225                           ;SIO.c: 36:    if (usuariActualSIO > -1) {
  1226  0010CA  BE51               	btfsc	_usuariActualSIO^0,7,c
  1227  0010CC  0012               	return	
  1228                           
  1229                           ;SIO.c: 37:     userPtr = UgetUserName(usuariActualSIO);
  1230  0010CE  5051               	movf	_usuariActualSIO^0,w,c
  1231  0010D0  ECCF  F00D         	call	_UgetUserName
  1232  0010D4  C068  F001         	movff	?_UgetUserName,_userPtr
  1233  0010D8  C069  F002         	movff	?_UgetUserName+1,_userPtr+1
  1234                           
  1235                           ;SIO.c: 38:     jugant = 1;
  1236  0010DC  8278               	bsf	(_jugant/(0+8))^0,_jugant& (0+7),c
  1237                           
  1238                           ;SIO.c: 39:     state = 1;
  1239  0010DE  0E01               	movlw	1
  1240  0010E0  6E07               	movwf	motorSIO@state^0,c
  1241  0010E2  0012               	return	
  1242  0010E4                     l4284:
  1243                           
  1244                           ;SIO.c: 43:    if (*userPtr == '\0' && TXSTAbits.TRMT) {
  1245  0010E4  C001  FFD9         	movff	_userPtr,fsr2l
  1246  0010E8  C002  FFDA         	movff	_userPtr+1,fsr2h
  1247  0010EC  50DF               	movf	indf2,w,c
  1248  0010EE  B4D8               	btfsc	status,2,c
  1249  0010F0  A2AC               	btfss	172,1,c	;volatile
  1250  0010F2  D007               	goto	l4290
  1251                           
  1252                           ;SIO.c: 44:     TXREG = '\0';
  1253  0010F4  0E00               	movlw	0
  1254  0010F6  6EAD               	movwf	173,c	;volatile
  1255                           
  1256                           ;SIO.c: 45:     novaTeclaSIO = 0;
  1257  0010F8  0E00               	movlw	0
  1258  0010FA  6E4F               	movwf	_novaTeclaSIO^0,c
  1259                           
  1260                           ;SIO.c: 46:     state = 2;
  1261  0010FC  0E02               	movlw	2
  1262  0010FE  6E07               	movwf	motorSIO@state^0,c
  1263                           
  1264                           ;SIO.c: 47:    }
  1265  001100  0012               	return	
  1266  001102                     l4290:
  1267  001102  C001  FFD9         	movff	_userPtr,fsr2l
  1268  001106  C002  FFDA         	movff	_userPtr+1,fsr2h
  1269  00110A  50DF               	movf	indf2,w,c
  1270  00110C  B4D8               	btfsc	status,2,c
  1271  00110E  0012               	return	
  1272  001110  A2AC               	btfss	172,1,c	;volatile
  1273  001112  0012               	return	
  1274                           
  1275                           ;SIO.c: 49:     TXREG = *userPtr;
  1276  001114  C001  FFD9         	movff	_userPtr,fsr2l
  1277  001118  C002  FFDA         	movff	_userPtr+1,fsr2h
  1278  00111C  50DF               	movf	indf2,w,c
  1279  00111E  6EAD               	movwf	173,c	;volatile
  1280                           
  1281                           ;SIO.c: 50:     userPtr++;
  1282  001120  4A01               	infsnz	_userPtr^0,f,c
  1283  001122  2A02               	incf	(_userPtr+1)^0,f,c
  1284  001124  0012               	return	
  1285  001126                     l4298:
  1286                           
  1287                           ;SIO.c: 54:    if (RCREG == 'K') {
  1288  001126  0E4B               	movlw	75
  1289  001128  18AE               	xorwf	174,w,c
  1290  00112A  A4D8               	btfss	status,2,c
  1291  00112C  0012               	return	
  1292  00112E                     u3530:
  1293                           
  1294                           ;SIO.c: 55:     state = 3;
  1295  00112E  0E03               	movlw	3
  1296  001130  6E07               	movwf	motorSIO@state^0,c
  1297  001132  0012               	return	
  1298  001134                     l4302:
  1299                           
  1300                           ;SIO.c: 59:    if (direccio != -1 && TXSTAbits.TRMT) {
  1301  001134  2850               	incf	_direccio^0,w,c
  1302  001136  A4D8               	btfss	status,2,c
  1303  001138  A2AC               	btfss	172,1,c	;volatile
  1304  00113A  D004               	goto	l4310
  1305                           
  1306                           ;SIO.c: 60:     TXREG = direccio;
  1307  00113C  C050  FFAD         	movff	_direccio,4013	;volatile
  1308                           
  1309                           ;SIO.c: 61:     direccio = -1;
  1310  001140  6850               	setf	_direccio^0,c
  1311  001142  D7F5               	goto	u3530
  1312  001144                     l4310:
  1313  001144  504F               	movf	_novaTeclaSIO^0,w,c
  1314  001146  0A80               	xorlw	128
  1315  001148  0F7F               	addlw	-129
  1316  00114A  A0D8               	btfss	status,0,c
  1317  00114C  D00D               	goto	l4320
  1318  00114E  504F               	movf	_novaTeclaSIO^0,w,c
  1319  001150  0A80               	xorlw	128
  1320  001152  0F76               	addlw	-138
  1321  001154  A0D8               	btfss	status,0,c
  1322  001156  A2AC               	btfss	172,1,c	;volatile
  1323  001158  D007               	goto	l4320
  1324                           
  1325                           ;SIO.c: 65:     TXREG = novaTeclaSIO;
  1326  00115A  C04F  FFAD         	movff	_novaTeclaSIO,4013	;volatile
  1327                           
  1328                           ;SIO.c: 66:     novaTeclaSIO = 0;
  1329  00115E  0E00               	movlw	0
  1330  001160  6E4F               	movwf	_novaTeclaSIO^0,c
  1331                           
  1332                           ;SIO.c: 67:     state = 3;
  1333  001162  0E03               	movlw	3
  1334  001164  6E07               	movwf	motorSIO@state^0,c
  1335                           
  1336                           ;SIO.c: 68:    }
  1337  001166  0012               	return	
  1338  001168                     l4320:
  1339  001168  0E0A               	movlw	10
  1340  00116A  184F               	xorwf	_novaTeclaSIO^0,w,c
  1341  00116C  A4D8               	btfss	status,2,c
  1342  00116E  0012               	return	
  1343  001170  A2AC               	btfss	172,1,c	;volatile
  1344  001172  0012               	return	
  1345                           
  1346                           ;SIO.c: 70:     TXREG = 'F';
  1347  001174  0E46               	movlw	70
  1348  001176  6EAD               	movwf	173,c	;volatile
  1349                           
  1350                           ;SIO.c: 71:     novaTeclaSIO = 0;
  1351  001178  0E00               	movlw	0
  1352  00117A  6E4F               	movwf	_novaTeclaSIO^0,c
  1353                           
  1354                           ;SIO.c: 72:     jugant = 0;
  1355  00117C  9278               	bcf	(_jugant/(0+8))^0,_jugant& (0+7),c
  1356                           
  1357                           ;SIO.c: 73:     state = 4;
  1358  00117E  0E04               	movlw	4
  1359  001180  6E07               	movwf	motorSIO@state^0,c
  1360  001182  0012               	return	
  1361  001184                     l4330:
  1362  001184  5007               	movf	motorSIO@state^0,w,c
  1363  001186  6E6B               	movwf	??_motorSIO^0,c
  1364  001188  6A6C               	clrf	(??_motorSIO+1)^0,c
  1365                           
  1366                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1367                           ; Switch size 1, requested type "simple"
  1368                           ; Number of cases is 1, Range of values is 0 to 0
  1369                           ; switch strategies available:
  1370                           ; Name         Instructions Cycles
  1371                           ; simple_byte            4     3 (average)
  1372                           ;	Chosen strategy is simple_byte
  1373  00118A  506C               	movf	(??_motorSIO+1)^0,w,c
  1374  00118C  0A00               	xorlw	0	; case 0
  1375  00118E  A4D8               	btfss	status,2,c
  1376  001190  0012               	return	
  1377                           
  1378                           ; Switch size 1, requested type "simple"
  1379                           ; Number of cases is 5, Range of values is 0 to 4
  1380                           ; switch strategies available:
  1381                           ; Name         Instructions Cycles
  1382                           ; simple_byte           16     9 (average)
  1383                           ;	Chosen strategy is simple_byte
  1384  001192  506B               	movf	??_motorSIO^0,w,c
  1385  001194  0A00               	xorlw	0	; case 0
  1386  001196  B4D8               	btfsc	status,2,c
  1387  001198  D798               	goto	l4276
  1388  00119A  0A01               	xorlw	1	; case 1
  1389  00119C  B4D8               	btfsc	status,2,c
  1390  00119E  D7A2               	goto	l4284
  1391  0011A0  0A03               	xorlw	3	; case 2
  1392  0011A2  B4D8               	btfsc	status,2,c
  1393  0011A4  D7C0               	goto	l4298
  1394  0011A6  0A01               	xorlw	1	; case 3
  1395  0011A8  B4D8               	btfsc	status,2,c
  1396  0011AA  D7C4               	goto	l4302
  1397  0011AC  0A07               	xorlw	7	; case 4
  1398  0011AE  0012               	return	
  1399  0011B0                     __end_of_motorSIO:
  1400                           	callstack 0
  1401                           
  1402 ;; *************** function _motorJoc *****************
  1403 ;; Defined at:
  1404 ;;		line 22 in file "Joc.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;		None
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;		None
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      void 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/1
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1
  1418 ;;      Params:         0       0       0
  1419 ;;      Locals:         0       0       0
  1420 ;;      Temps:          2       0       0
  1421 ;;      Totals:         2       0       0
  1422 ;;Total ram usage:        2 bytes
  1423 ;; Hardware stack levels used: 1
  1424 ;; Hardware stack levels required when called: 5
  1425 ;; This function calls:
  1426 ;;		_HClearNouSegon
  1427 ;;		_HGetTime
  1428 ;;		_HJugant
  1429 ;;		_HNouSegon
  1430 ;;		_HnoJugant
  1431 ;;		_LcGotoXY
  1432 ;;		_LcLliure
  1433 ;;		_LcNewString
  1434 ;;		_SIOJugant
  1435 ;;		_SIONovaDireccio
  1436 ;;		_SIONovaTecla
  1437 ;;		_SIOStartGame
  1438 ;; This function is called by:
  1439 ;;		_main
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text2
  1444  0013FA                     __ptext2:
  1445                           	callstack 0
  1446  0013FA                     _motorJoc:
  1447                           	callstack 25
  1448                           
  1449                           ;Joc.c: 23:     static char state = 0;;Joc.c: 25:         switch(state) {
  1450                           
  1451                           ;incstack = 0
  1452  0013FA  D040               	goto	l4268
  1453  0013FC                     l4224:
  1454                           
  1455                           ;Joc.c: 27:                 if (usuariJoc != -1) {
  1456  0013FC  2852               	incf	_usuariJoc^0,w,c
  1457  0013FE  B4D8               	btfsc	status,2,c
  1458  001400  0012               	return	
  1459                           
  1460                           ;Joc.c: 28:                     SIOStartGame(usuariJoc);
  1461  001402  5052               	movf	_usuariJoc^0,w,c
  1462  001404  EC16  F00E         	call	_SIOStartGame
  1463                           
  1464                           ;Joc.c: 29:                     HJugant();
  1465  001408  EC5A  F00E         	call	_HJugant	;wreg free
  1466                           
  1467                           ;Joc.c: 30:                     state = 1;
  1468  00140C  0E01               	movlw	1
  1469  00140E  6E09               	movwf	motorJoc@state^0,c
  1470                           
  1471                           ;Joc.c: 32:             break;
  1472                           
  1473                           ;Joc.c: 31:                 }
  1474  001410  0012               	return	
  1475  001412                     l4230:
  1476                           
  1477                           ;Joc.c: 34:                 if (!SIOJugant()) {
  1478  001412  ECF2  F00D         	call	_SIOJugant	;wreg free
  1479  001416  B0D8               	btfsc	status,0,c
  1480  001418  D006               	goto	l4238
  1481                           
  1482                           ;Joc.c: 35:                     usuariJoc = -1;
  1483  00141A  6852               	setf	_usuariJoc^0,c
  1484                           
  1485                           ;Joc.c: 36:                     HnoJugant();
  1486  00141C  EC58  F00E         	call	_HnoJugant	;wreg free
  1487                           
  1488                           ;Joc.c: 37:                     state = 0;
  1489  001420  0E00               	movlw	0
  1490  001422  6E09               	movwf	motorJoc@state^0,c
  1491                           
  1492                           ;Joc.c: 38:                 }
  1493  001424  0012               	return	
  1494  001426                     l4238:
  1495  001426  BE56               	btfsc	_novaDireccio^0,7,c
  1496  001428  D007               	goto	l4246
  1497                           
  1498                           ;Joc.c: 40:                     SIONovaDireccio(novaDireccio);
  1499  00142A  5056               	movf	_novaDireccio^0,w,c
  1500  00142C  EC1E  F00E         	call	_SIONovaDireccio
  1501                           
  1502                           ;Joc.c: 41:                     novaDireccio = -1;
  1503  001430  6856               	setf	_novaDireccio^0,c
  1504  001432                     l4244:
  1505                           
  1506                           ;Joc.c: 42:                     state = 1;
  1507  001432  0E01               	movlw	1
  1508  001434  6E09               	movwf	motorJoc@state^0,c
  1509                           
  1510                           ;Joc.c: 43:                 }
  1511  001436  0012               	return	
  1512  001438                     l4246:
  1513  001438  ECF8  F00D         	call	_HNouSegon	;wreg free
  1514  00143C  A0D8               	btfss	status,0,c
  1515  00143E  D014               	goto	l4258
  1516  001440  EC10  F00E         	call	_LcLliure	;wreg free
  1517  001444  A0D8               	btfss	status,0,c
  1518  001446  D010               	goto	l4258
  1519                           
  1520                           ;Joc.c: 45:                     HClearNouSegon();
  1521  001448  EC5E  F00E         	call	_HClearNouSegon	;wreg free
  1522                           
  1523                           ;Joc.c: 46:                     LcGotoXY(0,1);
  1524  00144C  0E01               	movlw	1
  1525  00144E  6E70               	movwf	LcGotoXY@Row^0,c
  1526  001450  0E00               	movlw	0
  1527  001452  EC6C  F00C         	call	_LcGotoXY
  1528                           
  1529                           ;Joc.c: 47:                     LcNewString(HGetTime());
  1530  001456  EC5C  F00E         	call	_HGetTime	;wreg free
  1531  00145A  6E76               	movwf	??_motorJoc^0,c
  1532  00145C  C076  F06B         	movff	??_motorJoc,LcNewString@new_s
  1533  001460  6A6C               	clrf	(LcNewString@new_s+1)^0,c
  1534  001462  EC0A  F00E         	call	_LcNewString	;wreg free
  1535  001466  D7E5               	goto	l4244
  1536  001468                     l4258:
  1537  001468  505B               	movf	_novaTecla^0,w,c
  1538  00146A  0A80               	xorlw	128
  1539  00146C  0F7F               	addlw	-129
  1540  00146E  A0D8               	btfss	status,0,c
  1541  001470  0012               	return	
  1542                           
  1543                           ;Joc.c: 51:                     SIONovaTecla(novaTecla);
  1544  001472  505B               	movf	_novaTecla^0,w,c
  1545  001474  EC1A  F00E         	call	_SIONovaTecla
  1546                           
  1547                           ;Joc.c: 52:                     novaTecla = -1;
  1548  001478  685B               	setf	_novaTecla^0,c
  1549  00147A  D7DB               	goto	l4244
  1550  00147C                     l4268:
  1551  00147C  5009               	movf	motorJoc@state^0,w,c
  1552  00147E  6E76               	movwf	??_motorJoc^0,c
  1553  001480  6A77               	clrf	(??_motorJoc+1)^0,c
  1554                           
  1555                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1556                           ; Switch size 1, requested type "simple"
  1557                           ; Number of cases is 1, Range of values is 0 to 0
  1558                           ; switch strategies available:
  1559                           ; Name         Instructions Cycles
  1560                           ; simple_byte            4     3 (average)
  1561                           ;	Chosen strategy is simple_byte
  1562  001482  5077               	movf	(??_motorJoc+1)^0,w,c
  1563  001484  0A00               	xorlw	0	; case 0
  1564  001486  A4D8               	btfss	status,2,c
  1565  001488  0012               	return	
  1566                           
  1567                           ; Switch size 1, requested type "simple"
  1568                           ; Number of cases is 2, Range of values is 0 to 1
  1569                           ; switch strategies available:
  1570                           ; Name         Instructions Cycles
  1571                           ; simple_byte            7     4 (average)
  1572                           ;	Chosen strategy is simple_byte
  1573  00148A  5076               	movf	??_motorJoc^0,w,c
  1574  00148C  0A00               	xorlw	0	; case 0
  1575  00148E  B4D8               	btfsc	status,2,c
  1576  001490  D7B5               	goto	l4224
  1577  001492  0A01               	xorlw	1	; case 1
  1578  001494  A4D8               	btfss	status,2,c
  1579  001496  0012               	return	
  1580  001498  D7BC               	goto	l4230
  1581  00149A                     __end_of_motorJoc:
  1582                           	callstack 0
  1583                           
  1584 ;; *************** function _SIOStartGame *****************
  1585 ;; Defined at:
  1586 ;;		line 17 in file "SIO.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;  usuari          1    wreg     unsigned char 
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;  usuari          1    5[COMRAM] unsigned char 
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		wreg
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/1
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1
  1600 ;;      Params:         0       0       0
  1601 ;;      Locals:         1       0       0
  1602 ;;      Temps:          0       0       0
  1603 ;;      Totals:         1       0       0
  1604 ;;Total ram usage:        1 bytes
  1605 ;; Hardware stack levels used: 1
  1606 ;; Hardware stack levels required when called: 2
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_motorJoc
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text3
  1615  001C2C                     __ptext3:
  1616                           	callstack 0
  1617  001C2C                     _SIOStartGame:
  1618                           	callstack 27
  1619                           
  1620                           ;incstack = 0
  1621                           ;SIOStartGame@usuari stored from wreg
  1622  001C2C  6E68               	movwf	SIOStartGame@usuari^0,c
  1623                           
  1624                           ;SIO.c: 18:     usuariActualSIO = usuari;
  1625  001C2E  C068  F051         	movff	SIOStartGame@usuari,_usuariActualSIO
  1626  001C32  0012               	return		;funcret
  1627  001C34                     __end_of_SIOStartGame:
  1628                           	callstack 0
  1629                           
  1630 ;; *************** function _SIONovaTecla *****************
  1631 ;; Defined at:
  1632 ;;		line 24 in file "SIO.c"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;  tecla           1    wreg     char 
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;  tecla           1    5[COMRAM] char 
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  1    wreg      void 
  1639 ;; Registers used:
  1640 ;;		wreg
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/1
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMRAM   BANK0   BANK1
  1646 ;;      Params:         0       0       0
  1647 ;;      Locals:         1       0       0
  1648 ;;      Temps:          0       0       0
  1649 ;;      Totals:         1       0       0
  1650 ;;Total ram usage:        1 bytes
  1651 ;; Hardware stack levels used: 1
  1652 ;; Hardware stack levels required when called: 2
  1653 ;; This function calls:
  1654 ;;		Nothing
  1655 ;; This function is called by:
  1656 ;;		_motorJoc
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           	psect	text4
  1661  001C34                     __ptext4:
  1662                           	callstack 0
  1663  001C34                     _SIONovaTecla:
  1664                           	callstack 27
  1665                           
  1666                           ;incstack = 0
  1667                           ;SIONovaTecla@tecla stored from wreg
  1668  001C34  6E68               	movwf	SIONovaTecla@tecla^0,c
  1669                           
  1670                           ;SIO.c: 25:     novaTeclaSIO = tecla;
  1671  001C36  C068  F04F         	movff	SIONovaTecla@tecla,_novaTeclaSIO
  1672  001C3A  0012               	return		;funcret
  1673  001C3C                     __end_of_SIONovaTecla:
  1674                           	callstack 0
  1675                           
  1676 ;; *************** function _SIONovaDireccio *****************
  1677 ;; Defined at:
  1678 ;;		line 13 in file "SIO.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;  num             1    wreg     unsigned char 
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;  num             1    5[COMRAM] unsigned char 
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  1    wreg      void 
  1685 ;; Registers used:
  1686 ;;		wreg
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/1
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMRAM   BANK0   BANK1
  1692 ;;      Params:         0       0       0
  1693 ;;      Locals:         1       0       0
  1694 ;;      Temps:          0       0       0
  1695 ;;      Totals:         1       0       0
  1696 ;;Total ram usage:        1 bytes
  1697 ;; Hardware stack levels used: 1
  1698 ;; Hardware stack levels required when called: 2
  1699 ;; This function calls:
  1700 ;;		Nothing
  1701 ;; This function is called by:
  1702 ;;		_motorJoc
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text5
  1707  001C3C                     __ptext5:
  1708                           	callstack 0
  1709  001C3C                     _SIONovaDireccio:
  1710                           	callstack 27
  1711                           
  1712                           ;incstack = 0
  1713                           ;SIONovaDireccio@num stored from wreg
  1714  001C3C  6E68               	movwf	SIONovaDireccio@num^0,c
  1715                           
  1716                           ;SIO.c: 14:     direccio = num;
  1717  001C3E  C068  F050         	movff	SIONovaDireccio@num,_direccio
  1718  001C42  0012               	return		;funcret
  1719  001C44                     __end_of_SIONovaDireccio:
  1720                           	callstack 0
  1721                           
  1722 ;; *************** function _SIOJugant *****************
  1723 ;; Defined at:
  1724 ;;		line 27 in file "SIO.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;		None               void
  1731 ;; Registers used:
  1732 ;;		status,0
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/1
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1
  1738 ;;      Params:         0       0       0
  1739 ;;      Locals:         0       0       0
  1740 ;;      Temps:          0       0       0
  1741 ;;      Totals:         0       0       0
  1742 ;;Total ram usage:        0 bytes
  1743 ;; Hardware stack levels used: 1
  1744 ;; Hardware stack levels required when called: 2
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_motorJoc
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text6
  1753  001BE4                     __ptext6:
  1754                           	callstack 0
  1755  001BE4                     _SIOJugant:
  1756                           	callstack 27
  1757                           
  1758                           ;SIO.c: 28:     return jugant;
  1759                           
  1760                           ;incstack = 0
  1761  001BE4  B278               	btfsc	(_jugant/(0+8))^0,_jugant& (0+7),c
  1762  001BE6  D002               	goto	l2038
  1763  001BE8  90D8               	bcf	status,0,c
  1764  001BEA  0012               	return	
  1765  001BEC                     l2038:
  1766  001BEC  80D8               	bsf	status,0,c
  1767  001BEE  0012               	return		;funcret
  1768  001BF0                     __end_of_SIOJugant:
  1769                           	callstack 0
  1770                           
  1771 ;; *************** function _HnoJugant *****************
  1772 ;; Defined at:
  1773 ;;		line 33 in file "Hora.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;		None
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;		None
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  1    wreg      void 
  1780 ;; Registers used:
  1781 ;;		None
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/1
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1
  1787 ;;      Params:         0       0       0
  1788 ;;      Locals:         0       0       0
  1789 ;;      Temps:          0       0       0
  1790 ;;      Totals:         0       0       0
  1791 ;;Total ram usage:        0 bytes
  1792 ;; Hardware stack levels used: 1
  1793 ;; Hardware stack levels required when called: 2
  1794 ;; This function calls:
  1795 ;;		Nothing
  1796 ;; This function is called by:
  1797 ;;		_motorJoc
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text7
  1802  001CB0                     __ptext7:
  1803                           	callstack 0
  1804  001CB0                     _HnoJugant:
  1805                           	callstack 27
  1806                           
  1807                           ;Hora.c: 34:     jugant = 0;
  1808                           
  1809                           ;incstack = 0
  1810  001CB0  9278               	bcf	(_jugant/(0+8))^0,_jugant& (0+7),c
  1811  001CB2  0012               	return		;funcret
  1812  001CB4                     __end_of_HnoJugant:
  1813                           	callstack 0
  1814                           
  1815 ;; *************** function _HNouSegon *****************
  1816 ;; Defined at:
  1817 ;;		line 21 in file "Hora.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;		None               void
  1824 ;; Registers used:
  1825 ;;		status,0
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/1
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1
  1831 ;;      Params:         0       0       0
  1832 ;;      Locals:         0       0       0
  1833 ;;      Temps:          0       0       0
  1834 ;;      Totals:         0       0       0
  1835 ;;Total ram usage:        0 bytes
  1836 ;; Hardware stack levels used: 1
  1837 ;; Hardware stack levels required when called: 2
  1838 ;; This function calls:
  1839 ;;		Nothing
  1840 ;; This function is called by:
  1841 ;;		_motorJoc
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text8
  1846  001BF0                     __ptext8:
  1847                           	callstack 0
  1848  001BF0                     _HNouSegon:
  1849                           	callstack 27
  1850                           
  1851                           ;Hora.c: 22:     return nouSegon;
  1852                           
  1853                           ;incstack = 0
  1854  001BF0  B078               	btfsc	(_nouSegon/(0+8))^0,_nouSegon& (0+7),c
  1855  001BF2  D002               	goto	l2018
  1856  001BF4  90D8               	bcf	status,0,c
  1857  001BF6  0012               	return	
  1858  001BF8                     l2018:
  1859  001BF8  80D8               	bsf	status,0,c
  1860  001BFA  0012               	return		;funcret
  1861  001BFC                     __end_of_HNouSegon:
  1862                           	callstack 0
  1863                           
  1864 ;; *************** function _HJugant *****************
  1865 ;; Defined at:
  1866 ;;		line 36 in file "Hora.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;		None
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;		None
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      void 
  1873 ;; Registers used:
  1874 ;;		None
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/1
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1
  1880 ;;      Params:         0       0       0
  1881 ;;      Locals:         0       0       0
  1882 ;;      Temps:          0       0       0
  1883 ;;      Totals:         0       0       0
  1884 ;;Total ram usage:        0 bytes
  1885 ;; Hardware stack levels used: 1
  1886 ;; Hardware stack levels required when called: 2
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_motorJoc
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text9
  1895  001CB4                     __ptext9:
  1896                           	callstack 0
  1897  001CB4                     _HJugant:
  1898                           	callstack 27
  1899                           
  1900                           ;Hora.c: 37:     jugant = 1;
  1901                           
  1902                           ;incstack = 0
  1903  001CB4  8278               	bsf	(_jugant/(0+8))^0,_jugant& (0+7),c
  1904  001CB6  0012               	return		;funcret
  1905  001CB8                     __end_of_HJugant:
  1906                           	callstack 0
  1907                           
  1908 ;; *************** function _HGetTime *****************
  1909 ;; Defined at:
  1910 ;;		line 29 in file "Hora.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      PTR unsigned char 
  1917 ;; Registers used:
  1918 ;;		wreg
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/1
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1
  1924 ;;      Params:         2       0       0
  1925 ;;      Locals:         0       0       0
  1926 ;;      Temps:          0       0       0
  1927 ;;      Totals:         2       0       0
  1928 ;;Total ram usage:        2 bytes
  1929 ;; Hardware stack levels used: 1
  1930 ;; Hardware stack levels required when called: 2
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_motorJoc
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text10
  1939  001CB8                     __ptext10:
  1940                           	callstack 0
  1941  001CB8                     _HGetTime:
  1942                           	callstack 27
  1943                           
  1944                           ;Hora.c: 30:     return hora;
  1945                           
  1946                           ;incstack = 0
  1947  001CB8  0E5D               	movlw	_hora& (0+255)
  1948  001CBA  0012               	return		;funcret
  1949  001CBC                     __end_of_HGetTime:
  1950                           	callstack 0
  1951                           
  1952 ;; *************** function _HClearNouSegon *****************
  1953 ;; Defined at:
  1954 ;;		line 25 in file "Hora.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;		None
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;		None
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		None
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/1
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1
  1968 ;;      Params:         0       0       0
  1969 ;;      Locals:         0       0       0
  1970 ;;      Temps:          0       0       0
  1971 ;;      Totals:         0       0       0
  1972 ;;Total ram usage:        0 bytes
  1973 ;; Hardware stack levels used: 1
  1974 ;; Hardware stack levels required when called: 2
  1975 ;; This function calls:
  1976 ;;		Nothing
  1977 ;; This function is called by:
  1978 ;;		_motorJoc
  1979 ;; This function uses a non-reentrant model
  1980 ;;
  1981                           
  1982                           	psect	text11
  1983  001CBC                     __ptext11:
  1984                           	callstack 0
  1985  001CBC                     _HClearNouSegon:
  1986                           	callstack 27
  1987                           
  1988                           ;Hora.c: 26:     nouSegon = 0;
  1989                           
  1990                           ;incstack = 0
  1991  001CBC  9078               	bcf	(_nouSegon/(0+8))^0,_nouSegon& (0+7),c
  1992  001CBE  0012               	return		;funcret
  1993  001CC0                     __end_of_HClearNouSegon:
  1994                           	callstack 0
  1995                           
  1996 ;; *************** function _motorHora *****************
  1997 ;; Defined at:
  1998 ;;		line 40 in file "Hora.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;		None
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;		None
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/1
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1
  2012 ;;      Params:         0       0       0
  2013 ;;      Locals:         0       0       0
  2014 ;;      Temps:          2       0       0
  2015 ;;      Totals:         2       0       0
  2016 ;;Total ram usage:        2 bytes
  2017 ;; Hardware stack levels used: 1
  2018 ;; Hardware stack levels required when called: 3
  2019 ;; This function calls:
  2020 ;;		_TiGetTics
  2021 ;;		_TiResetTics
  2022 ;;		_playAltaveu
  2023 ;; This function is called by:
  2024 ;;		_main
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           	psect	text12
  2029  00149A                     __ptext12:
  2030                           	callstack 0
  2031  00149A                     _motorHora:
  2032                           	callstack 27
  2033                           
  2034                           ;Hora.c: 41:  static char state = 0;;Hora.c: 43:  switch(state) {
  2035                           
  2036                           ;incstack = 0
  2037  00149A  D032               	goto	l4386
  2038  00149C                     l4338:
  2039                           
  2040                           ;Hora.c: 45:    if (TiGetTics(timerHora) >= 1205) {
  2041  00149C  500C               	movf	_timerHora^0,w,c
  2042  00149E  EC3C  F00D         	call	_TiGetTics
  2043  0014A2  BE69               	btfsc	(?_TiGetTics+1)^0,7,c
  2044  0014A4  0012               	return	
  2045  0014A6  0EB5               	movlw	181
  2046  0014A8  5C68               	subwf	?_TiGetTics^0,w,c
  2047  0014AA  0E04               	movlw	4
  2048  0014AC  5869               	subwfb	(?_TiGetTics+1)^0,w,c
  2049  0014AE  A0D8               	btfss	status,0,c
  2050  0014B0  0012               	return	
  2051                           
  2052                           ;Hora.c: 46:     TiResetTics(timerHora);
  2053  0014B2  500C               	movf	_timerHora^0,w,c
  2054  0014B4  ECB8  F00D         	call	_TiResetTics
  2055                           
  2056                           ;Hora.c: 47:     if(jugant){
  2057  0014B8  A278               	btfss	(_jugant/(0+8))^0,_jugant& (0+7),c
  2058  0014BA  D01F               	goto	l4382
  2059                           
  2060                           ;Hora.c: 48:       nouSegon = 1;
  2061  0014BC  8078               	bsf	(_nouSegon/(0+8))^0,_nouSegon& (0+7),c
  2062                           
  2063                           ;Hora.c: 50:      hora[4]--;
  2064  0014BE  0661               	decf	(_hora+4)^0,f,c
  2065                           
  2066                           ;Hora.c: 51:      if(hora[4] == ('0'-1)){
  2067  0014C0  0E2F               	movlw	47
  2068  0014C2  1861               	xorwf	(_hora+4)^0,w,c
  2069  0014C4  A4D8               	btfss	status,2,c
  2070  0014C6  D003               	goto	l4354
  2071                           
  2072                           ;Hora.c: 52:       hora[4] = '9';
  2073  0014C8  0E39               	movlw	57
  2074  0014CA  6E61               	movwf	(_hora+4)^0,c
  2075                           
  2076                           ;Hora.c: 53:       hora[3]--;
  2077  0014CC  0660               	decf	(_hora+3)^0,f,c
  2078  0014CE                     l4354:
  2079                           
  2080                           ;Hora.c: 56:      if(hora[3] == ('0'-1)){
  2081  0014CE  0E2F               	movlw	47
  2082  0014D0  1860               	xorwf	(_hora+3)^0,w,c
  2083  0014D2  A4D8               	btfss	status,2,c
  2084  0014D4  D003               	goto	l4360
  2085                           
  2086                           ;Hora.c: 57:       hora[3] = '5';
  2087  0014D6  0E35               	movlw	53
  2088  0014D8  6E60               	movwf	(_hora+3)^0,c
  2089                           
  2090                           ;Hora.c: 58:       hora[1]--;
  2091  0014DA  065E               	decf	(_hora+1)^0,f,c
  2092  0014DC                     l4360:
  2093                           
  2094                           ;Hora.c: 61:      if(hora[1] == ('0'-1)){
  2095  0014DC  0E2F               	movlw	47
  2096  0014DE  185E               	xorwf	(_hora+1)^0,w,c
  2097  0014E0  A4D8               	btfss	status,2,c
  2098  0014E2  D003               	goto	l4366
  2099                           
  2100                           ;Hora.c: 62:       hora[1] = '9';
  2101  0014E4  0E39               	movlw	57
  2102  0014E6  6E5E               	movwf	(_hora+1)^0,c
  2103                           
  2104                           ;Hora.c: 63:       hora[0]--;
  2105  0014E8  065D               	decf	_hora^0,f,c
  2106  0014EA                     l4366:
  2107                           
  2108                           ;Hora.c: 70:      segons++;
  2109  0014EA  2A0B               	incf	_segons^0,f,c
  2110                           
  2111                           ;Hora.c: 71:      if(segons > 59){
  2112  0014EC  0E3B               	movlw	59
  2113  0014EE  640B               	cpfsgt	_segons^0,c
  2114  0014F0  D004               	goto	l4382
  2115                           
  2116                           ;Hora.c: 72:       playAltaveu();
  2117  0014F2  EC60  F00E         	call	_playAltaveu	;wreg free
  2118                           
  2119                           ;Hora.c: 73:       segons = 0;
  2120  0014F6  0E00               	movlw	0
  2121  0014F8  6E0B               	movwf	_segons^0,c
  2122  0014FA                     l4382:
  2123                           
  2124                           ;Hora.c: 76:     state = 0;
  2125  0014FA  0E00               	movlw	0
  2126  0014FC  6E0A               	movwf	motorHora@state^0,c
  2127  0014FE  0012               	return	
  2128  001500                     l4386:
  2129  001500  500A               	movf	motorHora@state^0,w,c
  2130  001502  6E6F               	movwf	??_motorHora^0,c
  2131  001504  6A70               	clrf	(??_motorHora+1)^0,c
  2132                           
  2133                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2134                           ; Switch size 1, requested type "simple"
  2135                           ; Number of cases is 1, Range of values is 0 to 0
  2136                           ; switch strategies available:
  2137                           ; Name         Instructions Cycles
  2138                           ; simple_byte            4     3 (average)
  2139                           ;	Chosen strategy is simple_byte
  2140  001506  5070               	movf	(??_motorHora+1)^0,w,c
  2141  001508  0A00               	xorlw	0	; case 0
  2142  00150A  A4D8               	btfss	status,2,c
  2143  00150C  0012               	return	
  2144                           
  2145                           ; Switch size 1, requested type "simple"
  2146                           ; Number of cases is 1, Range of values is 0 to 0
  2147                           ; switch strategies available:
  2148                           ; Name         Instructions Cycles
  2149                           ; simple_byte            4     3 (average)
  2150                           ;	Chosen strategy is simple_byte
  2151  00150E  506F               	movf	??_motorHora^0,w,c
  2152  001510  0A00               	xorlw	0	; case 0
  2153  001512  A4D8               	btfss	status,2,c
  2154  001514  0012               	return	
  2155  001516  D7C2               	goto	l4338
  2156  001518                     __end_of_motorHora:
  2157                           	callstack 0
  2158                           
  2159 ;; *************** function _playAltaveu *****************
  2160 ;; Defined at:
  2161 ;;		line 14 in file "Altaveu.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		None
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/1
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1
  2175 ;;      Params:         0       0       0
  2176 ;;      Locals:         0       0       0
  2177 ;;      Temps:          0       0       0
  2178 ;;      Totals:         0       0       0
  2179 ;;Total ram usage:        0 bytes
  2180 ;; Hardware stack levels used: 1
  2181 ;; Hardware stack levels required when called: 2
  2182 ;; This function calls:
  2183 ;;		Nothing
  2184 ;; This function is called by:
  2185 ;;		_motorHora
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           	psect	text13
  2190  001CC0                     __ptext13:
  2191                           	callstack 0
  2192  001CC0                     _playAltaveu:
  2193                           	callstack 27
  2194                           
  2195                           ;Altaveu.c: 15:     reproduir = 1;
  2196                           
  2197                           ;incstack = 0
  2198  001CC0  8C78               	bsf	(_reproduir/(0+8))^0,_reproduir& (0+7),c
  2199  001CC2  0012               	return		;funcret
  2200  001CC4                     __end_of_playAltaveu:
  2201                           	callstack 0
  2202                           
  2203 ;; *************** function _motorAltaveu *****************
  2204 ;; Defined at:
  2205 ;;		line 17 in file "Altaveu.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;		None
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;		None
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      void 
  2212 ;; Registers used:
  2213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/1
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1
  2219 ;;      Params:         0       0       0
  2220 ;;      Locals:         0       0       0
  2221 ;;      Temps:          3       0       0
  2222 ;;      Totals:         3       0       0
  2223 ;;Total ram usage:        3 bytes
  2224 ;; Hardware stack levels used: 1
  2225 ;; Hardware stack levels required when called: 3
  2226 ;; This function calls:
  2227 ;;		_TiGetTics
  2228 ;;		_TiResetTics
  2229 ;; This function is called by:
  2230 ;;		_main
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text14
  2235  001290                     __ptext14:
  2236                           	callstack 0
  2237  001290                     _motorAltaveu:
  2238                           	callstack 27
  2239                           
  2240                           ;Altaveu.c: 18: static char state = 0;;Altaveu.c: 20:  switch(state) {
  2241                           
  2242                           ;incstack = 0
  2243  001290  D048               	goto	l4782
  2244  001292                     l731:
  2245                           
  2246                           ;Altaveu.c: 22:    if (reproduir) {
  2247  001292  AC78               	btfss	(_reproduir/(0+8))^0,_reproduir& (0+7),c
  2248  001294  0012               	return	
  2249                           
  2250                           ;Altaveu.c: 23:     nota = 1;
  2251  001296  0E01               	movlw	1
  2252  001298  6E1C               	movwf	_nota^0,c
  2253                           
  2254                           ;Altaveu.c: 24:     copsNota = 0;
  2255  00129A  0E00               	movlw	0
  2256  00129C  6E1A               	movwf	_copsNota^0,c
  2257                           
  2258                           ;Altaveu.c: 25:     TiResetTics(timerAltaveu);
  2259  00129E  501B               	movf	_timerAltaveu^0,w,c
  2260  0012A0  ECB8  F00D         	call	_TiResetTics
  2261  0012A4                     l4746:
  2262                           
  2263                           ;Altaveu.c: 26:     state = 1;
  2264  0012A4  0E01               	movlw	1
  2265  0012A6  6E19               	movwf	motorAltaveu@state^0,c
  2266  0012A8  0012               	return	
  2267  0012AA                     l4748:
  2268                           
  2269                           ;Altaveu.c: 30:    if (nota > 5) {
  2270  0012AA  0E05               	movlw	5
  2271  0012AC  641C               	cpfsgt	_nota^0,c
  2272  0012AE  D004               	goto	l4754
  2273                           
  2274                           ;Altaveu.c: 31:     reproduir = 0;
  2275  0012B0  9C78               	bcf	(_reproduir/(0+8))^0,_reproduir& (0+7),c
  2276                           
  2277                           ;Altaveu.c: 32:     state = 0;
  2278  0012B2  0E00               	movlw	0
  2279  0012B4  6E19               	movwf	motorAltaveu@state^0,c
  2280                           
  2281                           ;Altaveu.c: 33:    }
  2282  0012B6  0012               	return	
  2283  0012B8                     l4754:
  2284  0012B8  0EA8               	movlw	168
  2285  0012BA  181A               	xorwf	_copsNota^0,w,c
  2286  0012BC  A4D8               	btfss	status,2,c
  2287  0012BE  D004               	goto	l4762
  2288                           
  2289                           ;Altaveu.c: 35:     nota++;
  2290  0012C0  2A1C               	incf	_nota^0,f,c
  2291                           
  2292                           ;Altaveu.c: 36:     copsNota = 0;
  2293  0012C2  0E00               	movlw	0
  2294  0012C4  6E1A               	movwf	_copsNota^0,c
  2295  0012C6  D7EE               	goto	l4746
  2296  0012C8                     l4762:
  2297  0012C8  501B               	movf	_timerAltaveu^0,w,c
  2298  0012CA  EC3C  F00D         	call	_TiGetTics
  2299  0012CE  501C               	movf	_nota^0,w,c
  2300  0012D0  6E6F               	movwf	??_motorAltaveu^0,c
  2301  0012D2  6A70               	clrf	(??_motorAltaveu+1)^0,c
  2302  0012D4  5068               	movf	?_TiGetTics^0,w,c
  2303  0012D6  5C6F               	subwf	??_motorAltaveu^0,w,c
  2304  0012D8  5070               	movf	(??_motorAltaveu+1)^0,w,c
  2305  0012DA  0A80               	xorlw	128
  2306  0012DC  6E71               	movwf	(??_motorAltaveu+2)^0,c
  2307  0012DE  5069               	movf	(?_TiGetTics+1)^0,w,c
  2308  0012E0  0A80               	xorlw	128
  2309  0012E2  5871               	subwfb	(??_motorAltaveu+2)^0,w,c
  2310  0012E4  B0D8               	btfsc	status,0,c
  2311  0012E6  0012               	return	
  2312                           
  2313                           ;Altaveu.c: 40:     LATBbits.LB0 = 1;
  2314  0012E8  808A               	bsf	138,0,c	;volatile
  2315                           
  2316                           ;Altaveu.c: 41:     TiResetTics(timerAltaveu);
  2317  0012EA  501B               	movf	_timerAltaveu^0,w,c
  2318  0012EC  ECB8  F00D         	call	_TiResetTics
  2319                           
  2320                           ;Altaveu.c: 42:     state = 2;
  2321  0012F0  0E02               	movlw	2
  2322  0012F2  6E19               	movwf	motorAltaveu@state^0,c
  2323  0012F4  0012               	return	
  2324  0012F6                     l4770:
  2325                           
  2326                           ;Altaveu.c: 46:    if (TiGetTics(timerAltaveu) > nota) {
  2327  0012F6  501B               	movf	_timerAltaveu^0,w,c
  2328  0012F8  EC3C  F00D         	call	_TiGetTics
  2329  0012FC  501C               	movf	_nota^0,w,c
  2330  0012FE  6E6F               	movwf	??_motorAltaveu^0,c
  2331  001300  6A70               	clrf	(??_motorAltaveu+1)^0,c
  2332  001302  5068               	movf	?_TiGetTics^0,w,c
  2333  001304  5C6F               	subwf	??_motorAltaveu^0,w,c
  2334  001306  5070               	movf	(??_motorAltaveu+1)^0,w,c
  2335  001308  0A80               	xorlw	128
  2336  00130A  6E71               	movwf	(??_motorAltaveu+2)^0,c
  2337  00130C  5069               	movf	(?_TiGetTics+1)^0,w,c
  2338  00130E  0A80               	xorlw	128
  2339  001310  5871               	subwfb	(??_motorAltaveu+2)^0,w,c
  2340  001312  B0D8               	btfsc	status,0,c
  2341  001314  0012               	return	
  2342                           
  2343                           ;Altaveu.c: 47:     LATBbits.LB0 = 0;
  2344  001316  908A               	bcf	138,0,c	;volatile
  2345                           
  2346                           ;Altaveu.c: 48:     TiResetTics(timerAltaveu);
  2347  001318  501B               	movf	_timerAltaveu^0,w,c
  2348  00131A  ECB8  F00D         	call	_TiResetTics
  2349                           
  2350                           ;Altaveu.c: 49:     copsNota++;
  2351  00131E  2A1A               	incf	_copsNota^0,f,c
  2352  001320  D7C1               	goto	l4746
  2353  001322                     l4782:
  2354  001322  5019               	movf	motorAltaveu@state^0,w,c
  2355  001324  6E6F               	movwf	??_motorAltaveu^0,c
  2356  001326  6A70               	clrf	(??_motorAltaveu+1)^0,c
  2357                           
  2358                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2359                           ; Switch size 1, requested type "simple"
  2360                           ; Number of cases is 1, Range of values is 0 to 0
  2361                           ; switch strategies available:
  2362                           ; Name         Instructions Cycles
  2363                           ; simple_byte            4     3 (average)
  2364                           ;	Chosen strategy is simple_byte
  2365  001328  5070               	movf	(??_motorAltaveu+1)^0,w,c
  2366  00132A  0A00               	xorlw	0	; case 0
  2367  00132C  A4D8               	btfss	status,2,c
  2368  00132E  0012               	return	
  2369                           
  2370                           ; Switch size 1, requested type "simple"
  2371                           ; Number of cases is 3, Range of values is 0 to 2
  2372                           ; switch strategies available:
  2373                           ; Name         Instructions Cycles
  2374                           ; simple_byte           10     6 (average)
  2375                           ;	Chosen strategy is simple_byte
  2376  001330  506F               	movf	??_motorAltaveu^0,w,c
  2377  001332  0A00               	xorlw	0	; case 0
  2378  001334  B4D8               	btfsc	status,2,c
  2379  001336  D7AD               	goto	l731
  2380  001338  0A01               	xorlw	1	; case 1
  2381  00133A  B4D8               	btfsc	status,2,c
  2382  00133C  D7B6               	goto	l4748
  2383  00133E  0A03               	xorlw	3	; case 2
  2384  001340  A4D8               	btfss	status,2,c
  2385  001342  0012               	return	
  2386  001344  D7D8               	goto	l4770
  2387  001346                     __end_of_motorAltaveu:
  2388                           	callstack 0
  2389                           
  2390 ;; *************** function _menu *****************
  2391 ;; Defined at:
  2392 ;;		line 39 in file "Menu.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;		None
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;		None
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      void 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/1
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1
  2406 ;;      Params:         0       0       0
  2407 ;;      Locals:         0       0       0
  2408 ;;      Temps:          0       2       0
  2409 ;;      Totals:         0       2       0
  2410 ;;Total ram usage:        2 bytes
  2411 ;; Hardware stack levels used: 1
  2412 ;; Hardware stack levels required when called: 6
  2413 ;; This function calls:
  2414 ;;		_GLCDMostraMenu
  2415 ;;		_HActualitzaHora
  2416 ;;		_JJuguem
  2417 ;;		_JUsuari
  2418 ;;		_LcClear
  2419 ;;		_LcGotoXY
  2420 ;;		_LcLliure
  2421 ;;		_LcNewString
  2422 ;;		_LcPutChar
  2423 ;;		_NoFerMenu
  2424 ;;		_SMSoff
  2425 ;;		_SMSon
  2426 ;;		_SiFerMenu
  2427 ;;		_TiGetTics
  2428 ;;		_TiResetTics
  2429 ;;		_URegister
  2430 ;;		_UcheckExists
  2431 ;;		_UcheckExistsGetError
  2432 ;;		_UcheckExistsNotFinished
  2433 ;;		_UenviaChar
  2434 ;;		_UenviaPas
  2435 ;;		_UgetNumUsuaris
  2436 ;;		_UgetUserName
  2437 ;; This function is called by:
  2438 ;;		_main
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text15
  2443  0002C8                     __ptext15:
  2444                           	callstack 0
  2445  0002C8                     _menu:
  2446                           	callstack 24
  2447                           
  2448                           ;Menu.c: 40:  static char state = 0;;Menu.c: 42:  switch(state) {
  2449                           
  2450                           ;incstack = 0
  2451  0002C8  D1E3               	goto	l5740
  2452  0002CA                     l5400:
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;Menu.c: 44:    LcClear();
  2456  0002CA  EC64  F00D         	call	_LcClear	;wreg free
  2457                           
  2458                           ;Menu.c: 45:    LcNewString(loginText);
  2459  0002CE  0EB8               	movlw	low _loginText
  2460  0002D0  6E6B               	movwf	LcNewString@new_s^0,c
  2461  0002D2  6A6C               	clrf	(LcNewString@new_s+1)^0,c
  2462  0002D4  EC0A  F00E         	call	_LcNewString	;wreg free
  2463                           
  2464                           ;Menu.c: 46:    state = 1;
  2465  0002D8  0E01               	movlw	1
  2466  0002DA  6E24               	movwf	menu@state^0,c
  2467                           
  2468                           ;Menu.c: 47:   break;
  2469  0002DC  0012               	return	
  2470  0002DE                     l5406:
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;Menu.c: 49:    if (LcLliure()) {
  2474  0002DE  EC10  F00E         	call	_LcLliure	;wreg free
  2475  0002E2  A0D8               	btfss	status,0,c
  2476  0002E4  0012               	return	
  2477                           
  2478                           ;Menu.c: 50:     LcGotoXY(0,1);
  2479  0002E6  0E01               	movlw	1
  2480  0002E8  6E70               	movwf	LcGotoXY@Row^0,c
  2481  0002EA  0E00               	movlw	0
  2482  0002EC  EC6C  F00C         	call	_LcGotoXY
  2483                           
  2484                           ;Menu.c: 51:     LcNewString(registerText);
  2485  0002F0  0EAD               	movlw	low _registerText
  2486  0002F2  6E6B               	movwf	LcNewString@new_s^0,c
  2487  0002F4  6A6C               	clrf	(LcNewString@new_s+1)^0,c
  2488  0002F6  EC0A  F00E         	call	_LcNewString	;wreg free
  2489                           
  2490                           ;Menu.c: 52:     NovaTecla = -1;
  2491  0002FA  6858               	setf	_NovaTecla^0,c
  2492                           
  2493                           ;Menu.c: 53:     state = 2;
  2494  0002FC  0E02               	movlw	2
  2495  0002FE  6E24               	movwf	menu@state^0,c
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;Menu.c: 55:   break;
  2499                           
  2500                           ;Menu.c: 54:    }
  2501  000300  0012               	return	
  2502  000302                     l5416:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;Menu.c: 57:    if (NovaTecla == 1 && UgetNumUsuaris() > 0) {
  2506  000302  0458               	decf	_NovaTecla^0,w,c
  2507  000304  A4D8               	btfss	status,2,c
  2508  000306  D009               	goto	l5424
  2509                           
  2510                           ; BSR set to: 0
  2511  000308  EC62  F00E         	call	_UgetNumUsuaris	;wreg free
  2512  00030C  0900               	iorlw	0
  2513  00030E  B4D8               	btfsc	status,2,c
  2514  000310  D004               	goto	l5424
  2515                           
  2516                           ;Menu.c: 58:     loginNOTRegister = 1;
  2517  000312  8479               	bsf	(_loginNOTRegister/(0+8))^0,_loginNOTRegister& (0+7),c
  2518  000314                     l5422:
  2519                           
  2520                           ;Menu.c: 59:     state = 3;
  2521  000314  0E03               	movlw	3
  2522  000316  6E24               	movwf	menu@state^0,c
  2523                           
  2524                           ;Menu.c: 60:    }
  2525  000318  0012               	return	
  2526  00031A                     l5424:
  2527  00031A  0E02               	movlw	2
  2528  00031C  1858               	xorwf	_NovaTecla^0,w,c
  2529  00031E  A4D8               	btfss	status,2,c
  2530  000320  0012               	return	
  2531                           
  2532                           ;Menu.c: 62:     loginNOTRegister = 0;
  2533  000322  9479               	bcf	(_loginNOTRegister/(0+8))^0,_loginNOTRegister& (0+7),c
  2534  000324  D7F7               	goto	l5422
  2535  000326                     l483:
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;Menu.c: 67:    NovaTecla = -1;
  2539  000326  6858               	setf	_NovaTecla^0,c
  2540                           
  2541                           ;Menu.c: 68:    novaLletra = -1;
  2542  000328  6857               	setf	_novaLletra^0,c
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;Menu.c: 69:    LcClear();
  2546  00032A  EC64  F00D         	call	_LcClear	;wreg free
  2547                           
  2548                           ;Menu.c: 70:    LcNewString("USER: ");
  2549  00032E  0EBF               	movlw	low STR_1
  2550  000330  6E6B               	movwf	LcNewString@new_s^0,c
  2551  000332  506B               	movf	LcNewString@new_s^0,w,c
  2552  000334  A4D8               	btfss	status,2,c
  2553  000336  0E02               	movlw	high __smallconst
  2554  000338  6E6C               	movwf	(LcNewString@new_s+1)^0,c
  2555  00033A  EC0A  F00E         	call	_LcNewString	;wreg free
  2556                           
  2557                           ;Menu.c: 71:    state = 4;
  2558  00033E  0E04               	movlw	4
  2559  000340  6E24               	movwf	menu@state^0,c
  2560                           
  2561                           ;Menu.c: 72:   break;
  2562  000342  0012               	return	
  2563  000344                     l5436:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;Menu.c: 74:    if (LcLliure()) {
  2567  000344  EC10  F00E         	call	_LcLliure	;wreg free
  2568  000348  A0D8               	btfss	status,0,c
  2569  00034A  0012               	return	
  2570                           
  2571                           ;Menu.c: 75:     LcGotoXY(0,1);
  2572  00034C  0E01               	movlw	1
  2573  00034E  6E70               	movwf	LcGotoXY@Row^0,c
  2574  000350  0E00               	movlw	0
  2575  000352  EC6C  F00C         	call	_LcGotoXY
  2576                           
  2577                           ;Menu.c: 76:     LcNewString("PSWD: ");
  2578  000356  0EB8               	movlw	low STR_2
  2579  000358  6E6B               	movwf	LcNewString@new_s^0,c
  2580  00035A  506B               	movf	LcNewString@new_s^0,w,c
  2581  00035C  A4D8               	btfss	status,2,c
  2582  00035E  0E02               	movlw	high __smallconst
  2583  000360  6E6C               	movwf	(LcNewString@new_s+1)^0,c
  2584  000362  EC0A  F00E         	call	_LcNewString	;wreg free
  2585                           
  2586                           ;Menu.c: 77:     state = 5;
  2587  000366  0E05               	movlw	5
  2588  000368  6E24               	movwf	menu@state^0,c
  2589  00036A  0012               	return	
  2590  00036C                     l5444:
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;Menu.c: 81:    if (LcLliure()) {
  2594  00036C  EC10  F00E         	call	_LcLliure	;wreg free
  2595  000370  A0D8               	btfss	status,0,c
  2596  000372  0012               	return	
  2597                           
  2598                           ;Menu.c: 82:     LcGotoXY(6,0);
  2599  000374  0E00               	movlw	0
  2600  000376  6E70               	movwf	LcGotoXY@Row^0,c
  2601  000378  0E06               	movlw	6
  2602  00037A  EC6C  F00C         	call	_LcGotoXY
  2603                           
  2604                           ;Menu.c: 83:     SMSon();
  2605  00037E  EC52  F00E         	call	_SMSon	;wreg free
  2606                           
  2607                           ;Menu.c: 84:     tmp =0;
  2608  000382  0E00               	movlw	0
  2609  000384  6E28               	movwf	_tmp^0,c
  2610  000386                     l5452:
  2611                           
  2612                           ;Menu.c: 85:     state = 6;
  2613  000386  0E06               	movlw	6
  2614  000388  6E24               	movwf	menu@state^0,c
  2615  00038A  0012               	return	
  2616  00038C                     l5454:
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;Menu.c: 89:    if (novaLletra > 47 && NovaTecla != 10) {
  2620  00038C  5057               	movf	_novaLletra^0,w,c
  2621  00038E  0A80               	xorlw	128
  2622  000390  0F50               	addlw	-176
  2623  000392  A0D8               	btfss	status,0,c
  2624  000394  D00F               	goto	l5464
  2625                           
  2626                           ; BSR set to: 0
  2627  000396  0E0A               	movlw	10
  2628  000398  1858               	xorwf	_NovaTecla^0,w,c
  2629  00039A  B4D8               	btfsc	status,2,c
  2630  00039C  D00B               	goto	l5464
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;Menu.c: 90:     LcPutChar(novaLletra);
  2634  00039E  5057               	movf	_novaLletra^0,w,c
  2635  0003A0  EC00  F00C         	call	_LcPutChar
  2636                           
  2637                           ;Menu.c: 91:     UenviaChar(novaLletra,tmp);
  2638  0003A4  C028  F068         	movff	_tmp,UenviaChar@pos
  2639  0003A8  5057               	movf	_novaLletra^0,w,c
  2640  0003AA  ECEA  F00D         	call	_UenviaChar
  2641  0003AE                     l5462:
  2642                           
  2643                           ;Menu.c: 92:     state = 7;
  2644  0003AE  0E07               	movlw	7
  2645  0003B0  6E24               	movwf	menu@state^0,c
  2646                           
  2647                           ;Menu.c: 93:    }
  2648  0003B2  0012               	return	
  2649  0003B4                     l5464:
  2650                           
  2651                           ; BSR set to: 0
  2652  0003B4  0E0B               	movlw	11
  2653  0003B6  1858               	xorwf	_NovaTecla^0,w,c
  2654  0003B8  A4D8               	btfss	status,2,c
  2655  0003BA  0012               	return	
  2656  0003BC  D7F8               	goto	l5462
  2657  0003BE                     l5468:
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;Menu.c: 99:    if (tmp != 7 && NovaTecla != 11) {
  2661  0003BE  0E07               	movlw	7
  2662  0003C0  1828               	xorwf	_tmp^0,w,c
  2663  0003C2  B4D8               	btfsc	status,2,c
  2664  0003C4  D008               	goto	l5480
  2665                           
  2666                           ; BSR set to: 0
  2667  0003C6  0E0B               	movlw	11
  2668  0003C8  1858               	xorwf	_NovaTecla^0,w,c
  2669  0003CA  B4D8               	btfsc	status,2,c
  2670  0003CC  D004               	goto	l5480
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;Menu.c: 100:     tmp++;
  2674  0003CE  2A28               	incf	_tmp^0,f,c
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;Menu.c: 101:     NovaTecla = -1;
  2678  0003D0  6858               	setf	_NovaTecla^0,c
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;Menu.c: 102:     novaLletra = -1;
  2682  0003D2  6857               	setf	_novaLletra^0,c
  2683  0003D4  D7D8               	goto	l5452
  2684  0003D6                     l5480:
  2685                           
  2686                           ; BSR set to: 0
  2687  0003D6  0E07               	movlw	7
  2688  0003D8  1828               	xorwf	_tmp^0,w,c
  2689  0003DA  B4D8               	btfsc	status,2,c
  2690  0003DC  D004               	goto	u5070
  2691                           
  2692                           ; BSR set to: 0
  2693  0003DE  0E0B               	movlw	11
  2694  0003E0  1858               	xorwf	_NovaTecla^0,w,c
  2695  0003E2  A4D8               	btfss	status,2,c
  2696  0003E4  0012               	return	
  2697  0003E6                     u5070:
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;Menu.c: 106:     LcGotoXY(6,1);
  2701  0003E6  0E01               	movlw	1
  2702  0003E8  6E70               	movwf	LcGotoXY@Row^0,c
  2703  0003EA  0E06               	movlw	6
  2704  0003EC  EC6C  F00C         	call	_LcGotoXY
  2705                           
  2706                           ;Menu.c: 107:     UenviaChar('\0',tmp);
  2707  0003F0  C028  F068         	movff	_tmp,UenviaChar@pos
  2708  0003F4  0E00               	movlw	0
  2709  0003F6  ECEA  F00D         	call	_UenviaChar
  2710                           
  2711                           ;Menu.c: 108:     NovaTecla = -1;
  2712  0003FA  6858               	setf	_NovaTecla^0,c
  2713                           
  2714                           ;Menu.c: 109:     novaLletra = -1;
  2715  0003FC  6857               	setf	_novaLletra^0,c
  2716                           
  2717                           ;Menu.c: 110:     tmp = 0;
  2718  0003FE  0E00               	movlw	0
  2719  000400  6E28               	movwf	_tmp^0,c
  2720  000402                     l5494:
  2721                           
  2722                           ;Menu.c: 111:     state = 8;
  2723  000402  0E08               	movlw	8
  2724  000404  6E24               	movwf	menu@state^0,c
  2725  000406  0012               	return	
  2726  000408                     l5496:
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;Menu.c: 115:    if (novaLletra > 47 && NovaTecla != 10) {
  2730  000408  5057               	movf	_novaLletra^0,w,c
  2731  00040A  0A80               	xorlw	128
  2732  00040C  0F50               	addlw	-176
  2733  00040E  A0D8               	btfss	status,0,c
  2734  000410  D00F               	goto	l5506
  2735                           
  2736                           ; BSR set to: 0
  2737  000412  0E0A               	movlw	10
  2738  000414  1858               	xorwf	_NovaTecla^0,w,c
  2739  000416  B4D8               	btfsc	status,2,c
  2740  000418  D00B               	goto	l5506
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;Menu.c: 116:     LcPutChar(novaLletra);
  2744  00041A  5057               	movf	_novaLletra^0,w,c
  2745  00041C  EC00  F00C         	call	_LcPutChar
  2746                           
  2747                           ;Menu.c: 117:     UenviaPas(novaLletra,tmp);
  2748  000420  C028  F068         	movff	_tmp,UenviaPas@pos
  2749  000424  5057               	movf	_novaLletra^0,w,c
  2750  000426  ECE2  F00D         	call	_UenviaPas
  2751  00042A                     l5504:
  2752                           
  2753                           ;Menu.c: 118:     state = 9;
  2754  00042A  0E09               	movlw	9
  2755  00042C  6E24               	movwf	menu@state^0,c
  2756                           
  2757                           ;Menu.c: 119:    }
  2758  00042E  0012               	return	
  2759  000430                     l5506:
  2760                           
  2761                           ; BSR set to: 0
  2762  000430  0E0B               	movlw	11
  2763  000432  1858               	xorwf	_NovaTecla^0,w,c
  2764  000434  A4D8               	btfss	status,2,c
  2765  000436  0012               	return	
  2766  000438  D7F8               	goto	l5504
  2767  00043A                     l5510:
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;Menu.c: 125:    if (tmp != 7 && NovaTecla != 11) {
  2771  00043A  0E07               	movlw	7
  2772  00043C  1828               	xorwf	_tmp^0,w,c
  2773  00043E  B4D8               	btfsc	status,2,c
  2774  000440  D008               	goto	l5522
  2775                           
  2776                           ; BSR set to: 0
  2777  000442  0E0B               	movlw	11
  2778  000444  1858               	xorwf	_NovaTecla^0,w,c
  2779  000446  B4D8               	btfsc	status,2,c
  2780  000448  D004               	goto	l5522
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;Menu.c: 126:     tmp++;
  2784  00044A  2A28               	incf	_tmp^0,f,c
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;Menu.c: 127:     NovaTecla = -1;
  2788  00044C  6858               	setf	_NovaTecla^0,c
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;Menu.c: 128:     novaLletra = -1;
  2792  00044E  6857               	setf	_novaLletra^0,c
  2793  000450  D7D8               	goto	l5494
  2794  000452                     l5522:
  2795                           
  2796                           ; BSR set to: 0
  2797  000452  0E07               	movlw	7
  2798  000454  1828               	xorwf	_tmp^0,w,c
  2799  000456  B4D8               	btfsc	status,2,c
  2800  000458  D004               	goto	u5140
  2801                           
  2802                           ; BSR set to: 0
  2803  00045A  0E0B               	movlw	11
  2804  00045C  1858               	xorwf	_NovaTecla^0,w,c
  2805  00045E  A4D8               	btfss	status,2,c
  2806  000460  0012               	return	
  2807  000462                     u5140:
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;Menu.c: 132:     UenviaPas('\0',tmp);
  2811  000462  C028  F068         	movff	_tmp,UenviaPas@pos
  2812  000466  0E00               	movlw	0
  2813  000468  ECE2  F00D         	call	_UenviaPas
  2814                           
  2815                           ;Menu.c: 133:     NovaTecla = -1;
  2816  00046C  6858               	setf	_NovaTecla^0,c
  2817                           
  2818                           ;Menu.c: 134:     novaLletra = -1;
  2819  00046E  6857               	setf	_novaLletra^0,c
  2820                           
  2821                           ;Menu.c: 135:     tmp = 0;
  2822  000470  0E00               	movlw	0
  2823  000472  6E28               	movwf	_tmp^0,c
  2824                           
  2825                           ;Menu.c: 136:     UcheckExists();
  2826  000474  EC64  F00E         	call	_UcheckExists	;wreg free
  2827                           
  2828                           ;Menu.c: 137:     SMSoff();
  2829  000478  EC55  F00E         	call	_SMSoff	;wreg free
  2830                           
  2831                           ;Menu.c: 138:     state = 10;
  2832  00047C  0E0A               	movlw	10
  2833  00047E  6E24               	movwf	menu@state^0,c
  2834  000480  0012               	return	
  2835  000482                     l5540:
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;Menu.c: 142:    if (!UcheckExistsNotFinished()) {
  2839  000482  ECFE  F00D         	call	_UcheckExistsNotFinished	;wreg free
  2840  000486  B0D8               	btfsc	status,0,c
  2841  000488  0012               	return	
  2842                           
  2843                           ;Menu.c: 143:     indexUsuari = UcheckExistsGetError();
  2844  00048A  EC22  F00E         	call	_UcheckExistsGetError	;wreg free
  2845  00048E  A0D8               	btfss	status,0,c
  2846  000490  D002               	goto	u5160
  2847  000492  0E01               	movlw	1
  2848  000494  D001               	goto	u5170
  2849  000496                     u5160:
  2850  000496  0E00               	movlw	0
  2851  000498                     u5170:
  2852  000498  6E25               	movwf	_indexUsuari^0,c
  2853                           
  2854                           ;Menu.c: 144:     state = 11;
  2855  00049A  0E0B               	movlw	11
  2856  00049C  6E24               	movwf	menu@state^0,c
  2857  00049E  0012               	return	
  2858  0004A0                     l5546:
  2859                           
  2860                           ;Menu.c: 149:     state = 12;
  2861  0004A0  0E0C               	movlw	12
  2862  0004A2  6E24               	movwf	menu@state^0,c
  2863                           
  2864                           ;Menu.c: 150:    }
  2865  0004A4  0012               	return	
  2866  0004A6                     l5552:
  2867                           
  2868                           ;Menu.c: 153:     state = 0;
  2869  0004A6  0E00               	movlw	0
  2870  0004A8  6E24               	movwf	menu@state^0,c
  2871                           
  2872                           ;Menu.c: 154:    }
  2873  0004AA  0012               	return	
  2874  0004AC                     l5564:
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;Menu.c: 163:    LcClear();
  2878  0004AC  EC64  F00D         	call	_LcClear	;wreg free
  2879                           
  2880                           ;Menu.c: 164:    SiFerMenu();
  2881  0004B0  EC68  F00E         	call	_SiFerMenu	;wreg free
  2882                           
  2883                           ;Menu.c: 165:    GLCDMostraMenu(menuDalt);
  2884  0004B4  5026               	movf	_menuDalt^0,w,c
  2885  0004B6  EC04  F00E         	call	_GLCDMostraMenu
  2886                           
  2887                           ;Menu.c: 166:    novaDireccio = -1;
  2888  0004BA  6856               	setf	_novaDireccio^0,c
  2889                           
  2890                           ;Menu.c: 167:    NovaTecla = -1;
  2891  0004BC  6858               	setf	_NovaTecla^0,c
  2892                           
  2893                           ;Menu.c: 168:    state = 13;
  2894  0004BE  0E0D               	movlw	13
  2895  0004C0  6E24               	movwf	menu@state^0,c
  2896                           
  2897                           ;Menu.c: 169:   break;
  2898  0004C2  0012               	return	
  2899  0004C4                     l5576:
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;Menu.c: 171:    if (novaDireccio == 8) {
  2903  0004C4  0E08               	movlw	8
  2904  0004C6  1856               	xorwf	_novaDireccio^0,w,c
  2905  0004C8  A4D8               	btfss	status,2,c
  2906  0004CA  D005               	goto	l5584
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;Menu.c: 172:     if(menuDalt < 4) menuDalt++;
  2910  0004CC  0E04               	movlw	4
  2911  0004CE  6026               	cpfslt	_menuDalt^0,c
  2912  0004D0  D7E7               	goto	l5546
  2913                           
  2914                           ; BSR set to: 0
  2915  0004D2  2A26               	incf	_menuDalt^0,f,c
  2916  0004D4  D7E5               	goto	l5546
  2917  0004D6                     l5584:
  2918                           
  2919                           ; BSR set to: 0
  2920  0004D6  0E02               	movlw	2
  2921  0004D8  1856               	xorwf	_novaDireccio^0,w,c
  2922  0004DA  A4D8               	btfss	status,2,c
  2923  0004DC  D005               	goto	l5592
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;Menu.c: 176:     if(menuDalt > 0) menuDalt--;
  2927  0004DE  5026               	movf	_menuDalt^0,w,c
  2928  0004E0  B4D8               	btfsc	status,2,c
  2929  0004E2  D7DE               	goto	l5546
  2930                           
  2931                           ; BSR set to: 0
  2932  0004E4  0626               	decf	_menuDalt^0,f,c
  2933  0004E6  D7DC               	goto	l5546
  2934  0004E8                     l5592:
  2935                           
  2936                           ; BSR set to: 0
  2937  0004E8  0E0B               	movlw	11
  2938  0004EA  1858               	xorwf	_NovaTecla^0,w,c
  2939  0004EC  A4D8               	btfss	status,2,c
  2940  0004EE  D013               	goto	l5604
  2941                           
  2942                           ; BSR set to: 0
  2943  0004F0  0E03               	movlw	3
  2944  0004F2  1826               	xorwf	_menuDalt^0,w,c
  2945  0004F4  A4D8               	btfss	status,2,c
  2946  0004F6  D00F               	goto	l5604
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;Menu.c: 180:     NoFerMenu();
  2950  0004F8  EC6A  F00E         	call	_NoFerMenu	;wreg free
  2951                           
  2952                           ;Menu.c: 181:     LcClear();
  2953  0004FC  EC64  F00D         	call	_LcClear	;wreg free
  2954                           
  2955                           ;Menu.c: 182:     LcNewString("BYE BYE ");
  2956  000500  0EAF               	movlw	low STR_3
  2957  000502  6E6B               	movwf	LcNewString@new_s^0,c
  2958  000504  506B               	movf	LcNewString@new_s^0,w,c
  2959  000506  A4D8               	btfss	status,2,c
  2960  000508  0E02               	movlw	high __smallconst
  2961  00050A  6E6C               	movwf	(LcNewString@new_s+1)^0,c
  2962  00050C  EC0A  F00E         	call	_LcNewString	;wreg free
  2963                           
  2964                           ;Menu.c: 183:     state = 14;
  2965  000510  0E0E               	movlw	14
  2966  000512  6E24               	movwf	menu@state^0,c
  2967                           
  2968                           ;Menu.c: 184:    }
  2969  000514  0012               	return	
  2970  000516                     l5604:
  2971                           
  2972                           ; BSR set to: 0
  2973  000516  0E0B               	movlw	11
  2974  000518  1858               	xorwf	_NovaTecla^0,w,c
  2975  00051A  A4D8               	btfss	status,2,c
  2976  00051C  D013               	goto	l5618
  2977                           
  2978                           ; BSR set to: 0
  2979  00051E  0426               	decf	_menuDalt^0,w,c
  2980  000520  A4D8               	btfss	status,2,c
  2981  000522  D010               	goto	l5618
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;Menu.c: 186:     LcClear();
  2985  000524  EC64  F00D         	call	_LcClear	;wreg free
  2986                           
  2987                           ;Menu.c: 187:     NoFerMenu();
  2988  000528  EC6A  F00E         	call	_NoFerMenu	;wreg free
  2989                           
  2990                           ;Menu.c: 188:     LcNewString("Modify Time:");
  2991  00052C  0EA2               	movlw	low STR_4
  2992  00052E  6E6B               	movwf	LcNewString@new_s^0,c
  2993  000530  506B               	movf	LcNewString@new_s^0,w,c
  2994  000532  A4D8               	btfss	status,2,c
  2995  000534  0E02               	movlw	high __smallconst
  2996  000536  6E6C               	movwf	(LcNewString@new_s+1)^0,c
  2997  000538  EC0A  F00E         	call	_LcNewString	;wreg free
  2998                           
  2999                           ;Menu.c: 189:     NovaTecla = -1;
  3000  00053C  6858               	setf	_NovaTecla^0,c
  3001                           
  3002                           ;Menu.c: 190:     state = 16;
  3003  00053E  0E10               	movlw	16
  3004  000540  6E24               	movwf	menu@state^0,c
  3005                           
  3006                           ;Menu.c: 191:    }
  3007  000542  0012               	return	
  3008  000544                     l5618:
  3009                           
  3010                           ; BSR set to: 0
  3011  000544  5026               	movf	_menuDalt^0,w,c
  3012  000546  A4D8               	btfss	status,2,c
  3013  000548  0012               	return	
  3014                           
  3015                           ; BSR set to: 0
  3016  00054A  0E0B               	movlw	11
  3017  00054C  1858               	xorwf	_NovaTecla^0,w,c
  3018  00054E  A4D8               	btfss	status,2,c
  3019  000550  0012               	return	
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;Menu.c: 193:     NoFerMenu();
  3023  000552  EC6A  F00E         	call	_NoFerMenu	;wreg free
  3024                           
  3025                           ;Menu.c: 194:     NovaTecla = -1;
  3026  000556  6858               	setf	_NovaTecla^0,c
  3027                           
  3028                           ;Menu.c: 195:     LcClear();
  3029  000558  EC64  F00D         	call	_LcClear	;wreg free
  3030                           
  3031                           ;Menu.c: 196:     LcNewString("TIME REMAINING:");
  3032  00055C  0E92               	movlw	low STR_5
  3033  00055E  6E6B               	movwf	LcNewString@new_s^0,c
  3034  000560  506B               	movf	LcNewString@new_s^0,w,c
  3035  000562  A4D8               	btfss	status,2,c
  3036  000564  0E02               	movlw	high __smallconst
  3037  000566  6E6C               	movwf	(LcNewString@new_s+1)^0,c
  3038  000568  EC0A  F00E         	call	_LcNewString	;wreg free
  3039                           
  3040                           ;Menu.c: 197:     JJuguem(indexUsuari);
  3041  00056C  5025               	movf	_indexUsuari^0,w,c
  3042  00056E  EC26  F00E         	call	_JJuguem
  3043                           
  3044                           ;Menu.c: 198:     state = 21;
  3045  000572  0E15               	movlw	21
  3046  000574  6E24               	movwf	menu@state^0,c
  3047  000576  0012               	return	
  3048  000578                     l5634:
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;Menu.c: 202:    if (LcLliure()) {
  3052  000578  EC10  F00E         	call	_LcLliure	;wreg free
  3053  00057C  A0D8               	btfss	status,0,c
  3054  00057E  0012               	return	
  3055                           
  3056                           ;Menu.c: 203:     LcNewString(UgetUserName(indexUsuari));
  3057  000580  5025               	movf	_indexUsuari^0,w,c
  3058  000582  ECCF  F00D         	call	_UgetUserName
  3059  000586  C068  F06B         	movff	?_UgetUserName,LcNewString@new_s
  3060  00058A  C069  F06C         	movff	?_UgetUserName+1,LcNewString@new_s+1
  3061  00058E  EC0A  F00E         	call	_LcNewString	;wreg free
  3062                           
  3063                           ;Menu.c: 204:     TiResetTics(timerMenu);
  3064  000592  5027               	movf	_timerMenu^0,w,c
  3065  000594  ECB8  F00D         	call	_TiResetTics
  3066                           
  3067                           ;Menu.c: 205:     state = 15;
  3068  000598  0E0F               	movlw	15
  3069  00059A  6E24               	movwf	menu@state^0,c
  3070  00059C  0012               	return	
  3071  00059E                     l5642:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;Menu.c: 209:    if (TiGetTics(timerMenu) > 2410) {
  3075  00059E  5027               	movf	_timerMenu^0,w,c
  3076  0005A0  EC3C  F00D         	call	_TiGetTics
  3077  0005A4  BE69               	btfsc	(?_TiGetTics+1)^0,7,c
  3078  0005A6  0012               	return	
  3079  0005A8  0E6B               	movlw	107
  3080  0005AA  5C68               	subwf	?_TiGetTics^0,w,c
  3081  0005AC  0E09               	movlw	9
  3082  0005AE  5869               	subwfb	(?_TiGetTics+1)^0,w,c
  3083  0005B0  A0D8               	btfss	status,0,c
  3084  0005B2  0012               	return	
  3085  0005B4  D778               	goto	l5552
  3086  0005B6                     l5646:
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;Menu.c: 214:    if (LcLliure() && NovaTecla > -1 && NovaTecla < 10) {
  3090  0005B6  EC10  F00E         	call	_LcLliure	;wreg free
  3091  0005BA  B0D8               	btfsc	status,0,c
  3092  0005BC  BE58               	btfsc	_NovaTecla^0,7,c
  3093  0005BE  D047               	goto	l5712
  3094  0005C0  5058               	movf	_NovaTecla^0,w,c
  3095  0005C2  0A80               	xorlw	128
  3096  0005C4  0F76               	addlw	-138
  3097  0005C6  B0D8               	btfsc	status,0,c
  3098  0005C8  D042               	goto	l5712
  3099                           
  3100                           ;Menu.c: 215:     LcGotoXY(0,1);
  3101  0005CA  0E01               	movlw	1
  3102  0005CC  6E70               	movwf	LcGotoXY@Row^0,c
  3103  0005CE  0E00               	movlw	0
  3104  0005D0  EC6C  F00C         	call	_LcGotoXY
  3105                           
  3106                           ;Menu.c: 216:     horaTmp[0] = NovaTecla+48;
  3107  0005D4  5058               	movf	_NovaTecla^0,w,c
  3108  0005D6  0F30               	addlw	48
  3109  0005D8  6E3F               	movwf	_horaTmp^0,c
  3110                           
  3111                           ;Menu.c: 217:     LcPutChar(horaTmp[0]);
  3112  0005DA  503F               	movf	_horaTmp^0,w,c
  3113  0005DC  EC00  F00C         	call	_LcPutChar
  3114                           
  3115                           ;Menu.c: 218:     NovaTecla = -1;
  3116  0005E0  6858               	setf	_NovaTecla^0,c
  3117                           
  3118                           ;Menu.c: 219:     state = 17;
  3119  0005E2  0E11               	movlw	17
  3120  0005E4                     L1:
  3121  0005E4  6E24               	movwf	menu@state^0,c
  3122                           
  3123                           ;Menu.c: 220:    }
  3124  0005E6  0012               	return	
  3125  0005E8                     l5666:
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;Menu.c: 226:    if (NovaTecla > -1 && NovaTecla < 10) {
  3129  0005E8  BE58               	btfsc	_NovaTecla^0,7,c
  3130  0005EA  D031               	goto	l5712
  3131                           
  3132                           ; BSR set to: 0
  3133  0005EC  5058               	movf	_NovaTecla^0,w,c
  3134  0005EE  0A80               	xorlw	128
  3135  0005F0  0F76               	addlw	-138
  3136  0005F2  B0D8               	btfsc	status,0,c
  3137  0005F4  D02C               	goto	l5712
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;Menu.c: 227:     horaTmp[1] = NovaTecla+48;
  3141  0005F6  5058               	movf	_NovaTecla^0,w,c
  3142  0005F8  0F30               	addlw	48
  3143  0005FA  6E40               	movwf	(_horaTmp+1)^0,c
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;Menu.c: 228:     LcPutChar(horaTmp[1]);
  3147  0005FC  5040               	movf	(_horaTmp+1)^0,w,c
  3148  0005FE  EC00  F00C         	call	_LcPutChar
  3149                           
  3150                           ;Menu.c: 229:     NovaTecla = -1;
  3151  000602  6858               	setf	_NovaTecla^0,c
  3152                           
  3153                           ;Menu.c: 230:     LcPutChar(':');
  3154  000604  0E3A               	movlw	58
  3155  000606  EC00  F00C         	call	_LcPutChar
  3156                           
  3157                           ;Menu.c: 231:     state = 18;
  3158  00060A  0E12               	movlw	18
  3159  00060C  D7EB               	goto	L1
  3160  00060E                     l5684:
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;Menu.c: 238:    if (NovaTecla > -1 && NovaTecla < 10) {
  3164  00060E  BE58               	btfsc	_NovaTecla^0,7,c
  3165  000610  D01E               	goto	l5712
  3166                           
  3167                           ; BSR set to: 0
  3168  000612  5058               	movf	_NovaTecla^0,w,c
  3169  000614  0A80               	xorlw	128
  3170  000616  0F76               	addlw	-138
  3171  000618  B0D8               	btfsc	status,0,c
  3172  00061A  D019               	goto	l5712
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;Menu.c: 239:     horaTmp[2] = NovaTecla+48;
  3176  00061C  5058               	movf	_NovaTecla^0,w,c
  3177  00061E  0F30               	addlw	48
  3178  000620  6E41               	movwf	(_horaTmp+2)^0,c
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;Menu.c: 240:     LcPutChar(horaTmp[2]);
  3182  000622  5041               	movf	(_horaTmp+2)^0,w,c
  3183  000624  EC00  F00C         	call	_LcPutChar
  3184                           
  3185                           ;Menu.c: 241:     NovaTecla = -1;
  3186  000628  6858               	setf	_NovaTecla^0,c
  3187                           
  3188                           ;Menu.c: 242:     state = 19;
  3189  00062A  0E13               	movlw	19
  3190  00062C  D7DB               	goto	L1
  3191  00062E                     l5700:
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;Menu.c: 249:    if (NovaTecla > -1 && NovaTecla < 10) {
  3195  00062E  BE58               	btfsc	_NovaTecla^0,7,c
  3196  000630  D00E               	goto	l5712
  3197                           
  3198                           ; BSR set to: 0
  3199  000632  5058               	movf	_NovaTecla^0,w,c
  3200  000634  0A80               	xorlw	128
  3201  000636  0F76               	addlw	-138
  3202  000638  B0D8               	btfsc	status,0,c
  3203  00063A  D009               	goto	l5712
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;Menu.c: 250:     horaTmp[3] = NovaTecla+48;
  3207  00063C  5058               	movf	_NovaTecla^0,w,c
  3208  00063E  0F30               	addlw	48
  3209  000640  6E42               	movwf	(_horaTmp+3)^0,c
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;Menu.c: 251:     LcPutChar(horaTmp[3]);
  3213  000642  5042               	movf	(_horaTmp+3)^0,w,c
  3214  000644  EC00  F00C         	call	_LcPutChar
  3215                           
  3216                           ;Menu.c: 252:     NovaTecla = -1;
  3217  000648  6858               	setf	_NovaTecla^0,c
  3218                           
  3219                           ;Menu.c: 253:     state = 20;
  3220  00064A  0E14               	movlw	20
  3221  00064C  D7CB               	goto	L1
  3222  00064E                     l5712:
  3223                           
  3224                           ; BSR set to: 0
  3225  00064E  0E0A               	movlw	10
  3226  000650  1858               	xorwf	_NovaTecla^0,w,c
  3227  000652  A4D8               	btfss	status,2,c
  3228  000654  0012               	return	
  3229  000656  D724               	goto	l5546
  3230  000658                     l5716:
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;Menu.c: 260:    if (NovaTecla == 11) {
  3234  000658  0E0B               	movlw	11
  3235  00065A  1858               	xorwf	_NovaTecla^0,w,c
  3236  00065C  A4D8               	btfss	status,2,c
  3237  00065E  D7F7               	goto	l5712
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;Menu.c: 261:     HActualitzaHora(horaTmp);
  3241  000660  0E3F               	movlw	low _horaTmp
  3242  000662  6E68               	movwf	HActualitzaHora@nova^0,c
  3243  000664  ECC2  F00C         	call	_HActualitzaHora	;wreg free
  3244                           
  3245                           ;Menu.c: 262:     NovaTecla = -1;
  3246  000668  6858               	setf	_NovaTecla^0,c
  3247  00066A  D71A               	goto	l5546
  3248  00066C                     l5728:
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;Menu.c: 270:    if (NovaTecla == 11 && JUsuari() && LcLliure()) {
  3252  00066C  0E0B               	movlw	11
  3253  00066E  1858               	xorwf	_NovaTecla^0,w,c
  3254  000670  A4D8               	btfss	status,2,c
  3255  000672  0012               	return	
  3256                           
  3257                           ; BSR set to: 0
  3258  000674  EC6C  F00E         	call	_JUsuari	;wreg free
  3259  000678  0900               	iorlw	0
  3260  00067A  B4D8               	btfsc	status,2,c
  3261  00067C  0012               	return	
  3262  00067E  EC10  F00E         	call	_LcLliure	;wreg free
  3263  000682  A0D8               	btfss	status,0,c
  3264  000684  0012               	return	
  3265                           
  3266                           ;Menu.c: 271:     LcClear();
  3267  000686  EC64  F00D         	call	_LcClear	;wreg free
  3268                           
  3269                           ;Menu.c: 272:     state = 22;
  3270  00068A  0E16               	movlw	22
  3271  00068C  6E24               	movwf	menu@state^0,c
  3272  00068E  0012               	return	
  3273  000690                     l5740:
  3274  000690  5024               	movf	menu@state^0,w,c
  3275  000692  0100               	movlb	0	; () banked
  3276  000694  6FC0               	movwf	??_menu& (0+255),b
  3277  000696  6BC1               	clrf	(??_menu+1)& (0+255),b
  3278                           
  3279                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3280                           ; Switch size 1, requested type "simple"
  3281                           ; Number of cases is 1, Range of values is 0 to 0
  3282                           ; switch strategies available:
  3283                           ; Name         Instructions Cycles
  3284                           ; simple_byte            4     3 (average)
  3285                           ;	Chosen strategy is simple_byte
  3286  000698  51C1               	movf	(??_menu+1)& (0+255),w,b
  3287  00069A  0A00               	xorlw	0	; case 0
  3288  00069C  A4D8               	btfss	status,2,c
  3289  00069E  0012               	return	
  3290                           
  3291                           ; BSR set to: 0
  3292                           ; Switch size 1, requested type "simple"
  3293                           ; Number of cases is 23, Range of values is 0 to 22
  3294                           ; switch strategies available:
  3295                           ; Name         Instructions Cycles
  3296                           ; simple_byte           70    36 (average)
  3297                           ;	Chosen strategy is simple_byte
  3298  0006A0  51C0               	movf	??_menu& (0+255),w,b
  3299  0006A2  0A00               	xorlw	0	; case 0
  3300  0006A4  B4D8               	btfsc	status,2,c
  3301  0006A6  D611               	goto	l5400
  3302  0006A8  0A01               	xorlw	1	; case 1
  3303  0006AA  B4D8               	btfsc	status,2,c
  3304  0006AC  D618               	goto	l5406
  3305  0006AE  0A03               	xorlw	3	; case 2
  3306  0006B0  B4D8               	btfsc	status,2,c
  3307  0006B2  D627               	goto	l5416
  3308  0006B4  0A01               	xorlw	1	; case 3
  3309  0006B6  B4D8               	btfsc	status,2,c
  3310  0006B8  D636               	goto	l483
  3311  0006BA  0A07               	xorlw	7	; case 4
  3312  0006BC  B4D8               	btfsc	status,2,c
  3313  0006BE  D642               	goto	l5436
  3314  0006C0  0A01               	xorlw	1	; case 5
  3315  0006C2  B4D8               	btfsc	status,2,c
  3316  0006C4  D653               	goto	l5444
  3317  0006C6  0A03               	xorlw	3	; case 6
  3318  0006C8  B4D8               	btfsc	status,2,c
  3319  0006CA  D660               	goto	l5454
  3320  0006CC  0A01               	xorlw	1	; case 7
  3321  0006CE  B4D8               	btfsc	status,2,c
  3322  0006D0  D676               	goto	l5468
  3323  0006D2  0A0F               	xorlw	15	; case 8
  3324  0006D4  B4D8               	btfsc	status,2,c
  3325  0006D6  D698               	goto	l5496
  3326  0006D8  0A01               	xorlw	1	; case 9
  3327  0006DA  B4D8               	btfsc	status,2,c
  3328  0006DC  D6AE               	goto	l5510
  3329  0006DE  0A03               	xorlw	3	; case 10
  3330  0006E0  B4D8               	btfsc	status,2,c
  3331  0006E2  D6CF               	goto	l5540
  3332  0006E4  0A01               	xorlw	1	; case 11
  3333  0006E6  B4D8               	btfsc	status,2,c
  3334  0006E8  D6DB               	goto	l5546
  3335  0006EA  0A07               	xorlw	7	; case 12
  3336  0006EC  B4D8               	btfsc	status,2,c
  3337  0006EE  D6DE               	goto	l5564
  3338  0006F0  0A01               	xorlw	1	; case 13
  3339  0006F2  B4D8               	btfsc	status,2,c
  3340  0006F4  D6E7               	goto	l5576
  3341  0006F6  0A03               	xorlw	3	; case 14
  3342  0006F8  B4D8               	btfsc	status,2,c
  3343  0006FA  D73E               	goto	l5634
  3344  0006FC  0A01               	xorlw	1	; case 15
  3345  0006FE  B4D8               	btfsc	status,2,c
  3346  000700  D74E               	goto	l5642
  3347  000702  0A1F               	xorlw	31	; case 16
  3348  000704  B4D8               	btfsc	status,2,c
  3349  000706  D757               	goto	l5646
  3350  000708  0A01               	xorlw	1	; case 17
  3351  00070A  B4D8               	btfsc	status,2,c
  3352  00070C  D76D               	goto	l5666
  3353  00070E  0A03               	xorlw	3	; case 18
  3354  000710  B4D8               	btfsc	status,2,c
  3355  000712  D77D               	goto	l5684
  3356  000714  0A01               	xorlw	1	; case 19
  3357  000716  B4D8               	btfsc	status,2,c
  3358  000718  D78A               	goto	l5700
  3359  00071A  0A07               	xorlw	7	; case 20
  3360  00071C  B4D8               	btfsc	status,2,c
  3361  00071E  D79C               	goto	l5716
  3362  000720  0A01               	xorlw	1	; case 21
  3363  000722  B4D8               	btfsc	status,2,c
  3364  000724  D7A3               	goto	l5728
  3365  000726  0A03               	xorlw	3	; case 22
  3366  000728  0012               	return	
  3367  00072A                     __end_of_menu:
  3368                           	callstack 0
  3369                           
  3370 ;; *************** function _UgetUserName *****************
  3371 ;; Defined at:
  3372 ;;		line 27 in file "Usuaris.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;  quin            1    wreg     unsigned char 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  quin            1    7[COMRAM] unsigned char 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  2    5[COMRAM] PTR unsigned char 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, prodl, prodh
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/1
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1
  3386 ;;      Params:         2       0       0
  3387 ;;      Locals:         1       0       0
  3388 ;;      Temps:          0       0       0
  3389 ;;      Totals:         3       0       0
  3390 ;;Total ram usage:        3 bytes
  3391 ;; Hardware stack levels used: 1
  3392 ;; Hardware stack levels required when called: 2
  3393 ;; This function calls:
  3394 ;;		Nothing
  3395 ;; This function is called by:
  3396 ;;		_menu
  3397 ;;		_motorSIO
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text16
  3402  001B9E                     __ptext16:
  3403                           	callstack 0
  3404  001B9E                     _UgetUserName:
  3405                           	callstack 27
  3406                           
  3407                           ;incstack = 0
  3408                           ;UgetUserName@quin stored from wreg
  3409  001B9E  6E6A               	movwf	UgetUserName@quin^0,c
  3410                           
  3411                           ;Usuaris.c: 28:     return usuaris[quin].username;
  3412  001BA0  506A               	movf	UgetUserName@quin^0,w,c
  3413  001BA2  0D17               	mullw	23
  3414  001BA4  0E00               	movlw	low _usuaris
  3415  001BA6  24F3               	addwf	243,w,c
  3416  001BA8  6E68               	movwf	?_UgetUserName^0,c
  3417  001BAA  0E01               	movlw	high _usuaris
  3418  001BAC  20F4               	addwfc	prodh,w,c
  3419  001BAE  6E69               	movwf	(?_UgetUserName+1)^0,c
  3420  001BB0  0012               	return		;funcret
  3421  001BB2                     __end_of_UgetUserName:
  3422                           	callstack 0
  3423                           
  3424 ;; *************** function _UgetNumUsuaris *****************
  3425 ;; Defined at:
  3426 ;;		line 30 in file "Usuaris.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;		None
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  1    wreg      unsigned char 
  3433 ;; Registers used:
  3434 ;;		wreg, status,2
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1
  3440 ;;      Params:         0       0       0
  3441 ;;      Locals:         0       0       0
  3442 ;;      Temps:          0       0       0
  3443 ;;      Totals:         0       0       0
  3444 ;;Total ram usage:        0 bytes
  3445 ;; Hardware stack levels used: 1
  3446 ;; Hardware stack levels required when called: 2
  3447 ;; This function calls:
  3448 ;;		Nothing
  3449 ;; This function is called by:
  3450 ;;		_menu
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text17
  3455  001CC4                     __ptext17:
  3456                           	callstack 0
  3457  001CC4                     _UgetNumUsuaris:
  3458                           	callstack 27
  3459                           
  3460                           ;Usuaris.c: 31:     return numUsuaris;
  3461                           
  3462                           ;incstack = 0
  3463  001CC4  5022               	movf	_numUsuaris^0,w,c
  3464  001CC6  0012               	return		;funcret
  3465  001CC8                     __end_of_UgetNumUsuaris:
  3466                           	callstack 0
  3467                           
  3468 ;; *************** function _UenviaPas *****************
  3469 ;; Defined at:
  3470 ;;		line 46 in file "Usuaris.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  c               1    wreg     unsigned char 
  3473 ;;  pos             1    5[COMRAM] unsigned char 
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;  c               1    6[COMRAM] unsigned char 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  1    wreg      void 
  3478 ;; Registers used:
  3479 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1
  3485 ;;      Params:         1       0       0
  3486 ;;      Locals:         1       0       0
  3487 ;;      Temps:          0       0       0
  3488 ;;      Totals:         2       0       0
  3489 ;;Total ram usage:        2 bytes
  3490 ;; Hardware stack levels used: 1
  3491 ;; Hardware stack levels required when called: 2
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_menu
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text18
  3500  001BC4                     __ptext18:
  3501                           	callstack 0
  3502  001BC4                     _UenviaPas:
  3503                           	callstack 27
  3504                           
  3505                           ;incstack = 0
  3506                           ;UenviaPas@c stored from wreg
  3507  001BC4  6E69               	movwf	UenviaPas@c^0,c
  3508                           
  3509                           ;Usuaris.c: 47:     tmpPassword[pos] = c;
  3510  001BC6  5068               	movf	UenviaPas@pos^0,w,c
  3511  001BC8  0F98               	addlw	low _tmpPassword
  3512  001BCA  6ED9               	movwf	fsr2l,c
  3513  001BCC  6ADA               	clrf	fsr2h,c
  3514  001BCE  C069  FFDF         	movff	UenviaPas@c,indf2
  3515  001BD2  0012               	return		;funcret
  3516  001BD4                     __end_of_UenviaPas:
  3517                           	callstack 0
  3518                           
  3519 ;; *************** function _UenviaChar *****************
  3520 ;; Defined at:
  3521 ;;		line 43 in file "Usuaris.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;  c               1    wreg     unsigned char 
  3524 ;;  pos             1    5[COMRAM] unsigned char 
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;  c               1    6[COMRAM] unsigned char 
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  1    wreg      void 
  3529 ;; Registers used:
  3530 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMRAM   BANK0   BANK1
  3536 ;;      Params:         1       0       0
  3537 ;;      Locals:         1       0       0
  3538 ;;      Temps:          0       0       0
  3539 ;;      Totals:         2       0       0
  3540 ;;Total ram usage:        2 bytes
  3541 ;; Hardware stack levels used: 1
  3542 ;; Hardware stack levels required when called: 2
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		_menu
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text19
  3551  001BD4                     __ptext19:
  3552                           	callstack 0
  3553  001BD4                     _UenviaChar:
  3554                           	callstack 27
  3555                           
  3556                           ;incstack = 0
  3557                           ;UenviaChar@c stored from wreg
  3558  001BD4  6E69               	movwf	UenviaChar@c^0,c
  3559                           
  3560                           ;Usuaris.c: 44:     tmpUsername[pos] = c;
  3561  001BD6  5068               	movf	UenviaChar@pos^0,w,c
  3562  001BD8  0F36               	addlw	low _tmpUsername
  3563  001BDA  6ED9               	movwf	fsr2l,c
  3564  001BDC  6ADA               	clrf	fsr2h,c
  3565  001BDE  C069  FFDF         	movff	UenviaChar@c,indf2
  3566  001BE2  0012               	return		;funcret
  3567  001BE4                     __end_of_UenviaChar:
  3568                           	callstack 0
  3569                           
  3570 ;; *************** function _UcheckExistsNotFinished *****************
  3571 ;; Defined at:
  3572 ;;		line 37 in file "Usuaris.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;		None
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;		None
  3577 ;; Return value:  Size  Location     Type
  3578 ;;		None               void
  3579 ;; Registers used:
  3580 ;;		status,0
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1
  3586 ;;      Params:         0       0       0
  3587 ;;      Locals:         0       0       0
  3588 ;;      Temps:          0       0       0
  3589 ;;      Totals:         0       0       0
  3590 ;;Total ram usage:        0 bytes
  3591 ;; Hardware stack levels used: 1
  3592 ;; Hardware stack levels required when called: 2
  3593 ;; This function calls:
  3594 ;;		Nothing
  3595 ;; This function is called by:
  3596 ;;		_menu
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           	psect	text20
  3601  001BFC                     __ptext20:
  3602                           	callstack 0
  3603  001BFC                     _UcheckExistsNotFinished:
  3604                           	callstack 27
  3605                           
  3606                           ;Usuaris.c: 38:     return do_check_exists;
  3607                           
  3608                           ;incstack = 0
  3609  001BFC  B279               	btfsc	(_do_check_exists/(0+8))^0,_do_check_exists& (0+7),c
  3610  001BFE  D002               	goto	l3868
  3611  001C00  90D8               	bcf	status,0,c
  3612  001C02  0012               	return	
  3613  001C04                     l3868:
  3614  001C04  80D8               	bsf	status,0,c
  3615  001C06  0012               	return		;funcret
  3616  001C08                     __end_of_UcheckExistsNotFinished:
  3617                           	callstack 0
  3618                           
  3619 ;; *************** function _UcheckExistsGetError *****************
  3620 ;; Defined at:
  3621 ;;		line 40 in file "Usuaris.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;		None
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;		None
  3626 ;; Return value:  Size  Location     Type
  3627 ;;		None               void
  3628 ;; Registers used:
  3629 ;;		wreg, status,0
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMRAM   BANK0   BANK1
  3635 ;;      Params:         0       0       0
  3636 ;;      Locals:         0       0       0
  3637 ;;      Temps:          1       0       0
  3638 ;;      Totals:         1       0       0
  3639 ;;Total ram usage:        1 bytes
  3640 ;; Hardware stack levels used: 1
  3641 ;; Hardware stack levels required when called: 2
  3642 ;; This function calls:
  3643 ;;		Nothing
  3644 ;; This function is called by:
  3645 ;;		_menu
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           	psect	text21
  3650  001C44                     __ptext21:
  3651                           	callstack 0
  3652  001C44                     _UcheckExistsGetError:
  3653                           	callstack 27
  3654                           
  3655                           ;Usuaris.c: 41:     return usuariLoguejat;
  3656                           
  3657                           ;incstack = 0
  3658  001C44  C055  F068         	movff	_usuariLoguejat,??_UcheckExistsGetError
  3659  001C48  3068               	rrcf	??_UcheckExistsGetError^0,w,c
  3660  001C4A  0012               	return		;funcret
  3661  001C4C                     __end_of_UcheckExistsGetError:
  3662                           	callstack 0
  3663                           
  3664 ;; *************** function _UcheckExists *****************
  3665 ;; Defined at:
  3666 ;;		line 34 in file "Usuaris.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;		None
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;		None
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  1    wreg      void 
  3673 ;; Registers used:
  3674 ;;		None
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1
  3680 ;;      Params:         0       0       0
  3681 ;;      Locals:         0       0       0
  3682 ;;      Temps:          0       0       0
  3683 ;;      Totals:         0       0       0
  3684 ;;Total ram usage:        0 bytes
  3685 ;; Hardware stack levels used: 1
  3686 ;; Hardware stack levels required when called: 2
  3687 ;; This function calls:
  3688 ;;		Nothing
  3689 ;; This function is called by:
  3690 ;;		_menu
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text22
  3695  001CC8                     __ptext22:
  3696                           	callstack 0
  3697  001CC8                     _UcheckExists:
  3698                           	callstack 27
  3699                           
  3700                           ;Usuaris.c: 35:     do_check_exists = 1;
  3701                           
  3702                           ;incstack = 0
  3703  001CC8  8279               	bsf	(_do_check_exists/(0+8))^0,_do_check_exists& (0+7),c
  3704  001CCA  0012               	return		;funcret
  3705  001CCC                     __end_of_UcheckExists:
  3706                           	callstack 0
  3707                           
  3708 ;; *************** function _URegister *****************
  3709 ;; Defined at:
  3710 ;;		line 54 in file "Usuaris.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;		None
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;		None
  3715 ;; Return value:  Size  Location     Type
  3716 ;;                  1    wreg      void 
  3717 ;; Registers used:
  3718 ;;		None
  3719 ;; Tracked objects:
  3720 ;;		On entry : 0/0
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMRAM   BANK0   BANK1
  3724 ;;      Params:         0       0       0
  3725 ;;      Locals:         0       0       0
  3726 ;;      Temps:          0       0       0
  3727 ;;      Totals:         0       0       0
  3728 ;;Total ram usage:        0 bytes
  3729 ;; Hardware stack levels used: 1
  3730 ;; Hardware stack levels required when called: 2
  3731 ;; This function calls:
  3732 ;;		Nothing
  3733 ;; This function is called by:
  3734 ;;		_menu
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text23
  3739  001CCC                     __ptext23:
  3740                           	callstack 0
  3741  001CCC                     _URegister:
  3742                           	callstack 27
  3743                           
  3744                           ;Usuaris.c: 55:     do_register = 1;
  3745                           
  3746                           ;incstack = 0
  3747  001CCC  8079               	bsf	(_do_register/(0+8))^0,_do_register& (0+7),c
  3748  001CCE  0012               	return		;funcret
  3749  001CD0                     __end_of_URegister:
  3750                           	callstack 0
  3751                           
  3752 ;; *************** function _SiFerMenu *****************
  3753 ;; Defined at:
  3754 ;;		line 19 in file "GestioLCD.c"
  3755 ;; Parameters:    Size  Location     Type
  3756 ;;		None
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;		None
  3759 ;; Return value:  Size  Location     Type
  3760 ;;                  1    wreg      void 
  3761 ;; Registers used:
  3762 ;;		None
  3763 ;; Tracked objects:
  3764 ;;		On entry : 0/0
  3765 ;;		On exit  : 0/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMRAM   BANK0   BANK1
  3768 ;;      Params:         0       0       0
  3769 ;;      Locals:         0       0       0
  3770 ;;      Temps:          0       0       0
  3771 ;;      Totals:         0       0       0
  3772 ;;Total ram usage:        0 bytes
  3773 ;; Hardware stack levels used: 1
  3774 ;; Hardware stack levels required when called: 2
  3775 ;; This function calls:
  3776 ;;		Nothing
  3777 ;; This function is called by:
  3778 ;;		_menu
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           	psect	text24
  3783  001CD0                     __ptext24:
  3784                           	callstack 0
  3785  001CD0                     _SiFerMenu:
  3786                           	callstack 27
  3787                           
  3788                           ;GestioLCD.c: 20:     ferMenu = 1;
  3789                           
  3790                           ;incstack = 0
  3791  001CD0  8A78               	bsf	(_ferMenu/(0+8))^0,_ferMenu& (0+7),c
  3792  001CD2  0012               	return		;funcret
  3793  001CD4                     __end_of_SiFerMenu:
  3794                           	callstack 0
  3795                           
  3796 ;; *************** function _SMSon *****************
  3797 ;; Defined at:
  3798 ;;		line 130 in file "Ssms.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;		None
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;		None
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  1    wreg      void 
  3805 ;; Registers used:
  3806 ;;		None
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1
  3812 ;;      Params:         0       0       0
  3813 ;;      Locals:         0       0       0
  3814 ;;      Temps:          0       0       0
  3815 ;;      Totals:         0       0       0
  3816 ;;Total ram usage:        0 bytes
  3817 ;; Hardware stack levels used: 1
  3818 ;; Hardware stack levels required when called: 2
  3819 ;; This function calls:
  3820 ;;		Nothing
  3821 ;; This function is called by:
  3822 ;;		_menu
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text25
  3827  001CA4                     __ptext25:
  3828                           	callstack 0
  3829  001CA4                     _SMSon:
  3830                           	callstack 27
  3831                           
  3832                           ;Ssms.c: 131:     setSMSon = 1;
  3833                           
  3834                           ;incstack = 0
  3835  001CA4  8679               	bsf	(_setSMSon/(0+8))^0,_setSMSon& (0+7),c
  3836                           
  3837                           ;Ssms.c: 132:     novaTecla = -1;
  3838  001CA6  685B               	setf	_novaTecla^0,c
  3839  001CA8  0012               	return		;funcret
  3840  001CAA                     __end_of_SMSon:
  3841                           	callstack 0
  3842                           
  3843 ;; *************** function _SMSoff *****************
  3844 ;; Defined at:
  3845 ;;		line 135 in file "Ssms.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;		None
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;		None
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  1    wreg      void 
  3852 ;; Registers used:
  3853 ;;		None
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1
  3859 ;;      Params:         0       0       0
  3860 ;;      Locals:         0       0       0
  3861 ;;      Temps:          0       0       0
  3862 ;;      Totals:         0       0       0
  3863 ;;Total ram usage:        0 bytes
  3864 ;; Hardware stack levels used: 1
  3865 ;; Hardware stack levels required when called: 2
  3866 ;; This function calls:
  3867 ;;		Nothing
  3868 ;; This function is called by:
  3869 ;;		_menu
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text26
  3874  001CAA                     __ptext26:
  3875                           	callstack 0
  3876  001CAA                     _SMSoff:
  3877                           	callstack 27
  3878                           
  3879                           ;Ssms.c: 136:     setSMSon = 0;
  3880                           
  3881                           ;incstack = 0
  3882  001CAA  9679               	bcf	(_setSMSon/(0+8))^0,_setSMSon& (0+7),c
  3883                           
  3884                           ;Ssms.c: 137:     novaTecla = -1;
  3885  001CAC  685B               	setf	_novaTecla^0,c
  3886  001CAE  0012               	return		;funcret
  3887  001CB0                     __end_of_SMSoff:
  3888                           	callstack 0
  3889                           
  3890 ;; *************** function _NoFerMenu *****************
  3891 ;; Defined at:
  3892 ;;		line 22 in file "GestioLCD.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;		None
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;		None
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      void 
  3899 ;; Registers used:
  3900 ;;		None
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMRAM   BANK0   BANK1
  3906 ;;      Params:         0       0       0
  3907 ;;      Locals:         0       0       0
  3908 ;;      Temps:          0       0       0
  3909 ;;      Totals:         0       0       0
  3910 ;;Total ram usage:        0 bytes
  3911 ;; Hardware stack levels used: 1
  3912 ;; Hardware stack levels required when called: 2
  3913 ;; This function calls:
  3914 ;;		Nothing
  3915 ;; This function is called by:
  3916 ;;		_menu
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	text27
  3921  001CD4                     __ptext27:
  3922                           	callstack 0
  3923  001CD4                     _NoFerMenu:
  3924                           	callstack 27
  3925                           
  3926                           ;GestioLCD.c: 23:     ferMenu = 0;
  3927                           
  3928                           ;incstack = 0
  3929  001CD4  9A78               	bcf	(_ferMenu/(0+8))^0,_ferMenu& (0+7),c
  3930  001CD6  0012               	return		;funcret
  3931  001CD8                     __end_of_NoFerMenu:
  3932                           	callstack 0
  3933                           
  3934 ;; *************** function _JUsuari *****************
  3935 ;; Defined at:
  3936 ;;		line 18 in file "Joc.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      char 
  3943 ;; Registers used:
  3944 ;;		wreg, status,2
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1
  3950 ;;      Params:         0       0       0
  3951 ;;      Locals:         0       0       0
  3952 ;;      Temps:          0       0       0
  3953 ;;      Totals:         0       0       0
  3954 ;;Total ram usage:        0 bytes
  3955 ;; Hardware stack levels used: 1
  3956 ;; Hardware stack levels required when called: 2
  3957 ;; This function calls:
  3958 ;;		Nothing
  3959 ;; This function is called by:
  3960 ;;		_menu
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text28
  3965  001CD8                     __ptext28:
  3966                           	callstack 0
  3967  001CD8                     _JUsuari:
  3968                           	callstack 27
  3969                           
  3970                           ;Joc.c: 19:     return usuariJoc;
  3971                           
  3972                           ;incstack = 0
  3973  001CD8  5052               	movf	_usuariJoc^0,w,c
  3974  001CDA  0012               	return		;funcret
  3975  001CDC                     __end_of_JUsuari:
  3976                           	callstack 0
  3977                           
  3978 ;; *************** function _JJuguem *****************
  3979 ;; Defined at:
  3980 ;;		line 11 in file "Joc.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  usuari          1    wreg     unsigned char 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  usuari          1    5[COMRAM] unsigned char 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		wreg
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1
  3994 ;;      Params:         0       0       0
  3995 ;;      Locals:         1       0       0
  3996 ;;      Temps:          0       0       0
  3997 ;;      Totals:         1       0       0
  3998 ;;Total ram usage:        1 bytes
  3999 ;; Hardware stack levels used: 1
  4000 ;; Hardware stack levels required when called: 2
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_menu
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text29
  4009  001C4C                     __ptext29:
  4010                           	callstack 0
  4011  001C4C                     _JJuguem:
  4012                           	callstack 27
  4013                           
  4014                           ;incstack = 0
  4015                           ;JJuguem@usuari stored from wreg
  4016  001C4C  6E68               	movwf	JJuguem@usuari^0,c
  4017                           
  4018                           ;Joc.c: 12:     usuariJoc = usuari;
  4019  001C4E  C068  F052         	movff	JJuguem@usuari,_usuariJoc
  4020  001C52  0012               	return		;funcret
  4021  001C54                     __end_of_JJuguem:
  4022                           	callstack 0
  4023                           
  4024 ;; *************** function _HActualitzaHora *****************
  4025 ;; Defined at:
  4026 ;;		line 14 in file "Hora.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;  nova            1    5[COMRAM] PTR unsigned char 
  4029 ;;		 -> horaTmp(4), 
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;		None
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      void 
  4034 ;; Registers used:
  4035 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1
  4041 ;;      Params:         1       0       0
  4042 ;;      Locals:         0       0       0
  4043 ;;      Temps:          0       0       0
  4044 ;;      Totals:         1       0       0
  4045 ;;Total ram usage:        1 bytes
  4046 ;; Hardware stack levels used: 1
  4047 ;; Hardware stack levels required when called: 2
  4048 ;; This function calls:
  4049 ;;		Nothing
  4050 ;; This function is called by:
  4051 ;;		_menu
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text30
  4056  001984                     __ptext30:
  4057                           	callstack 0
  4058  001984                     _HActualitzaHora:
  4059                           	callstack 27
  4060                           
  4061                           ;Hora.c: 15:     hora[0] = nova[0];
  4062                           
  4063                           ;incstack = 0
  4064  001984  5068               	movf	HActualitzaHora@nova^0,w,c
  4065  001986  6ED9               	movwf	fsr2l,c
  4066  001988  6ADA               	clrf	fsr2h,c
  4067  00198A  50DF               	movf	indf2,w,c
  4068  00198C  6E5D               	movwf	_hora^0,c
  4069                           
  4070                           ;Hora.c: 16:     hora[1] = nova[1];
  4071  00198E  5068               	movf	HActualitzaHora@nova^0,w,c
  4072  001990  6ED9               	movwf	fsr2l,c
  4073  001992  6ADA               	clrf	fsr2h,c
  4074  001994  0E01               	movlw	1
  4075  001996  26D9               	addwf	fsr2l,f,c
  4076  001998  50DF               	movf	indf2,w,c
  4077  00199A  6E5E               	movwf	(_hora+1)^0,c
  4078                           
  4079                           ;Hora.c: 17:     hora[3] = nova[2];
  4080  00199C  5068               	movf	HActualitzaHora@nova^0,w,c
  4081  00199E  6ED9               	movwf	fsr2l,c
  4082  0019A0  6ADA               	clrf	fsr2h,c
  4083  0019A2  0E02               	movlw	2
  4084  0019A4  26D9               	addwf	fsr2l,f,c
  4085  0019A6  50DF               	movf	indf2,w,c
  4086  0019A8  6E60               	movwf	(_hora+3)^0,c
  4087                           
  4088                           ;Hora.c: 18:     hora[4] = nova[3];
  4089  0019AA  5068               	movf	HActualitzaHora@nova^0,w,c
  4090  0019AC  6ED9               	movwf	fsr2l,c
  4091  0019AE  6ADA               	clrf	fsr2h,c
  4092  0019B0  0E03               	movlw	3
  4093  0019B2  26D9               	addwf	fsr2l,f,c
  4094  0019B4  50DF               	movf	indf2,w,c
  4095  0019B6  6E61               	movwf	(_hora+4)^0,c
  4096  0019B8  0012               	return		;funcret
  4097  0019BA                     __end_of_HActualitzaHora:
  4098                           	callstack 0
  4099                           
  4100 ;; *************** function _GLCDMostraMenu *****************
  4101 ;; Defined at:
  4102 ;;		line 30 in file "GestioLCD.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;  num             1    wreg     unsigned char 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  num             1    5[COMRAM] unsigned char 
  4107 ;; Return value:  Size  Location     Type
  4108 ;;                  1    wreg      void 
  4109 ;; Registers used:
  4110 ;;		wreg
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMRAM   BANK0   BANK1
  4116 ;;      Params:         0       0       0
  4117 ;;      Locals:         1       0       0
  4118 ;;      Temps:          0       0       0
  4119 ;;      Totals:         1       0       0
  4120 ;;Total ram usage:        1 bytes
  4121 ;; Hardware stack levels used: 1
  4122 ;; Hardware stack levels required when called: 2
  4123 ;; This function calls:
  4124 ;;		Nothing
  4125 ;; This function is called by:
  4126 ;;		_menu
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           	psect	text31
  4131  001C08                     __ptext31:
  4132                           	callstack 0
  4133  001C08                     _GLCDMostraMenu:
  4134                           	callstack 27
  4135                           
  4136                           ;incstack = 0
  4137                           ;GLCDMostraMenu@num stored from wreg
  4138  001C08  6E68               	movwf	GLCDMostraMenu@num^0,c
  4139                           
  4140                           ;GestioLCD.c: 31:     newString = 1;
  4141  001C0A  8878               	bsf	(_newString/(0+8))^0,_newString& (0+7),c
  4142                           
  4143                           ;GestioLCD.c: 32:     menuDaltGLCD = num;
  4144  001C0C  C068  F017         	movff	GLCDMostraMenu@num,_menuDaltGLCD
  4145                           
  4146                           ;GestioLCD.c: 33:     ferMenu = 1;
  4147  001C10  8A78               	bsf	(_ferMenu/(0+8))^0,_ferMenu& (0+7),c
  4148  001C12  0012               	return		;funcret
  4149  001C14                     __end_of_GLCDMostraMenu:
  4150                           	callstack 0
  4151                           
  4152 ;; *************** function _init_ports *****************
  4153 ;; Defined at:
  4154 ;;		line 25 in file "main.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  1    wreg      void 
  4161 ;; Registers used:
  4162 ;;		wreg, status,2
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1
  4168 ;;      Params:         0       0       0
  4169 ;;      Locals:         0       0       0
  4170 ;;      Temps:          0       0       0
  4171 ;;      Totals:         0       0       0
  4172 ;;Total ram usage:        0 bytes
  4173 ;; Hardware stack levels used: 1
  4174 ;; Hardware stack levels required when called: 2
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		_main
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           	psect	text32
  4183  001B30                     __ptext32:
  4184                           	callstack 0
  4185  001B30                     _init_ports:
  4186                           	callstack 28
  4187                           
  4188                           ;incstack = 0
  4189  001B30  0E03               	movlw	3
  4190  001B32  6E92               	movwf	146,c	;volatile
  4191  001B34  0EE0               	movlw	224
  4192  001B36  6E93               	movwf	147,c	;volatile
  4193  001B38  968A               	bcf	138,3,c	;volatile
  4194  001B3A  908A               	bcf	138,0,c	;volatile
  4195  001B3C  928A               	bcf	138,1,c	;volatile
  4196                           
  4197                           ;main.c: 48:     TRISC = 0xC0;
  4198  001B3E  0EC0               	movlw	192
  4199  001B40  6E94               	movwf	148,c	;volatile
  4200                           
  4201                           ;main.c: 58:     TRISD = 0x8F;
  4202  001B42  0E8F               	movlw	143
  4203  001B44  6E95               	movwf	149,c	;volatile
  4204                           
  4205                           ;main.c: 59:     LATD = 0x00;
  4206  001B46  0E00               	movlw	0
  4207  001B48  6E8C               	movwf	140,c	;volatile
  4208                           
  4209                           ;main.c: 62:     EECON1bits.EEPGD = 1;
  4210  001B4A  8EA6               	bsf	166,7,c	;volsfr
  4211                           
  4212                           ;main.c: 63:     EECON1bits.CFGS = 0;
  4213  001B4C  9CA6               	bcf	166,6,c	;volsfr
  4214  001B4E  0012               	return		;funcret
  4215  001B50                     __end_of_init_ports:
  4216                           	callstack 0
  4217                           
  4218 ;; *************** function _init_eusart *****************
  4219 ;; Defined at:
  4220 ;;		line 66 in file "main.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1
  4234 ;;      Params:         0       0       0
  4235 ;;      Locals:         0       0       0
  4236 ;;      Temps:          0       0       0
  4237 ;;      Totals:         0       0       0
  4238 ;;Total ram usage:        0 bytes
  4239 ;; Hardware stack levels used: 1
  4240 ;; Hardware stack levels required when called: 2
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_main
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text33
  4249  001B88                     __ptext33:
  4250                           	callstack 0
  4251  001B88                     _init_eusart:
  4252                           	callstack 28
  4253                           
  4254                           ;main.c: 67:     TXSTA = 0x24;
  4255                           
  4256                           ;incstack = 0
  4257  001B88  0E24               	movlw	36
  4258  001B8A  6EAC               	movwf	172,c	;volatile
  4259                           
  4260                           ;main.c: 68:     RCSTA = 0x90;
  4261  001B8C  0E90               	movlw	144
  4262  001B8E  6EAB               	movwf	171,c	;volatile
  4263                           
  4264                           ;main.c: 69:     BAUDCON = 0x08;
  4265  001B90  0E08               	movlw	8
  4266  001B92  6EB8               	movwf	184,c	;volatile
  4267                           
  4268                           ;main.c: 70:     SPBRGH = 0x04;
  4269  001B94  0E04               	movlw	4
  4270  001B96  6EB0               	movwf	176,c	;volatile
  4271                           
  4272                           ;main.c: 71:     SPBRG = 0x10;
  4273  001B98  0E10               	movlw	16
  4274  001B9A  6EAF               	movwf	175,c	;volatile
  4275  001B9C  0012               	return		;funcret
  4276  001B9E                     __end_of_init_eusart:
  4277                           	callstack 0
  4278                           
  4279 ;; *************** function _initHora *****************
  4280 ;; Defined at:
  4281 ;;		line 10 in file "Hora.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;		None
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;		None
  4286 ;; Return value:  Size  Location     Type
  4287 ;;                  1    wreg      void 
  4288 ;; Registers used:
  4289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4290 ;; Tracked objects:
  4291 ;;		On entry : 0/0
  4292 ;;		On exit  : 0/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMRAM   BANK0   BANK1
  4295 ;;      Params:         0       0       0
  4296 ;;      Locals:         0       0       0
  4297 ;;      Temps:          0       0       0
  4298 ;;      Totals:         0       0       0
  4299 ;;Total ram usage:        0 bytes
  4300 ;; Hardware stack levels used: 1
  4301 ;; Hardware stack levels required when called: 3
  4302 ;; This function calls:
  4303 ;;		_TiGetTimer
  4304 ;; This function is called by:
  4305 ;;		_main
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           	psect	text34
  4310  001C54                     __ptext34:
  4311                           	callstack 0
  4312  001C54                     _initHora:
  4313                           	callstack 27
  4314                           
  4315                           ;Hora.c: 11:     timerHora = TiGetTimer();
  4316                           
  4317                           ;incstack = 0
  4318  001C54  EC89  F00C         	call	_TiGetTimer	;wreg free
  4319  001C58  6E0C               	movwf	_timerHora^0,c
  4320  001C5A  0012               	return		;funcret
  4321  001C5C                     __end_of_initHora:
  4322                           	callstack 0
  4323                           
  4324 ;; *************** function _initAltaveu *****************
  4325 ;; Defined at:
  4326 ;;		line 10 in file "Altaveu.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;		None
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;		None
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      void 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1
  4340 ;;      Params:         0       0       0
  4341 ;;      Locals:         0       0       0
  4342 ;;      Temps:          0       0       0
  4343 ;;      Totals:         0       0       0
  4344 ;;Total ram usage:        0 bytes
  4345 ;; Hardware stack levels used: 1
  4346 ;; Hardware stack levels required when called: 3
  4347 ;; This function calls:
  4348 ;;		_TiGetTimer
  4349 ;; This function is called by:
  4350 ;;		_main
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text35
  4355  001C5C                     __ptext35:
  4356                           	callstack 0
  4357  001C5C                     _initAltaveu:
  4358                           	callstack 27
  4359                           
  4360                           ;Altaveu.c: 11:     timerAltaveu = TiGetTimer();
  4361                           
  4362                           ;incstack = 0
  4363  001C5C  EC89  F00C         	call	_TiGetTimer	;wreg free
  4364  001C60  6E1B               	movwf	_timerAltaveu^0,c
  4365  001C62  0012               	return		;funcret
  4366  001C64                     __end_of_initAltaveu:
  4367                           	callstack 0
  4368                           
  4369 ;; *************** function _escriureEEPROM *****************
  4370 ;; Defined at:
  4371 ;;		line 208 in file "Usuaris.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;		None
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;  caca            1    5[COMRAM] unsigned char 
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  1    wreg      void 
  4378 ;; Registers used:
  4379 ;;		wreg, status,2, status,0
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1
  4385 ;;      Params:         0       0       0
  4386 ;;      Locals:         1       0       0
  4387 ;;      Temps:          0       0       0
  4388 ;;      Totals:         1       0       0
  4389 ;;Total ram usage:        1 bytes
  4390 ;; Hardware stack levels used: 1
  4391 ;; Hardware stack levels required when called: 2
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_main
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text36
  4400  001A1E                     __ptext36:
  4401                           	callstack 0
  4402  001A1E                     _escriureEEPROM:
  4403                           	callstack 28
  4404                           
  4405                           ;Usuaris.c: 209:     for(unsigned char caca = 0; caca < 160; caca++){
  4406                           
  4407                           ;incstack = 0
  4408  001A1E  0E00               	movlw	0
  4409  001A20  6E68               	movwf	escriureEEPROM@caca^0,c
  4410  001A22                     l2154:
  4411                           
  4412                           ;Usuaris.c: 210:         EEADR = 0;
  4413  001A22  0E00               	movlw	0
  4414  001A24  6EA9               	movwf	169,c	;volatile
  4415                           
  4416                           ;Usuaris.c: 211:         EEDATA = 0;
  4417  001A26  0E00               	movlw	0
  4418  001A28  6EA8               	movwf	168,c	;volatile
  4419                           
  4420                           ;Usuaris.c: 212:         EECON1bits.EEPGD = 0;
  4421  001A2A  9EA6               	bcf	166,7,c	;volsfr
  4422                           
  4423                           ;Usuaris.c: 213:         EECON1bits.CFGS = 0;
  4424  001A2C  9CA6               	bcf	166,6,c	;volsfr
  4425                           
  4426                           ;Usuaris.c: 214:         EECON1bits.WREN = 1;
  4427  001A2E  84A6               	bsf	166,2,c	;volsfr
  4428                           
  4429                           ;Usuaris.c: 215:         INTCONbits.GIE = 0;
  4430  001A30  9EF2               	bcf	242,7,c	;volatile
  4431                           
  4432                           ;Usuaris.c: 216:         EECON2 = 85;
  4433  001A32  0E55               	movlw	85
  4434  001A34  6EA7               	movwf	167,c	;volsfr
  4435                           
  4436                           ;Usuaris.c: 217:         EECON2 = 170;
  4437  001A36  0EAA               	movlw	170
  4438  001A38  6EA7               	movwf	167,c	;volsfr
  4439                           
  4440                           ;Usuaris.c: 218:          EECON1bits.WR = 1;
  4441  001A3A  82A6               	bsf	166,1,c	;volsfr
  4442  001A3C                     l700:
  4443                           
  4444                           ;Usuaris.c: 219:         while(EECON1bits.WR){
  4445  001A3C  B2A6               	btfsc	166,1,c	;volsfr
  4446  001A3E  D7FE               	goto	l700
  4447                           
  4448                           ;Usuaris.c: 224:     }
  4449  001A40  2A68               	incf	escriureEEPROM@caca^0,f,c
  4450  001A42  0E9F               	movlw	159
  4451  001A44  6468               	cpfsgt	escriureEEPROM@caca^0,c
  4452  001A46  D7ED               	goto	l2154
  4453                           
  4454                           ;Usuaris.c: 225:    INTCONbits.GIE = 1;
  4455  001A48  8EF2               	bsf	242,7,c	;volatile
  4456  001A4A  0012               	return		;funcret
  4457  001A4C                     __end_of_escriureEEPROM:
  4458                           	callstack 0
  4459                           
  4460 ;; *************** function _escriure2usuarisStruct *****************
  4461 ;; Defined at:
  4462 ;;		line 115 in file "Usuaris.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;		None
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      void 
  4469 ;; Registers used:
  4470 ;;		wreg, status,2
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 3F/1
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMRAM   BANK0   BANK1
  4476 ;;      Params:         0       0       0
  4477 ;;      Locals:         0       0       0
  4478 ;;      Temps:          0       0       0
  4479 ;;      Totals:         0       0       0
  4480 ;;Total ram usage:        0 bytes
  4481 ;; Hardware stack levels used: 1
  4482 ;; Hardware stack levels required when called: 2
  4483 ;; This function calls:
  4484 ;;		Nothing
  4485 ;; This function is called by:
  4486 ;;		_main
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           	psect	text37
  4491  001A4C                     __ptext37:
  4492                           	callstack 0
  4493  001A4C                     _escriure2usuarisStruct:
  4494                           	callstack 28
  4495                           
  4496                           ;Usuaris.c: 117:     usuaris[0].username[0] = 1;
  4497                           
  4498                           ;incstack = 0
  4499  001A4C  0E01               	movlw	1
  4500  001A4E  0101               	movlb	1	; () banked
  4501  001A50  6F00               	movwf	_usuaris& (0+255),b
  4502                           
  4503                           ;Usuaris.c: 118:     usuaris[0].password[0] = 1;
  4504  001A52  0E01               	movlw	1
  4505  001A54  6F09               	movwf	(_usuaris+9)& (0+255),b
  4506                           
  4507                           ;Usuaris.c: 119:     usuaris[1].username[0] = '1';
  4508  001A56  0E31               	movlw	49
  4509  001A58  6F17               	movwf	(_usuaris+23)& (0+255),b
  4510                           
  4511                           ;Usuaris.c: 120:     usuaris[1].password[0] = '1';
  4512  001A5A  0E31               	movlw	49
  4513  001A5C  6F20               	movwf	(_usuaris+32)& (0+255),b
  4514                           
  4515                           ;Usuaris.c: 121:     usuaris[0].username[1] = '\0';
  4516  001A5E  0E00               	movlw	0
  4517  001A60  6F01               	movwf	(_usuaris+1)& (0+255),b
  4518                           
  4519                           ;Usuaris.c: 122:     usuaris[0].password[1] = '\0';
  4520  001A62  0E00               	movlw	0
  4521  001A64  6F0A               	movwf	(_usuaris+10)& (0+255),b
  4522                           
  4523                           ;Usuaris.c: 123:     usuaris[1].username[1] = '\0';
  4524  001A66  0E00               	movlw	0
  4525  001A68  6F18               	movwf	(_usuaris+24)& (0+255),b
  4526                           
  4527                           ;Usuaris.c: 124:     usuaris[1].password[1] = '\0';
  4528  001A6A  0E00               	movlw	0
  4529  001A6C  6F21               	movwf	(_usuaris+33)& (0+255),b
  4530                           
  4531                           ;Usuaris.c: 125:     numUsuaris = 2;
  4532  001A6E  0E02               	movlw	2
  4533  001A70  6E22               	movwf	_numUsuaris^0,c
  4534                           
  4535                           ;Usuaris.c: 126:     indexNextUser = 2;
  4536  001A72  0E02               	movlw	2
  4537  001A74  6E21               	movwf	_indexNextUser^0,c
  4538                           
  4539                           ; BSR set to: 1
  4540  001A76  0012               	return		;funcret
  4541  001A78                     __end_of_escriure2usuarisStruct:
  4542                           	callstack 0
  4543                           
  4544 ;; *************** function _UmotorUsers *****************
  4545 ;; Defined at:
  4546 ;;		line 139 in file "Usuaris.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;		None
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;		None
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  1    wreg      void 
  4553 ;; Registers used:
  4554 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/1
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1
  4560 ;;      Params:         0       0       0
  4561 ;;      Locals:         0       0       0
  4562 ;;      Temps:          2       0       0
  4563 ;;      Totals:         2       0       0
  4564 ;;Total ram usage:        2 bytes
  4565 ;; Hardware stack levels used: 1
  4566 ;; Hardware stack levels required when called: 3
  4567 ;; This function calls:
  4568 ;;		_compareStrings
  4569 ;;		_escriureCharEEPROM
  4570 ;; This function is called by:
  4571 ;;		_main
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text38
  4576  000CFE                     __ptext38:
  4577                           	callstack 0
  4578  000CFE                     _UmotorUsers:
  4579                           	callstack 27
  4580                           
  4581                           ;Usuaris.c: 140: static char state = 0;;Usuaris.c: 142:  switch(state) {
  4582                           
  4583                           ; BSR set to: 1
  4584                           ;incstack = 0
  4585  000CFE  D0A7               	goto	l4868
  4586  000D00                     l672:
  4587                           
  4588                           ;Usuaris.c: 144:    if (!do_check_exists && !do_register) {
  4589  000D00  A279               	btfss	(_do_check_exists/(0+8))^0,_do_check_exists& (0+7),c
  4590  000D02  B079               	btfsc	(_do_register/(0+8))^0,_do_register& (0+7),c
  4591  000D04  D005               	goto	l673
  4592                           
  4593                           ;Usuaris.c: 145:     i = 0;
  4594  000D06  0E00               	movlw	0
  4595  000D08  6E1F               	movwf	_i^0,c
  4596                           
  4597                           ;Usuaris.c: 146:     j = 0;
  4598  000D0A  0E00               	movlw	0
  4599  000D0C  6E1E               	movwf	_j^0,c
  4600                           
  4601                           ;Usuaris.c: 147:    }
  4602  000D0E  0012               	return	
  4603  000D10                     l673:
  4604  000D10  A279               	btfss	(_do_check_exists/(0+8))^0,_do_check_exists& (0+7),c
  4605  000D12  D004               	goto	l675
  4606                           
  4607                           ;Usuaris.c: 149:     usuariLoguejat = -1;
  4608  000D14  6855               	setf	_usuariLoguejat^0,c
  4609  000D16                     l4796:
  4610                           
  4611                           ;Usuaris.c: 150:     state = 1;
  4612  000D16  0E01               	movlw	1
  4613  000D18  6E1D               	movwf	UmotorUsers@state^0,c
  4614                           
  4615                           ;Usuaris.c: 151:    }
  4616  000D1A  0012               	return	
  4617  000D1C                     l675:
  4618  000D1C  A079               	btfss	(_do_register/(0+8))^0,_do_register& (0+7),c
  4619  000D1E  0012               	return	
  4620  000D20                     u4280:
  4621                           
  4622                           ;Usuaris.c: 153:     state = 2;
  4623  000D20  0E02               	movlw	2
  4624  000D22  6E1D               	movwf	UmotorUsers@state^0,c
  4625                           
  4626                           ;Usuaris.c: 155:   break;
  4627  000D24  0012               	return	
  4628  000D26                     l4800:
  4629                           
  4630                           ;Usuaris.c: 158:    if (i < numUsuaris) {
  4631  000D26  5022               	movf	_numUsuaris^0,w,c
  4632  000D28  5C1F               	subwf	_i^0,w,c
  4633  000D2A  B0D8               	btfsc	status,0,c
  4634  000D2C  D014               	goto	l4810
  4635                           
  4636                           ;Usuaris.c: 159:     if(compareStrings(tmpUsername, usuaris[i].username) == 0){
  4637  000D2E  0E36               	movlw	low _tmpUsername
  4638  000D30  6E68               	movwf	compareStrings@a^0,c
  4639  000D32  501F               	movf	_i^0,w,c
  4640  000D34  0D17               	mullw	23
  4641  000D36  0E00               	movlw	low _usuaris
  4642  000D38  24F3               	addwf	243,w,c
  4643  000D3A  6E69               	movwf	compareStrings@b^0,c
  4644  000D3C  0E01               	movlw	high _usuaris
  4645  000D3E  20F4               	addwfc	prodh,w,c
  4646  000D40  6E6A               	movwf	(compareStrings@b+1)^0,c
  4647  000D42  EC29  F00C         	call	_compareStrings	;wreg free
  4648  000D46  0900               	iorlw	0
  4649  000D48  A4D8               	btfss	status,2,c
  4650  000D4A  D003               	goto	l4806
  4651                           
  4652                           ;Usuaris.c: 160:      usuariLoguejat = i;
  4653  000D4C  C01F  F055         	movff	_i,_usuariLoguejat
  4654                           
  4655                           ;Usuaris.c: 161:                     LATBbits.LATB3 = 1;
  4656  000D50  868A               	bsf	138,3,c	;volatile
  4657  000D52                     l4806:
  4658                           
  4659                           ;Usuaris.c: 166:     i++;
  4660  000D52  2A1F               	incf	_i^0,f,c
  4661  000D54  D7E0               	goto	l4796
  4662  000D56                     l4810:
  4663  000D56  5022               	movf	_numUsuaris^0,w,c
  4664  000D58  181F               	xorwf	_i^0,w,c
  4665  000D5A  A4D8               	btfss	status,2,c
  4666  000D5C  0012               	return	
  4667                           
  4668                           ;Usuaris.c: 170:     do_check_exists = 0;
  4669  000D5E  9279               	bcf	(_do_check_exists/(0+8))^0,_do_check_exists& (0+7),c
  4670  000D60                     l4814:
  4671                           
  4672                           ;Usuaris.c: 171:     state = 0;
  4673  000D60  0E00               	movlw	0
  4674  000D62  6E1D               	movwf	UmotorUsers@state^0,c
  4675  000D64  0012               	return	
  4676  000D66                     l4816:
  4677                           
  4678                           ;Usuaris.c: 176:    if (i != 8) {
  4679  000D66  0E08               	movlw	8
  4680  000D68  181F               	xorwf	_i^0,w,c
  4681  000D6A  B4D8               	btfsc	status,2,c
  4682  000D6C  D022               	goto	l4828
  4683                           
  4684                           ;Usuaris.c: 177:     escriureCharEEPROM(tmpUsername[i],indexNextUser++);
  4685  000D6E  C021  F068         	movff	_indexNextUser,escriureCharEEPROM@pos
  4686  000D72  501F               	movf	_i^0,w,c
  4687  000D74  0F36               	addlw	low _tmpUsername
  4688  000D76  6ED9               	movwf	fsr2l,c
  4689  000D78  6ADA               	clrf	fsr2h,c
  4690  000D7A  50DF               	movf	indf2,w,c
  4691  000D7C  EC52  F00D         	call	_escriureCharEEPROM
  4692  000D80  2A21               	incf	_indexNextUser^0,f,c
  4693                           
  4694                           ;Usuaris.c: 178:     usuaris[indexNextUserStruct].username[i] = tmpUsername[i];
  4695  000D82  501F               	movf	_i^0,w,c
  4696  000D84  0F36               	addlw	low _tmpUsername
  4697  000D86  6ED9               	movwf	fsr2l,c
  4698  000D88  6ADA               	clrf	fsr2h,c
  4699  000D8A  5020               	movf	_indexNextUserStruct^0,w,c
  4700  000D8C  0D17               	mullw	23
  4701  000D8E  0E00               	movlw	low _usuaris
  4702  000D90  6E6D               	movwf	??_UmotorUsers^0,c
  4703  000D92  0E01               	movlw	high _usuaris
  4704  000D94  6E6E               	movwf	(??_UmotorUsers+1)^0,c
  4705  000D96  50F3               	movf	243,w,c
  4706  000D98  266D               	addwf	??_UmotorUsers^0,f,c
  4707  000D9A  50F4               	movf	244,w,c
  4708  000D9C  226E               	addwfc	(??_UmotorUsers+1)^0,f,c
  4709  000D9E  501F               	movf	_i^0,w,c
  4710  000DA0  246D               	addwf	??_UmotorUsers^0,w,c
  4711  000DA2  6EE1               	movwf	fsr1l,c
  4712  000DA4  0E00               	movlw	0
  4713  000DA6  206E               	addwfc	(??_UmotorUsers+1)^0,w,c
  4714  000DA8  6EE2               	movwf	fsr1h,c
  4715  000DAA  CFDF FFE7          	movff	indf2,indf1
  4716                           
  4717                           ;Usuaris.c: 179:     i++;
  4718  000DAE  2A1F               	incf	_i^0,f,c
  4719  000DB0  D7B7               	goto	u4280
  4720  000DB2                     l4828:
  4721  000DB2  0E08               	movlw	8
  4722  000DB4  181F               	xorwf	_i^0,w,c
  4723  000DB6  A4D8               	btfss	status,2,c
  4724  000DB8  0012               	return	
  4725                           
  4726                           ;Usuaris.c: 183:     i = 0;
  4727  000DBA  0E00               	movlw	0
  4728  000DBC  6E1F               	movwf	_i^0,c
  4729                           
  4730                           ;Usuaris.c: 184:     state = 3;
  4731  000DBE  0E03               	movlw	3
  4732  000DC0  6E1D               	movwf	UmotorUsers@state^0,c
  4733  000DC2  0012               	return	
  4734  000DC4                     l4832:
  4735                           
  4736                           ;Usuaris.c: 188:    if (i != 8) {
  4737  000DC4  0E08               	movlw	8
  4738  000DC6  181F               	xorwf	_i^0,w,c
  4739  000DC8  B4D8               	btfsc	status,2,c
  4740  000DCA  D028               	goto	l4844
  4741                           
  4742                           ;Usuaris.c: 189:     escriureCharEEPROM(tmpPassword[i],indexNextUser++);
  4743  000DCC  C021  F068         	movff	_indexNextUser,escriureCharEEPROM@pos
  4744  000DD0  501F               	movf	_i^0,w,c
  4745  000DD2  0F98               	addlw	low _tmpPassword
  4746  000DD4  6ED9               	movwf	fsr2l,c
  4747  000DD6  6ADA               	clrf	fsr2h,c
  4748  000DD8  50DF               	movf	indf2,w,c
  4749  000DDA  EC52  F00D         	call	_escriureCharEEPROM
  4750  000DDE  2A21               	incf	_indexNextUser^0,f,c
  4751                           
  4752                           ;Usuaris.c: 190:     usuaris[indexNextUserStruct].password[i] = tmpPassword[i];
  4753  000DE0  501F               	movf	_i^0,w,c
  4754  000DE2  0F98               	addlw	low _tmpPassword
  4755  000DE4  6ED9               	movwf	fsr2l,c
  4756  000DE6  6ADA               	clrf	fsr2h,c
  4757  000DE8  5020               	movf	_indexNextUserStruct^0,w,c
  4758  000DEA  0D17               	mullw	23
  4759  000DEC  0E00               	movlw	low _usuaris
  4760  000DEE  6E6D               	movwf	??_UmotorUsers^0,c
  4761  000DF0  0E01               	movlw	high _usuaris
  4762  000DF2  6E6E               	movwf	(??_UmotorUsers+1)^0,c
  4763  000DF4  0E09               	movlw	9
  4764  000DF6  266D               	addwf	??_UmotorUsers^0,f,c
  4765  000DF8  0E00               	movlw	0
  4766  000DFA  226E               	addwfc	(??_UmotorUsers+1)^0,f,c
  4767  000DFC  50F3               	movf	243,w,c
  4768  000DFE  266D               	addwf	??_UmotorUsers^0,f,c
  4769  000E00  50F4               	movf	244,w,c
  4770  000E02  226E               	addwfc	(??_UmotorUsers+1)^0,f,c
  4771  000E04  501F               	movf	_i^0,w,c
  4772  000E06  246D               	addwf	??_UmotorUsers^0,w,c
  4773  000E08  6EE1               	movwf	fsr1l,c
  4774  000E0A  0E00               	movlw	0
  4775  000E0C  206E               	addwfc	(??_UmotorUsers+1)^0,w,c
  4776  000E0E  6EE2               	movwf	fsr1h,c
  4777  000E10  CFDF FFE7          	movff	indf2,indf1
  4778                           
  4779                           ;Usuaris.c: 191:     i++;
  4780  000E14  2A1F               	incf	_i^0,f,c
  4781                           
  4782                           ;Usuaris.c: 192:     state = 3;
  4783  000E16  0E03               	movlw	3
  4784  000E18  6E1D               	movwf	UmotorUsers@state^0,c
  4785                           
  4786                           ;Usuaris.c: 193:    }
  4787  000E1A  0012               	return	
  4788  000E1C                     l4844:
  4789  000E1C  0E08               	movlw	8
  4790  000E1E  181F               	xorwf	_i^0,w,c
  4791  000E20  A4D8               	btfss	status,2,c
  4792  000E22  0012               	return	
  4793                           
  4794                           ;Usuaris.c: 195:     do_register = 0;
  4795  000E24  9079               	bcf	(_do_register/(0+8))^0,_do_register& (0+7),c
  4796                           
  4797                           ;Usuaris.c: 196:     indexNextUser++;
  4798  000E26  2A21               	incf	_indexNextUser^0,f,c
  4799                           
  4800                           ;Usuaris.c: 197:     if(indexNextUser == 159) indexNextUser = 16;
  4801  000E28  0E9F               	movlw	159
  4802  000E2A  1821               	xorwf	_indexNextUser^0,w,c
  4803  000E2C  A4D8               	btfss	status,2,c
  4804  000E2E  D002               	goto	l4854
  4805  000E30  0E10               	movlw	16
  4806  000E32  6E21               	movwf	_indexNextUser^0,c
  4807  000E34                     l4854:
  4808                           
  4809                           ;Usuaris.c: 198:     indexNextUserStruct++;
  4810  000E34  2A20               	incf	_indexNextUserStruct^0,f,c
  4811                           
  4812                           ;Usuaris.c: 199:     if(indexNextUserStruct == 8) indexNextUserStruct = 0;
  4813  000E36  0E08               	movlw	8
  4814  000E38  1820               	xorwf	_indexNextUserStruct^0,w,c
  4815  000E3A  A4D8               	btfss	status,2,c
  4816  000E3C  D002               	goto	l4860
  4817  000E3E  0E00               	movlw	0
  4818  000E40  6E20               	movwf	_indexNextUserStruct^0,c
  4819  000E42                     l4860:
  4820                           
  4821                           ;Usuaris.c: 200:     if(numUsuaris != 8) numUsuaris++;
  4822  000E42  0E08               	movlw	8
  4823  000E44  1822               	xorwf	_numUsuaris^0,w,c
  4824  000E46  B4D8               	btfsc	status,2,c
  4825  000E48  D78B               	goto	l4814
  4826  000E4A  2A22               	incf	_numUsuaris^0,f,c
  4827  000E4C  D789               	goto	l4814
  4828  000E4E                     l4868:
  4829  000E4E  501D               	movf	UmotorUsers@state^0,w,c
  4830  000E50  6E6D               	movwf	??_UmotorUsers^0,c
  4831  000E52  6A6E               	clrf	(??_UmotorUsers+1)^0,c
  4832                           
  4833                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4834                           ; Switch size 1, requested type "simple"
  4835                           ; Number of cases is 1, Range of values is 0 to 0
  4836                           ; switch strategies available:
  4837                           ; Name         Instructions Cycles
  4838                           ; simple_byte            4     3 (average)
  4839                           ;	Chosen strategy is simple_byte
  4840  000E54  506E               	movf	(??_UmotorUsers+1)^0,w,c
  4841  000E56  0A00               	xorlw	0	; case 0
  4842  000E58  A4D8               	btfss	status,2,c
  4843  000E5A  0012               	return	
  4844                           
  4845                           ; Switch size 1, requested type "simple"
  4846                           ; Number of cases is 4, Range of values is 0 to 3
  4847                           ; switch strategies available:
  4848                           ; Name         Instructions Cycles
  4849                           ; simple_byte           13     7 (average)
  4850                           ;	Chosen strategy is simple_byte
  4851  000E5C  506D               	movf	??_UmotorUsers^0,w,c
  4852  000E5E  0A00               	xorlw	0	; case 0
  4853  000E60  B4D8               	btfsc	status,2,c
  4854  000E62  D74E               	goto	l672
  4855  000E64  0A01               	xorlw	1	; case 1
  4856  000E66  B4D8               	btfsc	status,2,c
  4857  000E68  D75E               	goto	l4800
  4858  000E6A  0A03               	xorlw	3	; case 2
  4859  000E6C  B4D8               	btfsc	status,2,c
  4860  000E6E  D77B               	goto	l4816
  4861  000E70  0A01               	xorlw	1	; case 3
  4862  000E72  A4D8               	btfss	status,2,c
  4863  000E74  0012               	return	
  4864  000E76  D7A6               	goto	l4832
  4865  000E78                     __end_of_UmotorUsers:
  4866                           	callstack 0
  4867                           
  4868 ;; *************** function _escriureCharEEPROM *****************
  4869 ;; Defined at:
  4870 ;;		line 57 in file "Usuaris.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;  c               1    wreg     unsigned char 
  4873 ;;  pos             1    5[COMRAM] unsigned char 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  c               1    6[COMRAM] unsigned char 
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  1    wreg      void 
  4878 ;; Registers used:
  4879 ;;		wreg, status,2
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/1
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMRAM   BANK0   BANK1
  4885 ;;      Params:         1       0       0
  4886 ;;      Locals:         1       0       0
  4887 ;;      Temps:          0       0       0
  4888 ;;      Totals:         2       0       0
  4889 ;;Total ram usage:        2 bytes
  4890 ;; Hardware stack levels used: 1
  4891 ;; Hardware stack levels required when called: 2
  4892 ;; This function calls:
  4893 ;;		Nothing
  4894 ;; This function is called by:
  4895 ;;		_UmotorUsers
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text39
  4900  001AA4                     __ptext39:
  4901                           	callstack 0
  4902  001AA4                     _escriureCharEEPROM:
  4903                           	callstack 27
  4904                           
  4905                           ;incstack = 0
  4906                           ;escriureCharEEPROM@c stored from wreg
  4907  001AA4  6E69               	movwf	escriureCharEEPROM@c^0,c
  4908                           
  4909                           ;Usuaris.c: 58:     EEADR = pos;
  4910  001AA6  C068  FFA9         	movff	escriureCharEEPROM@pos,4009	;volatile
  4911                           
  4912                           ;Usuaris.c: 59:     EEDATA = c;
  4913  001AAA  C069  FFA8         	movff	escriureCharEEPROM@c,4008	;volatile
  4914                           
  4915                           ;Usuaris.c: 60:     EECON1bits.EEPGD = 0;
  4916  001AAE  9EA6               	bcf	166,7,c	;volsfr
  4917                           
  4918                           ;Usuaris.c: 61:     EECON1bits.CFGS = 0;
  4919  001AB0  9CA6               	bcf	166,6,c	;volsfr
  4920                           
  4921                           ;Usuaris.c: 62:     EECON1bits.WREN = 1;
  4922  001AB2  84A6               	bsf	166,2,c	;volsfr
  4923                           
  4924                           ;Usuaris.c: 63:     INTCONbits.GIE = 0;
  4925  001AB4  9EF2               	bcf	242,7,c	;volatile
  4926                           
  4927                           ;Usuaris.c: 64:     EECON2 = 85;
  4928  001AB6  0E55               	movlw	85
  4929  001AB8  6EA7               	movwf	167,c	;volsfr
  4930                           
  4931                           ;Usuaris.c: 65:     EECON2 = 170;
  4932  001ABA  0EAA               	movlw	170
  4933  001ABC  6EA7               	movwf	167,c	;volsfr
  4934                           
  4935                           ;Usuaris.c: 66:     EECON1bits.WR = 1;
  4936  001ABE  82A6               	bsf	166,1,c	;volsfr
  4937  001AC0                     l631:
  4938  001AC0  B2A6               	btfsc	166,1,c	;volsfr
  4939  001AC2  D7FE               	goto	l631
  4940                           
  4941                           ;Usuaris.c: 68:     INTCONbits.GIE = 1;
  4942  001AC4  8EF2               	bsf	242,7,c	;volatile
  4943  001AC6  0012               	return		;funcret
  4944  001AC8                     __end_of_escriureCharEEPROM:
  4945                           	callstack 0
  4946                           
  4947 ;; *************** function _compareStrings *****************
  4948 ;; Defined at:
  4949 ;;		line 129 in file "Usuaris.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  a               1    5[COMRAM] PTR const unsigned char 
  4952 ;;		 -> tmpUsername(9), 
  4953 ;;  b               2    6[COMRAM] PTR const unsigned char 
  4954 ;;		 -> usuaris.username(9), usuaris(184), 
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;		None
  4957 ;; Return value:  Size  Location     Type
  4958 ;;                  1    wreg      unsigned char 
  4959 ;; Registers used:
  4960 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/1
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMRAM   BANK0   BANK1
  4966 ;;      Params:         3       0       0
  4967 ;;      Locals:         0       0       0
  4968 ;;      Temps:          2       0       0
  4969 ;;      Totals:         5       0       0
  4970 ;;Total ram usage:        5 bytes
  4971 ;; Hardware stack levels used: 1
  4972 ;; Hardware stack levels required when called: 2
  4973 ;; This function calls:
  4974 ;;		Nothing
  4975 ;; This function is called by:
  4976 ;;		_UmotorUsers
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           	psect	text40
  4981  001852                     __ptext40:
  4982                           	callstack 0
  4983  001852                     _compareStrings:
  4984                           	callstack 27
  4985                           
  4986                           ;Usuaris.c: 130:     while (*a){
  4987                           
  4988                           ;incstack = 0
  4989  001852  D00E               	goto	l3932
  4990  001854                     l3926:
  4991                           
  4992                           ;Usuaris.c: 131:         if (*a != *b)break;
  4993  001854  C069  FFD9         	movff	compareStrings@b,fsr2l
  4994  001858  C06A  FFDA         	movff	compareStrings@b+1,fsr2h
  4995  00185C  5068               	movf	compareStrings@a^0,w,c
  4996  00185E  6EE1               	movwf	fsr1l,c
  4997  001860  6AE2               	clrf	fsr1h,c
  4998  001862  50DE               	movf	postinc2,w,c
  4999  001864  18E6               	xorwf	postinc1,w,c
  5000  001866  A4D8               	btfss	status,2,c
  5001  001868  D009               	goto	u2990
  5002                           
  5003                           ;Usuaris.c: 132:         a++;
  5004  00186A  2A68               	incf	compareStrings@a^0,f,c
  5005                           
  5006                           ;Usuaris.c: 133:         b++;
  5007  00186C  4A69               	infsnz	compareStrings@b^0,f,c
  5008  00186E  2A6A               	incf	(compareStrings@b+1)^0,f,c
  5009  001870                     l3932:
  5010                           
  5011                           ;Usuaris.c: 130:     while (*a){
  5012  001870  5068               	movf	compareStrings@a^0,w,c
  5013  001872  6ED9               	movwf	fsr2l,c
  5014  001874  6ADA               	clrf	fsr2h,c
  5015  001876  50DF               	movf	indf2,w,c
  5016  001878  A4D8               	btfss	status,2,c
  5017  00187A  D7EC               	goto	l3926
  5018  00187C                     u2990:
  5019                           
  5020                           ;Usuaris.c: 135:     return *(const unsigned char*)a - *(const unsigned char*)b;
  5021  00187C  C069  FFD9         	movff	compareStrings@b,fsr2l
  5022  001880  C06A  FFDA         	movff	compareStrings@b+1,fsr2h
  5023  001884  50DF               	movf	indf2,w,c
  5024  001886  6E6B               	movwf	??_compareStrings^0,c
  5025  001888  5068               	movf	compareStrings@a^0,w,c
  5026  00188A  6ED9               	movwf	fsr2l,c
  5027  00188C  6ADA               	clrf	fsr2h,c
  5028  00188E  50DF               	movf	indf2,w,c
  5029  001890  6E6C               	movwf	(??_compareStrings+1)^0,c
  5030  001892  506B               	movf	??_compareStrings^0,w,c
  5031  001894  5C6C               	subwf	(??_compareStrings+1)^0,w,c
  5032  001896  0012               	return		;funcret
  5033  001898                     __end_of_compareStrings:
  5034                           	callstack 0
  5035                           
  5036 ;; *************** function _Uinit *****************
  5037 ;; Defined at:
  5038 ;;		line 70 in file "Usuaris.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;		None
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;  j               1    9[COMRAM] unsigned char 
  5043 ;;  j               1    8[COMRAM] unsigned char 
  5044 ;;  i               1    7[COMRAM] unsigned char 
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  1    wreg      void 
  5047 ;; Registers used:
  5048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMRAM   BANK0   BANK1
  5054 ;;      Params:         0       0       0
  5055 ;;      Locals:         3       0       0
  5056 ;;      Temps:          2       0       0
  5057 ;;      Totals:         5       0       0
  5058 ;;Total ram usage:        5 bytes
  5059 ;; Hardware stack levels used: 1
  5060 ;; Hardware stack levels required when called: 2
  5061 ;; This function calls:
  5062 ;;		Nothing
  5063 ;; This function is called by:
  5064 ;;		_main
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	text41
  5069  001346                     __ptext41:
  5070                           	callstack 0
  5071  001346                     _Uinit:
  5072                           	callstack 28
  5073                           
  5074                           ;Usuaris.c: 75:     EEADR = 0;
  5075                           
  5076                           ;incstack = 0
  5077  001346  0E00               	movlw	0
  5078  001348  6EA9               	movwf	169,c	;volatile
  5079                           
  5080                           ;Usuaris.c: 76:     EECON1bits.EEPGD = 0;
  5081  00134A  9EA6               	bcf	166,7,c	;volsfr
  5082                           
  5083                           ;Usuaris.c: 77:     EECON1bits.CFGS = 0;
  5084  00134C  9CA6               	bcf	166,6,c	;volsfr
  5085                           
  5086                           ;Usuaris.c: 78:     EECON1bits.RD = 1;
  5087  00134E  80A6               	bsf	166,0,c	;volsfr
  5088  001350                     l637:
  5089  001350  B0A6               	btfsc	166,0,c	;volsfr
  5090  001352  D7FE               	goto	l637
  5091                           
  5092                           ;Usuaris.c: 80:     numUsuaris = EEDATA;
  5093  001354  CFA8 F022          	movff	4008,_numUsuaris	;volatile
  5094                           
  5095                           ;Usuaris.c: 83:     EEADR++;
  5096  001358  2AA9               	incf	169,f,c	;volatile
  5097                           
  5098                           ;Usuaris.c: 84:     EECON1bits.EEPGD = 0;
  5099  00135A  9EA6               	bcf	166,7,c	;volsfr
  5100                           
  5101                           ;Usuaris.c: 85:     EECON1bits.CFGS = 0;
  5102  00135C  9CA6               	bcf	166,6,c	;volsfr
  5103  00135E                     l640:
  5104  00135E  B0A6               	btfsc	166,0,c	;volsfr
  5105  001360  D7FE               	goto	l640
  5106                           
  5107                           ;Usuaris.c: 88:     indexNextUser = EEDATA;
  5108  001362  CFA8 F021          	movff	4008,_indexNextUser	;volatile
  5109                           
  5110                           ;Usuaris.c: 90:     EEADR++;
  5111  001366  2AA9               	incf	169,f,c	;volatile
  5112                           
  5113                           ;Usuaris.c: 92:     for(char i = 0; i< numUsuaris; i++){
  5114  001368  0E00               	movlw	0
  5115  00136A  6E6A               	movwf	Uinit@i^0,c
  5116  00136C  D041               	goto	l2402
  5117  00136E                     l2372:
  5118                           
  5119                           ;Usuaris.c: 93:         for(char j = 0; j<9; j++){
  5120  00136E  0E00               	movlw	0
  5121  001370  6E6B               	movwf	Uinit@j^0,c
  5122  001372                     l645:
  5123                           
  5124                           ;Usuaris.c: 94:             EECON1bits.EEPGD = 0;
  5125  001372  9EA6               	bcf	166,7,c	;volsfr
  5126                           
  5127                           ;Usuaris.c: 95:             EECON1bits.CFGS = 0;
  5128  001374  9CA6               	bcf	166,6,c	;volsfr
  5129                           
  5130                           ;Usuaris.c: 96:             EECON1bits.RD = 1;
  5131  001376  80A6               	bsf	166,0,c	;volsfr
  5132  001378                     l647:
  5133  001378  B0A6               	btfsc	166,0,c	;volsfr
  5134  00137A  D7FE               	goto	l647
  5135                           
  5136                           ;Usuaris.c: 98:             usuaris[i].username[j] = EEDATA;
  5137  00137C  506A               	movf	Uinit@i^0,w,c
  5138  00137E  0D17               	mullw	23
  5139  001380  0E00               	movlw	low _usuaris
  5140  001382  6E68               	movwf	??_Uinit^0,c
  5141  001384  0E01               	movlw	high _usuaris
  5142  001386  6E69               	movwf	(??_Uinit+1)^0,c
  5143  001388  50F3               	movf	243,w,c
  5144  00138A  2668               	addwf	??_Uinit^0,f,c
  5145  00138C  50F4               	movf	244,w,c
  5146  00138E  2269               	addwfc	(??_Uinit+1)^0,f,c
  5147  001390  506B               	movf	Uinit@j^0,w,c
  5148  001392  2468               	addwf	??_Uinit^0,w,c
  5149  001394  6ED9               	movwf	fsr2l,c
  5150  001396  0E00               	movlw	0
  5151  001398  2069               	addwfc	(??_Uinit+1)^0,w,c
  5152  00139A  6EDA               	movwf	fsr2h,c
  5153  00139C  CFA8 FFDF          	movff	4008,indf2	;volatile
  5154                           
  5155                           ;Usuaris.c: 99:             EEADR++;
  5156  0013A0  2AA9               	incf	169,f,c	;volatile
  5157                           
  5158                           ;Usuaris.c: 100:         }
  5159  0013A2  2A6B               	incf	Uinit@j^0,f,c
  5160  0013A4  0E08               	movlw	8
  5161  0013A6  646B               	cpfsgt	Uinit@j^0,c
  5162  0013A8  D7E4               	goto	l645
  5163                           
  5164                           ;Usuaris.c: 101:         for(char j = 0; j<9; j++){
  5165  0013AA  0E00               	movlw	0
  5166  0013AC  6E6C               	movwf	Uinit@j_1130^0,c
  5167  0013AE                     l650:
  5168                           
  5169                           ;Usuaris.c: 102:             EECON1bits.EEPGD = 0;
  5170  0013AE  9EA6               	bcf	166,7,c	;volsfr
  5171                           
  5172                           ;Usuaris.c: 103:             EECON1bits.CFGS = 0;
  5173  0013B0  9CA6               	bcf	166,6,c	;volsfr
  5174                           
  5175                           ;Usuaris.c: 104:             EECON1bits.RD = 1;
  5176  0013B2  80A6               	bsf	166,0,c	;volsfr
  5177  0013B4                     l652:
  5178  0013B4  B0A6               	btfsc	166,0,c	;volsfr
  5179  0013B6  D7FE               	goto	l652
  5180                           
  5181                           ;Usuaris.c: 106:             usuaris[i].password[j] = EEDATA;
  5182  0013B8  506A               	movf	Uinit@i^0,w,c
  5183  0013BA  0D17               	mullw	23
  5184  0013BC  0E00               	movlw	low _usuaris
  5185  0013BE  6E68               	movwf	??_Uinit^0,c
  5186  0013C0  0E01               	movlw	high _usuaris
  5187  0013C2  6E69               	movwf	(??_Uinit+1)^0,c
  5188  0013C4  0E09               	movlw	9
  5189  0013C6  2668               	addwf	??_Uinit^0,f,c
  5190  0013C8  0E00               	movlw	0
  5191  0013CA  2269               	addwfc	(??_Uinit+1)^0,f,c
  5192  0013CC  50F3               	movf	243,w,c
  5193  0013CE  2668               	addwf	??_Uinit^0,f,c
  5194  0013D0  50F4               	movf	244,w,c
  5195  0013D2  2269               	addwfc	(??_Uinit+1)^0,f,c
  5196  0013D4  506C               	movf	Uinit@j_1130^0,w,c
  5197  0013D6  2468               	addwf	??_Uinit^0,w,c
  5198  0013D8  6ED9               	movwf	fsr2l,c
  5199  0013DA  0E00               	movlw	0
  5200  0013DC  2069               	addwfc	(??_Uinit+1)^0,w,c
  5201  0013DE  6EDA               	movwf	fsr2h,c
  5202  0013E0  CFA8 FFDF          	movff	4008,indf2	;volatile
  5203                           
  5204                           ;Usuaris.c: 107:             EEADR++;
  5205  0013E4  2AA9               	incf	169,f,c	;volatile
  5206                           
  5207                           ;Usuaris.c: 108:         }
  5208  0013E6  2A6C               	incf	Uinit@j_1130^0,f,c
  5209  0013E8  0E08               	movlw	8
  5210  0013EA  646C               	cpfsgt	Uinit@j_1130^0,c
  5211  0013EC  D7E0               	goto	l650
  5212                           
  5213                           ;Usuaris.c: 109:     }
  5214  0013EE  2A6A               	incf	Uinit@i^0,f,c
  5215  0013F0                     l2402:
  5216  0013F0  5022               	movf	_numUsuaris^0,w,c
  5217  0013F2  5C6A               	subwf	Uinit@i^0,w,c
  5218  0013F4  B0D8               	btfsc	status,0,c
  5219  0013F6  0012               	return	
  5220  0013F8  D7BA               	goto	l2372
  5221  0013FA                     __end_of_Uinit:
  5222                           	callstack 0
  5223                           
  5224 ;; *************** function _TiInitTimer *****************
  5225 ;; Defined at:
  5226 ;;		line 18 in file "TiTTimer.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;		None
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;		None
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  1    wreg      void 
  5233 ;; Registers used:
  5234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1
  5240 ;;      Params:         0       0       0
  5241 ;;      Locals:         0       0       0
  5242 ;;      Temps:          0       0       0
  5243 ;;      Totals:         0       0       0
  5244 ;;Total ram usage:        0 bytes
  5245 ;; Hardware stack levels used: 1
  5246 ;; Hardware stack levels required when called: 2
  5247 ;; This function calls:
  5248 ;;		Nothing
  5249 ;; This function is called by:
  5250 ;;		_main
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           	psect	text42
  5255  00194C                     __ptext42:
  5256                           	callstack 0
  5257  00194C                     _TiInitTimer:
  5258                           	callstack 28
  5259                           
  5260                           ;TiTTimer.c: 20:     RCONbits.IPEN = 0;
  5261                           
  5262                           ;incstack = 0
  5263  00194C  9ED0               	bcf	208,7,c	;volatile
  5264                           
  5265                           ;TiTTimer.c: 21:     INTCONbits.GIE_GIEH = 1;
  5266  00194E  8EF2               	bsf	242,7,c	;volatile
  5267                           
  5268                           ;TiTTimer.c: 22:     INTCONbits.PEIE_GIEL = 1;
  5269  001950  8CF2               	bsf	242,6,c	;volatile
  5270                           
  5271                           ;TiTTimer.c: 23:     INTCONbits.TMR0IE = 1;
  5272  001952  8AF2               	bsf	242,5,c	;volatile
  5273                           
  5274                           ;TiTTimer.c: 24:     INTCONbits.TMR0IF = 0;
  5275  001954  94F2               	bcf	242,2,c	;volatile
  5276                           
  5277                           ;TiTTimer.c: 25:     T0CON = 136;
  5278  001956  0E88               	movlw	136
  5279  001958  6ED5               	movwf	213,c	;volatile
  5280                           
  5281                           ;TiTTimer.c: 27:     TMR0H = 223;
  5282  00195A  0EDF               	movlw	223
  5283  00195C  6ED7               	movwf	215,c	;volatile
  5284                           
  5285                           ;TiTTimer.c: 28:     TMR0L = 148;
  5286  00195E  0E94               	movlw	148
  5287  001960  6ED6               	movwf	214,c	;volatile
  5288                           
  5289                           ;TiTTimer.c: 29:     T0CONbits.TMR0ON = 1;
  5290  001962  8ED5               	bsf	213,7,c	;volatile
  5291                           
  5292                           ;TiTTimer.c: 31:     for (counter=0;counter<8;counter++) {
  5293  001964  0E00               	movlw	0
  5294  001966  6E29               	movwf	_counter^0,c
  5295  001968                     l4036:
  5296  001968  0E07               	movlw	7
  5297  00196A  6429               	cpfsgt	_counter^0,c
  5298  00196C  D001               	goto	l4040
  5299  00196E  0012               	return	
  5300  001970                     l4040:
  5301                           
  5302                           ;TiTTimer.c: 32:  s_Timers[counter].b_busy=0;
  5303  001970  5029               	movf	_counter^0,w,c
  5304  001972  0D03               	mullw	3
  5305  001974  50F3               	movf	243,w,c
  5306  001976  0F82               	addlw	low (_s_Timers+2)
  5307  001978  6ED9               	movwf	fsr2l,c
  5308  00197A  6ADA               	clrf	fsr2h,c
  5309  00197C  0E00               	movlw	0
  5310  00197E  6EDF               	movwf	indf2,c
  5311                           
  5312                           ;TiTTimer.c: 33:     }
  5313  001980  2A29               	incf	_counter^0,f,c
  5314  001982  D7F2               	goto	l4036
  5315  001984                     __end_of_TiInitTimer:
  5316                           	callstack 0
  5317                           
  5318 ;; *************** function _TeTeclat *****************
  5319 ;; Defined at:
  5320 ;;		line 22 in file "TeTeclat.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;		None
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;		None
  5325 ;; Return value:  Size  Location     Type
  5326 ;;                  1    wreg      void 
  5327 ;; Registers used:
  5328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/1
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMRAM   BANK0   BANK1
  5334 ;;      Params:         0       0       0
  5335 ;;      Locals:         0       0       0
  5336 ;;      Temps:          3       0       0
  5337 ;;      Totals:         3       0       0
  5338 ;;Total ram usage:        3 bytes
  5339 ;; Hardware stack levels used: 1
  5340 ;; Hardware stack levels required when called: 3
  5341 ;; This function calls:
  5342 ;;		_MsetNovaTecla
  5343 ;;		_SsetNovaTecla
  5344 ;;		_TiGetTics
  5345 ;;		_TiResetTics
  5346 ;; This function is called by:
  5347 ;;		_main
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text43
  5352  000E78                     __ptext43:
  5353                           	callstack 0
  5354  000E78                     _TeTeclat:
  5355                           	callstack 27
  5356                           
  5357                           ;TeTeclat.c: 23:  static char state = 0;;TeTeclat.c: 24:     static char cols=0;;TeTecla
      +                          t.c: 25:     static char files = 0;;TeTeclat.c: 26:     files = PORTDbits.RD0 + PORTDbit
      +                          s.RD1*2 + PORTDbits.RD2*3 + PORTDbits.RD3*4;
  5358                           
  5359                           ;incstack = 0
  5360  000E78  A083               	btfss	131,0,c	;volatile
  5361  000E7A  D003               	goto	u4780
  5362  000E7C  6A6F               	clrf	??_TeTeclat^0,c
  5363  000E7E  2A6F               	incf	??_TeTeclat^0,f,c
  5364  000E80  D001               	goto	u4788
  5365  000E82                     u4780:
  5366  000E82  6A6F               	clrf	??_TeTeclat^0,c
  5367  000E84                     u4788:
  5368  000E84  A283               	btfss	131,1,c	;volatile
  5369  000E86  D002               	goto	u4790
  5370  000E88  0E01               	movlw	1
  5371  000E8A  D001               	goto	u4796
  5372  000E8C                     u4790:
  5373  000E8C  0E00               	movlw	0
  5374  000E8E                     u4796:
  5375  000E8E  0D02               	mullw	2
  5376  000E90  CFF3 F070          	movff	prodl,??_TeTeclat+1
  5377  000E94  A483               	btfss	131,2,c	;volatile
  5378  000E96  D002               	goto	u4800
  5379  000E98  0E01               	movlw	1
  5380  000E9A  D001               	goto	u4806
  5381  000E9C                     u4800:
  5382  000E9C  0E00               	movlw	0
  5383  000E9E                     u4806:
  5384  000E9E  0D03               	mullw	3
  5385  000EA0  CFF3 F071          	movff	prodl,??_TeTeclat+2
  5386  000EA4  A683               	btfss	131,3,c	;volatile
  5387  000EA6  D002               	goto	u4810
  5388  000EA8  0E01               	movlw	1
  5389  000EAA  D001               	goto	u4816
  5390  000EAC                     u4810:
  5391  000EAC  0E00               	movlw	0
  5392  000EAE                     u4816:
  5393  000EAE  0D04               	mullw	4
  5394  000EB0  50F3               	movf	243,w,c
  5395  000EB2  2471               	addwf	(??_TeTeclat+2)^0,w,c
  5396  000EB4  2470               	addwf	(??_TeTeclat+1)^0,w,c
  5397  000EB6  246F               	addwf	??_TeTeclat^0,w,c
  5398  000EB8  6E2A               	movwf	TeTeclat@files^0,c
  5399                           
  5400                           ;TeTeclat.c: 27:  switch(state) {
  5401  000EBA  D06F               	goto	l5144
  5402  000EBC                     l5070:
  5403                           
  5404                           ;TeTeclat.c: 29:    if (files==0) {
  5405  000EBC  502A               	movf	TeTeclat@files^0,w,c
  5406  000EBE  A4D8               	btfss	status,2,c
  5407  000EC0  D007               	goto	l5078
  5408                           
  5409                           ;TeTeclat.c: 30:     LATDbits.LD4=1;
  5410  000EC2  888C               	bsf	140,4,c	;volatile
  5411                           
  5412                           ;TeTeclat.c: 31:     LATDbits.LD5=0;
  5413  000EC4  9A8C               	bcf	140,5,c	;volatile
  5414                           
  5415                           ;TeTeclat.c: 32:     LATDbits.LD6=0;
  5416  000EC6  9C8C               	bcf	140,6,c	;volatile
  5417                           
  5418                           ;TeTeclat.c: 33:     cols=0;
  5419  000EC8  0E00               	movlw	0
  5420  000ECA  6E2B               	movwf	TeTeclat@cols^0,c
  5421  000ECC                     l5076:
  5422                           
  5423                           ;TeTeclat.c: 34:     state++;
  5424  000ECC  2A2C               	incf	TeTeclat@state^0,f,c
  5425                           
  5426                           ;TeTeclat.c: 35:    }
  5427  000ECE  0012               	return	
  5428  000ED0                     l5078:
  5429  000ED0  502A               	movf	TeTeclat@files^0,w,c
  5430  000ED2  B4D8               	btfsc	status,2,c
  5431  000ED4  0012               	return	
  5432                           
  5433                           ;TeTeclat.c: 37:     TiResetTics(tiTeclat);
  5434  000ED6  502D               	movf	_tiTeclat^0,w,c
  5435  000ED8  ECB8  F00D         	call	_TiResetTics
  5436  000EDC                     l5082:
  5437                           
  5438                           ;TeTeclat.c: 38:     state = 3;
  5439  000EDC  0E03               	movlw	3
  5440  000EDE  6E2C               	movwf	TeTeclat@state^0,c
  5441  000EE0  0012               	return	
  5442  000EE2                     l5084:
  5443                           
  5444                           ;TeTeclat.c: 42:    if (files==0) {
  5445  000EE2  502A               	movf	TeTeclat@files^0,w,c
  5446  000EE4  A4D8               	btfss	status,2,c
  5447  000EE6  D005               	goto	l5092
  5448                           
  5449                           ;TeTeclat.c: 43:     LATDbits.LD4=0;
  5450  000EE8  988C               	bcf	140,4,c	;volatile
  5451                           
  5452                           ;TeTeclat.c: 44:     LATDbits.LD5=1;
  5453  000EEA  8A8C               	bsf	140,5,c	;volatile
  5454                           
  5455                           ;TeTeclat.c: 45:     LATDbits.LD6=0;
  5456  000EEC  9C8C               	bcf	140,6,c	;volatile
  5457                           
  5458                           ;TeTeclat.c: 46:     cols=1;
  5459  000EEE  0E01               	movlw	1
  5460  000EF0  D7EC               	goto	L2
  5461  000EF2                     l5092:
  5462  000EF2  502A               	movf	TeTeclat@files^0,w,c
  5463  000EF4  B4D8               	btfsc	status,2,c
  5464  000EF6  0012               	return	
  5465                           
  5466                           ;TeTeclat.c: 50:     TiResetTics(tiTeclat);
  5467  000EF8  502D               	movf	_tiTeclat^0,w,c
  5468  000EFA  ECB8  F00D         	call	_TiResetTics
  5469  000EFE  D7EE               	goto	l5082
  5470  000F00                     l5098:
  5471                           
  5472                           ;TeTeclat.c: 55:    if (files==0) {
  5473  000F00  502A               	movf	TeTeclat@files^0,w,c
  5474  000F02  A4D8               	btfss	status,2,c
  5475  000F04  D008               	goto	l5104
  5476                           
  5477                           ;TeTeclat.c: 56:     LATDbits.LD4=0;
  5478  000F06  988C               	bcf	140,4,c	;volatile
  5479                           
  5480                           ;TeTeclat.c: 57:     LATDbits.LD5=0;
  5481  000F08  9A8C               	bcf	140,5,c	;volatile
  5482                           
  5483                           ;TeTeclat.c: 58:     LATDbits.LD6=1;
  5484  000F0A  8C8C               	bsf	140,6,c	;volatile
  5485                           
  5486                           ;TeTeclat.c: 59:     cols=2;
  5487  000F0C  0E02               	movlw	2
  5488  000F0E  6E2B               	movwf	TeTeclat@cols^0,c
  5489                           
  5490                           ;TeTeclat.c: 60:     state = 0;
  5491  000F10  0E00               	movlw	0
  5492  000F12  6E2C               	movwf	TeTeclat@state^0,c
  5493                           
  5494                           ;TeTeclat.c: 61:    }
  5495  000F14  0012               	return	
  5496  000F16                     l5104:
  5497  000F16  502A               	movf	TeTeclat@files^0,w,c
  5498  000F18  B4D8               	btfsc	status,2,c
  5499  000F1A  0012               	return	
  5500                           
  5501                           ;TeTeclat.c: 63:     TiResetTics(tiTeclat);
  5502  000F1C  502D               	movf	_tiTeclat^0,w,c
  5503  000F1E  ECB8  F00D         	call	_TiResetTics
  5504  000F22  D7D4               	goto	l5076
  5505  000F24                     l5110:
  5506                           
  5507                           ;TeTeclat.c: 68:    if (TiGetTics(tiTeclat)>=0) {
  5508  000F24  502D               	movf	_tiTeclat^0,w,c
  5509  000F26  EC3C  F00D         	call	_TiGetTics
  5510  000F2A  BE69               	btfsc	(?_TiGetTics+1)^0,7,c
  5511  000F2C  0012               	return	
  5512  000F2E  D7CE               	goto	l5076
  5513  000F30                     l5114:
  5514                           
  5515                           ;TeTeclat.c: 73:    if (files==0) {
  5516  000F30  502A               	movf	TeTeclat@files^0,w,c
  5517  000F32  A4D8               	btfss	status,2,c
  5518  000F34  D003               	goto	l5118
  5519                           
  5520                           ;TeTeclat.c: 74:     state = 1;
  5521  000F36  0E01               	movlw	1
  5522  000F38  6E2C               	movwf	TeTeclat@state^0,c
  5523                           
  5524                           ;TeTeclat.c: 75:    }
  5525  000F3A  0012               	return	
  5526  000F3C                     l5118:
  5527  000F3C  502A               	movf	TeTeclat@files^0,w,c
  5528  000F3E  B4D8               	btfsc	status,2,c
  5529  000F40  0012               	return	
  5530                           
  5531                           ;TeTeclat.c: 77:                 MsetNovaTecla(teclaPremuda[files-1][cols]);
  5532  000F42  502A               	movf	TeTeclat@files^0,w,c
  5533  000F44  0D03               	mullw	3
  5534  000F46  50F3               	movf	243,w,c
  5535  000F48  0F9E               	addlw	low (_teclaPremuda+253)
  5536  000F4A  242B               	addwf	TeTeclat@cols^0,w,c
  5537  000F4C  6ED9               	movwf	fsr2l,c
  5538  000F4E  6ADA               	clrf	fsr2h,c
  5539  000F50  50DF               	movf	indf2,w,c
  5540  000F52  EC36  F00E         	call	_MsetNovaTecla
  5541                           
  5542                           ;TeTeclat.c: 78:                 SsetNovaTecla(teclaPremuda[files-1][cols]);
  5543  000F56  502A               	movf	TeTeclat@files^0,w,c
  5544  000F58  0D03               	mullw	3
  5545  000F5A  50F3               	movf	243,w,c
  5546  000F5C  0F9E               	addlw	low (_teclaPremuda+253)
  5547  000F5E  242B               	addwf	TeTeclat@cols^0,w,c
  5548  000F60  6ED9               	movwf	fsr2l,c
  5549  000F62  6ADA               	clrf	fsr2h,c
  5550  000F64  50DF               	movf	indf2,w,c
  5551  000F66  EC32  F00E         	call	_SsetNovaTecla
  5552  000F6A  D7B0               	goto	l5076
  5553  000F6C                     l5124:
  5554                           
  5555                           ;TeTeclat.c: 84:    if (files==0) {
  5556  000F6C  502A               	movf	TeTeclat@files^0,w,c
  5557  000F6E  A4D8               	btfss	status,2,c
  5558  000F70  0012               	return	
  5559                           
  5560                           ;TeTeclat.c: 85:     TiResetTics(tiTeclat);
  5561  000F72  502D               	movf	_tiTeclat^0,w,c
  5562  000F74  ECB8  F00D         	call	_TiResetTics
  5563  000F78  D7A9               	goto	l5076
  5564  000F7A                     l5130:
  5565                           
  5566                           ;TeTeclat.c: 90:    if (TiGetTics(tiTeclat)>=0) {
  5567  000F7A  502D               	movf	_tiTeclat^0,w,c
  5568  000F7C  EC3C  F00D         	call	_TiGetTics
  5569  000F80  D7D4               	goto	L3
  5570  000F82                     l5134:
  5571                           
  5572                           ;TeTeclat.c: 95:    if (files!=0) {
  5573  000F82  502A               	movf	TeTeclat@files^0,w,c
  5574  000F84  B4D8               	btfsc	status,2,c
  5575  000F86  D003               	goto	l5138
  5576                           
  5577                           ;TeTeclat.c: 96:     state = 5;
  5578  000F88  0E05               	movlw	5
  5579  000F8A  6E2C               	movwf	TeTeclat@state^0,c
  5580                           
  5581                           ;TeTeclat.c: 97:    }
  5582  000F8C  0012               	return	
  5583  000F8E                     l5138:
  5584  000F8E  502A               	movf	TeTeclat@files^0,w,c
  5585  000F90  A4D8               	btfss	status,2,c
  5586  000F92  0012               	return	
  5587                           
  5588                           ;TeTeclat.c: 99:     state = 0;
  5589  000F94  0E00               	movlw	0
  5590  000F96  6E2C               	movwf	TeTeclat@state^0,c
  5591  000F98  0012               	return	
  5592  000F9A                     l5144:
  5593  000F9A  502C               	movf	TeTeclat@state^0,w,c
  5594  000F9C  6E6F               	movwf	??_TeTeclat^0,c
  5595  000F9E  6A70               	clrf	(??_TeTeclat+1)^0,c
  5596                           
  5597                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5598                           ; Switch size 1, requested type "simple"
  5599                           ; Number of cases is 1, Range of values is 0 to 0
  5600                           ; switch strategies available:
  5601                           ; Name         Instructions Cycles
  5602                           ; simple_byte            4     3 (average)
  5603                           ;	Chosen strategy is simple_byte
  5604  000FA0  5070               	movf	(??_TeTeclat+1)^0,w,c
  5605  000FA2  0A00               	xorlw	0	; case 0
  5606  000FA4  A4D8               	btfss	status,2,c
  5607  000FA6  0012               	return	
  5608                           
  5609                           ; Switch size 1, requested type "simple"
  5610                           ; Number of cases is 8, Range of values is 0 to 7
  5611                           ; switch strategies available:
  5612                           ; Name         Instructions Cycles
  5613                           ; simple_byte           25    13 (average)
  5614                           ;	Chosen strategy is simple_byte
  5615  000FA8  506F               	movf	??_TeTeclat^0,w,c
  5616  000FAA  0A00               	xorlw	0	; case 0
  5617  000FAC  B4D8               	btfsc	status,2,c
  5618  000FAE  D786               	goto	l5070
  5619  000FB0  0A01               	xorlw	1	; case 1
  5620  000FB2  B4D8               	btfsc	status,2,c
  5621  000FB4  D796               	goto	l5084
  5622  000FB6  0A03               	xorlw	3	; case 2
  5623  000FB8  B4D8               	btfsc	status,2,c
  5624  000FBA  D7A2               	goto	l5098
  5625  000FBC  0A01               	xorlw	1	; case 3
  5626  000FBE  B4D8               	btfsc	status,2,c
  5627  000FC0  D7B1               	goto	l5110
  5628  000FC2  0A07               	xorlw	7	; case 4
  5629  000FC4  B4D8               	btfsc	status,2,c
  5630  000FC6  D7B4               	goto	l5114
  5631  000FC8  0A01               	xorlw	1	; case 5
  5632  000FCA  B4D8               	btfsc	status,2,c
  5633  000FCC  D7CF               	goto	l5124
  5634  000FCE  0A03               	xorlw	3	; case 6
  5635  000FD0  B4D8               	btfsc	status,2,c
  5636  000FD2  D7D3               	goto	l5130
  5637  000FD4  0A01               	xorlw	1	; case 7
  5638  000FD6  A4D8               	btfss	status,2,c
  5639  000FD8  0012               	return	
  5640  000FDA  D7D3               	goto	l5134
  5641  000FDC                     __end_of_TeTeclat:
  5642                           	callstack 0
  5643                           
  5644 ;; *************** function _SsetNovaTecla *****************
  5645 ;; Defined at:
  5646 ;;		line 126 in file "Ssms.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;  tecla           1    wreg     unsigned char 
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  tecla           1    5[COMRAM] unsigned char 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  1    wreg      void 
  5653 ;; Registers used:
  5654 ;;		wreg
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/1
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMRAM   BANK0   BANK1
  5660 ;;      Params:         0       0       0
  5661 ;;      Locals:         1       0       0
  5662 ;;      Temps:          0       0       0
  5663 ;;      Totals:         1       0       0
  5664 ;;Total ram usage:        1 bytes
  5665 ;; Hardware stack levels used: 1
  5666 ;; Hardware stack levels required when called: 2
  5667 ;; This function calls:
  5668 ;;		Nothing
  5669 ;; This function is called by:
  5670 ;;		_TeTeclat
  5671 ;; This function uses a non-reentrant model
  5672 ;;
  5673                           
  5674                           	psect	text44
  5675  001C64                     __ptext44:
  5676                           	callstack 0
  5677  001C64                     _SsetNovaTecla:
  5678                           	callstack 27
  5679                           
  5680                           ;incstack = 0
  5681                           ;SsetNovaTecla@tecla stored from wreg
  5682  001C64  6E68               	movwf	SsetNovaTecla@tecla^0,c
  5683                           
  5684                           ;Ssms.c: 127:     novaTecla = tecla;
  5685  001C66  C068  F05B         	movff	SsetNovaTecla@tecla,_novaTecla
  5686  001C6A  0012               	return		;funcret
  5687  001C6C                     __end_of_SsetNovaTecla:
  5688                           	callstack 0
  5689                           
  5690 ;; *************** function _MsetNovaTecla *****************
  5691 ;; Defined at:
  5692 ;;		line 28 in file "Menu.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  tecla           1    wreg     unsigned char 
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  tecla           1    5[COMRAM] unsigned char 
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      void 
  5699 ;; Registers used:
  5700 ;;		wreg
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/1
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMRAM   BANK0   BANK1
  5706 ;;      Params:         0       0       0
  5707 ;;      Locals:         1       0       0
  5708 ;;      Temps:          0       0       0
  5709 ;;      Totals:         1       0       0
  5710 ;;Total ram usage:        1 bytes
  5711 ;; Hardware stack levels used: 1
  5712 ;; Hardware stack levels required when called: 2
  5713 ;; This function calls:
  5714 ;;		Nothing
  5715 ;; This function is called by:
  5716 ;;		_TeTeclat
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text45
  5721  001C6C                     __ptext45:
  5722                           	callstack 0
  5723  001C6C                     _MsetNovaTecla:
  5724                           	callstack 27
  5725                           
  5726                           ;incstack = 0
  5727                           ;MsetNovaTecla@tecla stored from wreg
  5728  001C6C  6E68               	movwf	MsetNovaTecla@tecla^0,c
  5729                           
  5730                           ;Menu.c: 29:     NovaTecla = tecla;
  5731  001C6E  C068  F058         	movff	MsetNovaTecla@tecla,_NovaTecla
  5732  001C72  0012               	return		;funcret
  5733  001C74                     __end_of_MsetNovaTecla:
  5734                           	callstack 0
  5735                           
  5736 ;; *************** function _TeInit *****************
  5737 ;; Defined at:
  5738 ;;		line 18 in file "TeTeclat.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;		None
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;		None
  5743 ;; Return value:  Size  Location     Type
  5744 ;;                  1    wreg      void 
  5745 ;; Registers used:
  5746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMRAM   BANK0   BANK1
  5752 ;;      Params:         0       0       0
  5753 ;;      Locals:         0       0       0
  5754 ;;      Temps:          0       0       0
  5755 ;;      Totals:         0       0       0
  5756 ;;Total ram usage:        0 bytes
  5757 ;; Hardware stack levels used: 1
  5758 ;; Hardware stack levels required when called: 3
  5759 ;; This function calls:
  5760 ;;		_TiGetTimer
  5761 ;; This function is called by:
  5762 ;;		_main
  5763 ;; This function uses a non-reentrant model
  5764 ;;
  5765                           
  5766                           	psect	text46
  5767  001C74                     __ptext46:
  5768                           	callstack 0
  5769  001C74                     _TeInit:
  5770                           	callstack 27
  5771                           
  5772                           ;TeTeclat.c: 19:     tiTeclat=TiGetTimer();
  5773                           
  5774                           ;incstack = 0
  5775  001C74  EC89  F00C         	call	_TiGetTimer	;wreg free
  5776  001C78  6E2D               	movwf	_tiTeclat^0,c
  5777  001C7A  0012               	return		;funcret
  5778  001C7C                     __end_of_TeInit:
  5779                           	callstack 0
  5780                           
  5781 ;; *************** function _Sinit *****************
  5782 ;; Defined at:
  5783 ;;		line 18 in file "Ssms.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;		None
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;		None
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      void 
  5790 ;; Registers used:
  5791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMRAM   BANK0   BANK1
  5797 ;;      Params:         0       0       0
  5798 ;;      Locals:         0       0       0
  5799 ;;      Temps:          0       0       0
  5800 ;;      Totals:         0       0       0
  5801 ;;Total ram usage:        0 bytes
  5802 ;; Hardware stack levels used: 1
  5803 ;; Hardware stack levels required when called: 3
  5804 ;; This function calls:
  5805 ;;		_TiGetTimer
  5806 ;; This function is called by:
  5807 ;;		_main
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           	psect	text47
  5812  001C7C                     __ptext47:
  5813                           	callstack 0
  5814  001C7C                     _Sinit:
  5815                           	callstack 27
  5816                           
  5817                           ;Ssms.c: 19:     timerSMS = TiGetTimer();
  5818                           
  5819                           ;incstack = 0
  5820  001C7C  EC89  F00C         	call	_TiGetTimer	;wreg free
  5821  001C80  6E5A               	movwf	_timerSMS^0,c
  5822  001C82  0012               	return		;funcret
  5823  001C84                     __end_of_Sinit:
  5824                           	callstack 0
  5825                           
  5826 ;; *************** function _SMotor *****************
  5827 ;; Defined at:
  5828 ;;		line 22 in file "Ssms.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;		None
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;		None
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  1    wreg      void 
  5835 ;; Registers used:
  5836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1
  5842 ;;      Params:         0       0       0
  5843 ;;      Locals:         0       0       0
  5844 ;;      Temps:          2       0       0
  5845 ;;      Totals:         2       0       0
  5846 ;;Total ram usage:        2 bytes
  5847 ;; Hardware stack levels used: 1
  5848 ;; Hardware stack levels required when called: 3
  5849 ;; This function calls:
  5850 ;;		_MNovaLletra
  5851 ;;		_TiGetTics
  5852 ;;		_TiResetTics
  5853 ;; This function is called by:
  5854 ;;		_main
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           	psect	text48
  5859  000B02                     __ptext48:
  5860                           	callstack 0
  5861  000B02                     _SMotor:
  5862                           	callstack 27
  5863                           
  5864                           ;Ssms.c: 23:  static char state = 0;;Ssms.c: 25:  switch(state) {
  5865                           
  5866                           ;incstack = 0
  5867  000B02  D0DF               	goto	l4208
  5868  000B04                     l4052:
  5869                           
  5870                           ;Ssms.c: 27:    if (novaTecla != -1 && setSMSon == 1) {
  5871  000B04  285B               	incf	_novaTecla^0,w,c
  5872  000B06  A4D8               	btfss	status,2,c
  5873  000B08  A679               	btfss	(_setSMSon/(0+8))^0,_setSMSon& (0+7),c
  5874  000B0A  D006               	goto	l4060
  5875                           
  5876                           ;Ssms.c: 28:     TiResetTics(timerSMS);
  5877  000B0C  505A               	movf	_timerSMS^0,w,c
  5878  000B0E  ECB8  F00D         	call	_TiResetTics
  5879                           
  5880                           ;Ssms.c: 29:     state = 3;
  5881  000B12  0E03               	movlw	3
  5882  000B14  6E2E               	movwf	SMotor@state^0,c
  5883                           
  5884                           ;Ssms.c: 30:    }
  5885  000B16  0012               	return	
  5886  000B18                     l4060:
  5887  000B18  285B               	incf	_novaTecla^0,w,c
  5888  000B1A  A4D8               	btfss	status,2,c
  5889  000B1C  0012               	return	
  5890  000B1E  505A               	movf	_timerSMS^0,w,c
  5891  000B20  EC3C  F00D         	call	_TiGetTics
  5892  000B24  BE69               	btfsc	(?_TiGetTics+1)^0,7,c
  5893  000B26  0012               	return	
  5894  000B28  0E5A               	movlw	90
  5895  000B2A  5C68               	subwf	?_TiGetTics^0,w,c
  5896  000B2C  0E02               	movlw	2
  5897  000B2E  5869               	subwfb	(?_TiGetTics+1)^0,w,c
  5898  000B30  A0D8               	btfss	status,0,c
  5899  000B32  0012               	return	
  5900  000B34  285C               	incf	_lletraASCII^0,w,c
  5901  000B36  B4D8               	btfsc	status,2,c
  5902  000B38  0012               	return	
  5903  000B3A  A679               	btfss	(_setSMSon/(0+8))^0,_setSMSon& (0+7),c
  5904  000B3C  0012               	return	
  5905                           
  5906                           ;Ssms.c: 32:     MNovaLletra(lletraASCII);
  5907  000B3E  505C               	movf	_lletraASCII^0,w,c
  5908  000B40  EC42  F00E         	call	_MNovaLletra
  5909                           
  5910                           ;Ssms.c: 33:     lletraASCII = -1;
  5911  000B44  685C               	setf	_lletraASCII^0,c
  5912                           
  5913                           ;Ssms.c: 34:     ultimaTecla = -1;
  5914  000B46  6859               	setf	_ultimaTecla^0,c
  5915                           
  5916                           ;Ssms.c: 35:     zeroTecla = 0;
  5917  000B48  0E00               	movlw	0
  5918  000B4A  6E2F               	movwf	_zeroTecla^0,c
  5919  000B4C                     l4076:
  5920                           
  5921                           ;Ssms.c: 36:     state = 0;
  5922  000B4C  0E00               	movlw	0
  5923  000B4E  6E2E               	movwf	SMotor@state^0,c
  5924  000B50  0012               	return	
  5925  000B52                     l4078:
  5926                           
  5927                           ;Ssms.c: 40:    if (novaTecla == ultimaTecla && TiGetTics(timerSMS) < 602) {
  5928  000B52  5059               	movf	_ultimaTecla^0,w,c
  5929  000B54  185B               	xorwf	_novaTecla^0,w,c
  5930  000B56  A4D8               	btfss	status,2,c
  5931  000B58  D011               	goto	l4088
  5932  000B5A  505A               	movf	_timerSMS^0,w,c
  5933  000B5C  EC3C  F00D         	call	_TiGetTics
  5934  000B60  BE69               	btfsc	(?_TiGetTics+1)^0,7,c
  5935  000B62  D006               	goto	u3160
  5936  000B64  0E5A               	movlw	90
  5937  000B66  5C68               	subwf	?_TiGetTics^0,w,c
  5938  000B68  0E02               	movlw	2
  5939  000B6A  5869               	subwfb	(?_TiGetTics+1)^0,w,c
  5940  000B6C  B0D8               	btfsc	status,0,c
  5941  000B6E  D006               	goto	l4088
  5942  000B70                     u3160:
  5943                           
  5944                           ;Ssms.c: 41:     novaTecla = -1;
  5945  000B70  685B               	setf	_novaTecla^0,c
  5946                           
  5947                           ;Ssms.c: 42:     sumaPulsacions++;
  5948  000B72  2A30               	incf	_sumaPulsacions^0,f,c
  5949                           
  5950                           ;Ssms.c: 43:     lletraASCII++;
  5951  000B74  2A5C               	incf	_lletraASCII^0,f,c
  5952                           
  5953                           ;Ssms.c: 44:     state = 2;
  5954  000B76  0E02               	movlw	2
  5955  000B78  6E2E               	movwf	SMotor@state^0,c
  5956                           
  5957                           ;Ssms.c: 45:    }
  5958  000B7A  0012               	return	
  5959  000B7C                     l4088:
  5960  000B7C  285B               	incf	_novaTecla^0,w,c
  5961  000B7E  B4D8               	btfsc	status,2,c
  5962  000B80  0012               	return	
  5963  000B82  5059               	movf	_ultimaTecla^0,w,c
  5964  000B84  185B               	xorwf	_novaTecla^0,w,c
  5965  000B86  B4D8               	btfsc	status,2,c
  5966  000B88  0012               	return	
  5967                           
  5968                           ;Ssms.c: 47:     MNovaLletra(lletraASCII);
  5969  000B8A  505C               	movf	_lletraASCII^0,w,c
  5970  000B8C  EC42  F00E         	call	_MNovaLletra
  5971                           
  5972                           ;Ssms.c: 48:     if(novaTecla != 0){
  5973  000B90  505B               	movf	_novaTecla^0,w,c
  5974  000B92  B4D8               	btfsc	status,2,c
  5975  000B94  D006               	goto	l4100
  5976                           
  5977                           ;Ssms.c: 49:       lletraASCII = lletraInici[novaTecla-2];
  5978  000B96  505B               	movf	_novaTecla^0,w,c
  5979  000B98  0F41               	addlw	low (_lletraInici+254)
  5980  000B9A  6ED9               	movwf	fsr2l,c
  5981  000B9C  6ADA               	clrf	fsr2h,c
  5982  000B9E  50DF               	movf	indf2,w,c
  5983  000BA0  D001               	goto	L10
  5984  000BA2                     l4100:
  5985                           
  5986                           ;Ssms.c: 52:       lletraASCII = '0';
  5987  000BA2  0E30               	movlw	48
  5988  000BA4                     L10:
  5989  000BA4  6E5C               	movwf	_lletraASCII^0,c
  5990                           
  5991                           ;Ssms.c: 53:       zeroTecla=0;
  5992  000BA6  0E00               	movlw	0
  5993  000BA8  6E2F               	movwf	_zeroTecla^0,c
  5994                           
  5995                           ;Ssms.c: 55:     ultimaTecla = novaTecla;
  5996  000BAA  C05B  F059         	movff	_novaTecla,_ultimaTecla
  5997                           
  5998                           ;Ssms.c: 56:     sumaPulsacions = 0;
  5999  000BAE  0E00               	movlw	0
  6000  000BB0  6E30               	movwf	_sumaPulsacions^0,c
  6001                           
  6002                           ;Ssms.c: 57:     novaTecla = -1;
  6003  000BB2  685B               	setf	_novaTecla^0,c
  6004                           
  6005                           ;Ssms.c: 58:     state = 0;
  6006  000BB4  0E00               	movlw	0
  6007  000BB6  6E2E               	movwf	SMotor@state^0,c
  6008  000BB8  0012               	return	
  6009  000BBA                     l4106:
  6010                           
  6011                           ;Ssms.c: 62:    if (ultimaTecla != 7 && ultimaTecla != 9 && ultimaTecla != 0) {
  6012  000BBA  0E07               	movlw	7
  6013  000BBC  1859               	xorwf	_ultimaTecla^0,w,c
  6014  000BBE  B4D8               	btfsc	status,2,c
  6015  000BC0  D00A               	goto	l4114
  6016  000BC2  0E09               	movlw	9
  6017  000BC4  1859               	xorwf	_ultimaTecla^0,w,c
  6018  000BC6  B4D8               	btfsc	status,2,c
  6019  000BC8  D006               	goto	l4114
  6020  000BCA  5059               	movf	_ultimaTecla^0,w,c
  6021  000BCC  B4D8               	btfsc	status,2,c
  6022  000BCE  D003               	goto	l4114
  6023                           
  6024                           ;Ssms.c: 63:     state = 5;
  6025  000BD0  0E05               	movlw	5
  6026  000BD2  6E2E               	movwf	SMotor@state^0,c
  6027                           
  6028                           ;Ssms.c: 64:    }
  6029  000BD4  0012               	return	
  6030  000BD6                     l4114:
  6031  000BD6  0E07               	movlw	7
  6032  000BD8  1859               	xorwf	_ultimaTecla^0,w,c
  6033  000BDA  B4D8               	btfsc	status,2,c
  6034  000BDC  D004               	goto	u3240
  6035  000BDE  0E09               	movlw	9
  6036  000BE0  1859               	xorwf	_ultimaTecla^0,w,c
  6037  000BE2  A4D8               	btfss	status,2,c
  6038  000BE4  D003               	goto	l4120
  6039  000BE6                     u3240:
  6040                           
  6041                           ;Ssms.c: 66:     state = 6;
  6042  000BE6  0E06               	movlw	6
  6043  000BE8  6E2E               	movwf	SMotor@state^0,c
  6044                           
  6045                           ;Ssms.c: 67:    }
  6046  000BEA  0012               	return	
  6047  000BEC                     l4120:
  6048  000BEC  5059               	movf	_ultimaTecla^0,w,c
  6049  000BEE  A4D8               	btfss	status,2,c
  6050  000BF0  0012               	return	
  6051                           
  6052                           ;Ssms.c: 69:     zeroTecla++;
  6053  000BF2  2A2F               	incf	_zeroTecla^0,f,c
  6054                           
  6055                           ;Ssms.c: 70:     if(zeroTecla == 2) zeroTecla = 0;
  6056  000BF4  0E02               	movlw	2
  6057  000BF6  182F               	xorwf	_zeroTecla^0,w,c
  6058  000BF8  A4D8               	btfss	status,2,c
  6059  000BFA  D002               	goto	l4128
  6060  000BFC  0E00               	movlw	0
  6061  000BFE  6E2F               	movwf	_zeroTecla^0,c
  6062  000C00                     l4128:
  6063                           
  6064                           ;Ssms.c: 71:     lletraASCII = arrayZero[zeroTecla];
  6065  000C00  502F               	movf	_zeroTecla^0,w,c
  6066  000C02  0F4C               	addlw	low _arrayZero
  6067  000C04  6ED9               	movwf	fsr2l,c
  6068  000C06  6ADA               	clrf	fsr2h,c
  6069  000C08  50DF               	movf	indf2,w,c
  6070  000C0A  D04B               	goto	L5
  6071  000C0C                     l4132:
  6072                           
  6073                           ;Ssms.c: 76:    if ((novaTecla > 1 || novaTecla == 0) && novaTecla < 10) {
  6074  000C0C  505B               	movf	_novaTecla^0,w,c
  6075  000C0E  0A80               	xorlw	128
  6076  000C10  0F7E               	addlw	-130
  6077  000C12  B0D8               	btfsc	status,0,c
  6078  000C14  D003               	goto	u3280
  6079  000C16  505B               	movf	_novaTecla^0,w,c
  6080  000C18  A4D8               	btfss	status,2,c
  6081  000C1A  D008               	goto	l4140
  6082  000C1C                     u3280:
  6083  000C1C  505B               	movf	_novaTecla^0,w,c
  6084  000C1E  0A80               	xorlw	128
  6085  000C20  0F76               	addlw	-138
  6086  000C22  B0D8               	btfsc	status,0,c
  6087  000C24  D003               	goto	l4140
  6088                           
  6089                           ;Ssms.c: 77:     state = 1;
  6090  000C26  0E01               	movlw	1
  6091  000C28  6E2E               	movwf	SMotor@state^0,c
  6092                           
  6093                           ;Ssms.c: 78:    }
  6094  000C2A  0012               	return	
  6095  000C2C                     l4140:
  6096  000C2C  505B               	movf	_novaTecla^0,w,c
  6097  000C2E  B4D8               	btfsc	status,2,c
  6098  000C30  D00E               	goto	l4152
  6099  000C32  505B               	movf	_novaTecla^0,w,c
  6100  000C34  0A80               	xorlw	128
  6101  000C36  0F7E               	addlw	-130
  6102  000C38  B0D8               	btfsc	status,0,c
  6103  000C3A  D009               	goto	l4152
  6104  000C3C  285C               	incf	_lletraASCII^0,w,c
  6105  000C3E  A4D8               	btfss	status,2,c
  6106  000C40  D006               	goto	l4152
  6107                           
  6108                           ;Ssms.c: 80:     MNovaLletra(novaTecla+48);
  6109  000C42  505B               	movf	_novaTecla^0,w,c
  6110  000C44  0F30               	addlw	48
  6111  000C46  EC42  F00E         	call	_MNovaLletra
  6112  000C4A                     l4148:
  6113                           
  6114                           ;Ssms.c: 81:     novaTecla = -1;
  6115  000C4A  685B               	setf	_novaTecla^0,c
  6116  000C4C  D77F               	goto	l4076
  6117  000C4E                     l4152:
  6118  000C4E  505B               	movf	_novaTecla^0,w,c
  6119  000C50  B4D8               	btfsc	status,2,c
  6120  000C52  0012               	return	
  6121  000C54  505B               	movf	_novaTecla^0,w,c
  6122  000C56  0A80               	xorlw	128
  6123  000C58  0F7E               	addlw	-130
  6124  000C5A  B0D8               	btfsc	status,0,c
  6125  000C5C  0012               	return	
  6126  000C5E  285C               	incf	_lletraASCII^0,w,c
  6127  000C60  B4D8               	btfsc	status,2,c
  6128  000C62  0012               	return	
  6129                           
  6130                           ;Ssms.c: 85:     MNovaLletra(lletraASCII);
  6131  000C64  505C               	movf	_lletraASCII^0,w,c
  6132  000C66  EC42  F00E         	call	_MNovaLletra
  6133                           
  6134                           ;Ssms.c: 86:     lletraASCII = -1;
  6135  000C6A  685C               	setf	_lletraASCII^0,c
  6136                           
  6137                           ;Ssms.c: 87:     state = 4;
  6138  000C6C  0E04               	movlw	4
  6139  000C6E  6E2E               	movwf	SMotor@state^0,c
  6140  000C70  0012               	return	
  6141  000C72                     l4164:
  6142                           
  6143                           ;Ssms.c: 91:    MNovaLletra(novaTecla+48);
  6144  000C72  505B               	movf	_novaTecla^0,w,c
  6145  000C74  0F30               	addlw	48
  6146  000C76  EC42  F00E         	call	_MNovaLletra
  6147  000C7A  D7E7               	goto	l4148
  6148  000C7C                     l4170:
  6149                           
  6150                           ;Ssms.c: 96:    if (sumaPulsacions == 4) {
  6151  000C7C  0E04               	movlw	4
  6152  000C7E  1830               	xorwf	_sumaPulsacions^0,w,c
  6153  000C80  A4D8               	btfss	status,2,c
  6154  000C82  D009               	goto	l4178
  6155  000C84                     u3360:
  6156                           
  6157                           ;Ssms.c: 97:     lletraASCII = lletraInici[ultimaTecla-2];
  6158  000C84  5059               	movf	_ultimaTecla^0,w,c
  6159  000C86  0F41               	addlw	low (_lletraInici+254)
  6160  000C88  6ED9               	movwf	fsr2l,c
  6161  000C8A  6ADA               	clrf	fsr2h,c
  6162  000C8C  50DF               	movf	indf2,w,c
  6163  000C8E  6E5C               	movwf	_lletraASCII^0,c
  6164                           
  6165                           ;Ssms.c: 98:     sumaPulsacions = 0;
  6166  000C90  0E00               	movlw	0
  6167  000C92  6E30               	movwf	_sumaPulsacions^0,c
  6168  000C94  D75B               	goto	l4076
  6169  000C96                     l4178:
  6170  000C96  0E03               	movlw	3
  6171  000C98  1830               	xorwf	_sumaPulsacions^0,w,c
  6172  000C9A  A4D8               	btfss	status,2,c
  6173  000C9C  D004               	goto	l4184
  6174  000C9E                     u3370:
  6175                           
  6176                           ;Ssms.c: 102:     lletraASCII = ultimaTecla+48;
  6177  000C9E  5059               	movf	_ultimaTecla^0,w,c
  6178  000CA0  0F30               	addlw	48
  6179  000CA2                     L5:
  6180  000CA2  6E5C               	movwf	_lletraASCII^0,c
  6181  000CA4  D753               	goto	l4076
  6182  000CA6                     l4184:
  6183  000CA6  0E03               	movlw	3
  6184  000CA8  6030               	cpfslt	_sumaPulsacions^0,c
  6185  000CAA  0012               	return	
  6186  000CAC  D74F               	goto	l4076
  6187  000CAE                     l4188:
  6188                           
  6189                           ;Ssms.c: 110:    if (sumaPulsacions == 4) {
  6190  000CAE  0E04               	movlw	4
  6191  000CB0  1830               	xorwf	_sumaPulsacions^0,w,c
  6192  000CB2  B4D8               	btfsc	status,2,c
  6193  000CB4  D7F4               	goto	u3370
  6194  000CB6  0E05               	movlw	5
  6195  000CB8  1830               	xorwf	_sumaPulsacions^0,w,c
  6196  000CBA  B4D8               	btfsc	status,2,c
  6197  000CBC  D7E3               	goto	u3360
  6198  000CBE  0E04               	movlw	4
  6199  000CC0  D7F3               	goto	L6
  6200  000CC2                     l4208:
  6201  000CC2  502E               	movf	SMotor@state^0,w,c
  6202  000CC4  6E6F               	movwf	??_SMotor^0,c
  6203  000CC6  6A70               	clrf	(??_SMotor+1)^0,c
  6204                           
  6205                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6206                           ; Switch size 1, requested type "simple"
  6207                           ; Number of cases is 1, Range of values is 0 to 0
  6208                           ; switch strategies available:
  6209                           ; Name         Instructions Cycles
  6210                           ; simple_byte            4     3 (average)
  6211                           ;	Chosen strategy is simple_byte
  6212  000CC8  5070               	movf	(??_SMotor+1)^0,w,c
  6213  000CCA  0A00               	xorlw	0	; case 0
  6214  000CCC  A4D8               	btfss	status,2,c
  6215  000CCE  0012               	return	
  6216                           
  6217                           ; Switch size 1, requested type "simple"
  6218                           ; Number of cases is 7, Range of values is 0 to 6
  6219                           ; switch strategies available:
  6220                           ; Name         Instructions Cycles
  6221                           ; simple_byte           22    12 (average)
  6222                           ;	Chosen strategy is simple_byte
  6223  000CD0  506F               	movf	??_SMotor^0,w,c
  6224  000CD2  0A00               	xorlw	0	; case 0
  6225  000CD4  B4D8               	btfsc	status,2,c
  6226  000CD6  D716               	goto	l4052
  6227  000CD8  0A01               	xorlw	1	; case 1
  6228  000CDA  B4D8               	btfsc	status,2,c
  6229  000CDC  D73A               	goto	l4078
  6230  000CDE  0A03               	xorlw	3	; case 2
  6231  000CE0  B4D8               	btfsc	status,2,c
  6232  000CE2  D76B               	goto	l4106
  6233  000CE4  0A01               	xorlw	1	; case 3
  6234  000CE6  B4D8               	btfsc	status,2,c
  6235  000CE8  D791               	goto	l4132
  6236  000CEA  0A07               	xorlw	7	; case 4
  6237  000CEC  B4D8               	btfsc	status,2,c
  6238  000CEE  D7C1               	goto	l4164
  6239  000CF0  0A01               	xorlw	1	; case 5
  6240  000CF2  B4D8               	btfsc	status,2,c
  6241  000CF4  D7C3               	goto	l4170
  6242  000CF6  0A03               	xorlw	3	; case 6
  6243  000CF8  A4D8               	btfss	status,2,c
  6244  000CFA  0012               	return	
  6245  000CFC  D7D8               	goto	l4188
  6246  000CFE                     __end_of_SMotor:
  6247                           	callstack 0
  6248                           
  6249 ;; *************** function _MNovaLletra *****************
  6250 ;; Defined at:
  6251 ;;		line 32 in file "Menu.c"
  6252 ;; Parameters:    Size  Location     Type
  6253 ;;  lletra          1    wreg     unsigned char 
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;  lletra          1    5[COMRAM] unsigned char 
  6256 ;; Return value:  Size  Location     Type
  6257 ;;                  1    wreg      void 
  6258 ;; Registers used:
  6259 ;;		wreg
  6260 ;; Tracked objects:
  6261 ;;		On entry : 0/0
  6262 ;;		On exit  : 0/0
  6263 ;;		Unchanged: 0/0
  6264 ;; Data sizes:     COMRAM   BANK0   BANK1
  6265 ;;      Params:         0       0       0
  6266 ;;      Locals:         1       0       0
  6267 ;;      Temps:          0       0       0
  6268 ;;      Totals:         1       0       0
  6269 ;;Total ram usage:        1 bytes
  6270 ;; Hardware stack levels used: 1
  6271 ;; Hardware stack levels required when called: 2
  6272 ;; This function calls:
  6273 ;;		Nothing
  6274 ;; This function is called by:
  6275 ;;		_SMotor
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text49
  6280  001C84                     __ptext49:
  6281                           	callstack 0
  6282  001C84                     _MNovaLletra:
  6283                           	callstack 27
  6284                           
  6285                           ;incstack = 0
  6286                           ;MNovaLletra@lletra stored from wreg
  6287  001C84  6E68               	movwf	MNovaLletra@lletra^0,c
  6288                           
  6289                           ;Menu.c: 33:     novaLletra = lletra;
  6290  001C86  C068  F057         	movff	MNovaLletra@lletra,_novaLletra
  6291  001C8A  0012               	return		;funcret
  6292  001C8C                     __end_of_MNovaLletra:
  6293                           	callstack 0
  6294                           
  6295 ;; *************** function _Minit *****************
  6296 ;; Defined at:
  6297 ;;		line 25 in file "Menu.c"
  6298 ;; Parameters:    Size  Location     Type
  6299 ;;		None
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;		None
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  1    wreg      void 
  6304 ;; Registers used:
  6305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMRAM   BANK0   BANK1
  6311 ;;      Params:         0       0       0
  6312 ;;      Locals:         0       0       0
  6313 ;;      Temps:          0       0       0
  6314 ;;      Totals:         0       0       0
  6315 ;;Total ram usage:        0 bytes
  6316 ;; Hardware stack levels used: 1
  6317 ;; Hardware stack levels required when called: 3
  6318 ;; This function calls:
  6319 ;;		_TiGetTimer
  6320 ;; This function is called by:
  6321 ;;		_main
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           	psect	text50
  6326  001C8C                     __ptext50:
  6327                           	callstack 0
  6328  001C8C                     _Minit:
  6329                           	callstack 27
  6330                           
  6331                           ;Menu.c: 26:     timerMenu = TiGetTimer();
  6332                           
  6333                           ;incstack = 0
  6334  001C8C  EC89  F00C         	call	_TiGetTimer	;wreg free
  6335  001C90  6E27               	movwf	_timerMenu^0,c
  6336  001C92  0012               	return		;funcret
  6337  001C94                     __end_of_Minit:
  6338                           	callstack 0
  6339                           
  6340 ;; *************** function _LcLCD *****************
  6341 ;; Defined at:
  6342 ;;		line 246 in file "LcTLCD.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;		None
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;		None
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  1    wreg      void 
  6349 ;; Registers used:
  6350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/1
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMRAM   BANK0   BANK1
  6356 ;;      Params:         0       0       0
  6357 ;;      Locals:         0       0       0
  6358 ;;      Temps:          0       0       0
  6359 ;;      Totals:         0       0       0
  6360 ;;Total ram usage:        0 bytes
  6361 ;; Hardware stack levels used: 1
  6362 ;; Hardware stack levels required when called: 6
  6363 ;; This function calls:
  6364 ;;		_LcPutChar
  6365 ;; This function is called by:
  6366 ;;		_main
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           	psect	text51
  6371  001748                     __ptext51:
  6372                           	callstack 0
  6373  001748                     _LcLCD:
  6374                           	callstack 24
  6375                           
  6376                           ;LcTLCD.c: 247:     if(nou_s == 1){
  6377                           
  6378                           ;incstack = 0
  6379  001748  A879               	btfss	(_nou_s/(0+8))^0,_nou_s& (0+7),c
  6380  00174A  0012               	return	
  6381                           
  6382                           ;LcTLCD.c: 248:         LcPutChar(*s_ptr);
  6383  00174C  C005  FFF6         	movff	_s_ptr,tblptrl
  6384  001750  C006  FFF7         	movff	_s_ptr+1,tblptrh
  6385  001754  6AF8               	clrf	tblptru,c
  6386  001756  0E01               	movlw	(high __ramtop+-1)
  6387  001758  64F7               	cpfsgt	tblptrh,c
  6388  00175A  D003               	bra	u3027
  6389  00175C  0008               	tblrd		*
  6390  00175E  50F5               	movf	tablat,w,c
  6391  001760  D005               	bra	u3020
  6392  001762                     u3027:
  6393  001762  CFF6 FFE1          	movff	tblptrl,fsr1l
  6394  001766  CFF7 FFE2          	movff	tblptrh,fsr1h
  6395  00176A  50E7               	movf	indf1,w,c
  6396  00176C                     u3020:
  6397  00176C  EC00  F00C         	call	_LcPutChar
  6398                           
  6399                           ;LcTLCD.c: 249:         s_ptr++;
  6400  001770  4A05               	infsnz	_s_ptr^0,f,c
  6401  001772  2A06               	incf	(_s_ptr+1)^0,f,c
  6402                           
  6403                           ;LcTLCD.c: 250:         if(*s_ptr == '\0'){
  6404  001774  C005  FFF6         	movff	_s_ptr,tblptrl
  6405  001778  C006  FFF7         	movff	_s_ptr+1,tblptrh
  6406  00177C  6AF8               	clrf	tblptru,c
  6407  00177E  0E01               	movlw	(high __ramtop+-1)
  6408  001780  64F7               	cpfsgt	tblptrh,c
  6409  001782  D003               	bra	u3037
  6410  001784  0008               	tblrd		*
  6411  001786  50F5               	movf	tablat,w,c
  6412  001788  D005               	bra	u3030
  6413  00178A                     u3037:
  6414  00178A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6415  00178E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6416  001792  50E7               	movf	indf1,w,c
  6417  001794                     u3030:
  6418  001794  0900               	iorlw	0
  6419  001796  A4D8               	btfss	status,2,c
  6420  001798  0012               	return	
  6421                           
  6422                           ;LcTLCD.c: 251:             nou_s = 0;
  6423  00179A  9879               	bcf	(_nou_s/(0+8))^0,_nou_s& (0+7),c
  6424                           
  6425                           ;LcTLCD.c: 252:             s_ptr=0;
  6426  00179C  0E00               	movlw	0
  6427  00179E  6E05               	movwf	_s_ptr^0,c
  6428  0017A0  0E00               	movlw	0
  6429  0017A2  6E06               	movwf	(_s_ptr+1)^0,c
  6430  0017A4  0012               	return		;funcret
  6431  0017A6                     __end_of_LcLCD:
  6432                           	callstack 0
  6433                           
  6434 ;; *************** function _LcInit *****************
  6435 ;; Defined at:
  6436 ;;		line 41 in file "LcTLCD.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  rows            1    wreg     unsigned char 
  6439 ;;  columns         1   16[COMRAM] unsigned char 
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;  rows            1   17[COMRAM] unsigned char 
  6442 ;;  i               2   18[COMRAM] int 
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  1    wreg      void 
  6445 ;; Registers used:
  6446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMRAM   BANK0   BANK1
  6452 ;;      Params:         1       0       0
  6453 ;;      Locals:         3       0       0
  6454 ;;      Temps:          0       0       0
  6455 ;;      Totals:         4       0       0
  6456 ;;Total ram usage:        4 bytes
  6457 ;; Hardware stack levels used: 1
  6458 ;; Hardware stack levels required when called: 4
  6459 ;; This function calls:
  6460 ;;		_CantaIR
  6461 ;;		_EscriuPrimeraOrdre
  6462 ;;		_Espera
  6463 ;;		_TiGetTimer
  6464 ;;		_WaitForBusy
  6465 ;; This function is called by:
  6466 ;;		_main
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           	psect	text52
  6471  0011B0                     __ptext52:
  6472                           	callstack 0
  6473  0011B0                     _LcInit:
  6474                           	callstack 26
  6475                           
  6476                           ;incstack = 0
  6477                           ;LcInit@rows stored from wreg
  6478  0011B0  6E74               	movwf	LcInit@rows^0,c
  6479                           
  6480                           ;LcTLCD.c: 47:  int i;;LcTLCD.c: 48:  Timer = TiGetTimer();
  6481  0011B2  EC89  F00C         	call	_TiGetTimer	;wreg free
  6482  0011B6  6E31               	movwf	_Timer^0,c
  6483                           
  6484                           ;LcTLCD.c: 49:  Rows = rows; Columns = columns;
  6485  0011B8  C074  F035         	movff	LcInit@rows,_Rows
  6486  0011BC  C073  F034         	movff	LcInit@columns,_Columns
  6487                           
  6488                           ;LcTLCD.c: 50:  RowAct = ColumnAct = 0;
  6489  0011C0  0E00               	movlw	0
  6490  0011C2  6E32               	movwf	_ColumnAct^0,c
  6491  0011C4  C032  F033         	movff	_ColumnAct,_RowAct
  6492                           
  6493                           ;LcTLCD.c: 51:  (TRISCbits.TRISC5 = TRISDbits.TRISD7 = TRISCbits.TRISC4 = 0);
  6494  0011C8  9894               	bcf	148,4,c	;volatile
  6495  0011CA  9E95               	bcf	149,7,c	;volatile
  6496  0011CC  9A94               	bcf	148,5,c	;volatile
  6497                           
  6498                           ;LcTLCD.c: 52:  for (i = 0; i < 2; i++) {
  6499  0011CE  0E00               	movlw	0
  6500  0011D0  6E76               	movwf	(LcInit@i+1)^0,c
  6501  0011D2  0E00               	movlw	0
  6502  0011D4  6E75               	movwf	LcInit@i^0,c
  6503  0011D6                     l3958:
  6504                           
  6505                           ;LcTLCD.c: 53:   Espera(Timer, 100);
  6506  0011D6  0E00               	movlw	0
  6507  0011D8  6E70               	movwf	(Espera@ms+1)^0,c
  6508  0011DA  0E64               	movlw	100
  6509  0011DC  6E6F               	movwf	Espera@ms^0,c
  6510  0011DE  5031               	movf	_Timer^0,w,c
  6511  0011E0  EC76  F00D         	call	_Espera
  6512                           
  6513                           ;LcTLCD.c: 56:   EscriuPrimeraOrdre(0x02 | 0x01);
  6514  0011E4  0E03               	movlw	3
  6515  0011E6  EC8C  F00A         	call	_EscriuPrimeraOrdre
  6516                           
  6517                           ;LcTLCD.c: 57:   Espera(Timer, 5);
  6518  0011EA  0E00               	movlw	0
  6519  0011EC  6E70               	movwf	(Espera@ms+1)^0,c
  6520  0011EE  0E05               	movlw	5
  6521  0011F0  6E6F               	movwf	Espera@ms^0,c
  6522  0011F2  5031               	movf	_Timer^0,w,c
  6523  0011F4  EC76  F00D         	call	_Espera
  6524                           
  6525                           ;LcTLCD.c: 58:   EscriuPrimeraOrdre(0x02 | 0x01);
  6526  0011F8  0E03               	movlw	3
  6527  0011FA  EC8C  F00A         	call	_EscriuPrimeraOrdre
  6528                           
  6529                           ;LcTLCD.c: 59:   Espera(Timer, 1);
  6530  0011FE  0E00               	movlw	0
  6531  001200  6E70               	movwf	(Espera@ms+1)^0,c
  6532  001202  0E01               	movlw	1
  6533  001204  6E6F               	movwf	Espera@ms^0,c
  6534  001206  5031               	movf	_Timer^0,w,c
  6535  001208  EC76  F00D         	call	_Espera
  6536                           
  6537                           ;LcTLCD.c: 60:   EscriuPrimeraOrdre(0x02 | 0x01);
  6538  00120C  0E03               	movlw	3
  6539  00120E  EC8C  F00A         	call	_EscriuPrimeraOrdre
  6540                           
  6541                           ;LcTLCD.c: 61:   Espera(Timer, 1);
  6542  001212  0E00               	movlw	0
  6543  001214  6E70               	movwf	(Espera@ms+1)^0,c
  6544  001216  0E01               	movlw	1
  6545  001218  6E6F               	movwf	Espera@ms^0,c
  6546  00121A  5031               	movf	_Timer^0,w,c
  6547  00121C  EC76  F00D         	call	_Espera
  6548                           
  6549                           ;LcTLCD.c: 64:   EscriuPrimeraOrdre(0x02);
  6550  001220  0E02               	movlw	2
  6551  001222  EC8C  F00A         	call	_EscriuPrimeraOrdre
  6552                           
  6553                           ;LcTLCD.c: 65:   Espera(Timer, 4);
  6554  001226  0E00               	movlw	0
  6555  001228  6E70               	movwf	(Espera@ms+1)^0,c
  6556  00122A  0E04               	movlw	4
  6557  00122C  6E6F               	movwf	Espera@ms^0,c
  6558  00122E  5031               	movf	_Timer^0,w,c
  6559  001230  EC76  F00D         	call	_Espera
  6560                           
  6561                           ;LcTLCD.c: 66:   CantaIR(0x20 | 0x08);
  6562  001234  0E28               	movlw	40
  6563  001236  ECF6  F00C         	call	_CantaIR
  6564                           
  6565                           ;LcTLCD.c: 69:   WaitForBusy(); CantaIR(0x08);
  6566  00123A  EC4C  F00C         	call	_WaitForBusy	;wreg free
  6567  00123E  0E08               	movlw	8
  6568  001240  ECF6  F00C         	call	_CantaIR
  6569                           
  6570                           ;LcTLCD.c: 70:   WaitForBusy(); CantaIR(0x01);
  6571  001244  EC4C  F00C         	call	_WaitForBusy	;wreg free
  6572  001248  0E01               	movlw	1
  6573  00124A  ECF6  F00C         	call	_CantaIR
  6574                           
  6575                           ;LcTLCD.c: 71:   Espera(Timer,3);
  6576  00124E  0E00               	movlw	0
  6577  001250  6E70               	movwf	(Espera@ms+1)^0,c
  6578  001252  0E03               	movlw	3
  6579  001254  6E6F               	movwf	Espera@ms^0,c
  6580  001256  5031               	movf	_Timer^0,w,c
  6581  001258  EC76  F00D         	call	_Espera
  6582                           
  6583                           ;LcTLCD.c: 72:   WaitForBusy(); CantaIR(0x04 | 0x02);
  6584  00125C  EC4C  F00C         	call	_WaitForBusy	;wreg free
  6585  001260  0E06               	movlw	6
  6586  001262  ECF6  F00C         	call	_CantaIR
  6587                           
  6588                           ;LcTLCD.c: 73:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  6589  001266  EC4C  F00C         	call	_WaitForBusy	;wreg free
  6590  00126A  0E0F               	movlw	15
  6591  00126C  ECF6  F00C         	call	_CantaIR
  6592                           
  6593                           ;LcTLCD.c: 74:  }
  6594  001270  4A75               	infsnz	LcInit@i^0,f,c
  6595  001272  2A76               	incf	(LcInit@i+1)^0,f,c
  6596  001274  BE76               	btfsc	(LcInit@i+1)^0,7,c
  6597  001276  D7AF               	goto	l3958
  6598  001278  5076               	movf	(LcInit@i+1)^0,w,c
  6599  00127A  E104               	bnz	u3000
  6600  00127C  0E02               	movlw	2
  6601  00127E  5C75               	subwf	LcInit@i^0,w,c
  6602  001280  A0D8               	btfss	status,0,c
  6603  001282  D7A9               	goto	l3958
  6604  001284                     u3000:
  6605                           
  6606                           ;LcTLCD.c: 80:     WaitForBusy();
  6607  001284  EC4C  F00C         	call	_WaitForBusy	;wreg free
  6608                           
  6609                           ;LcTLCD.c: 81:  CantaIR(0x08 | 0x04);
  6610  001288  0E0C               	movlw	12
  6611  00128A  ECF6  F00C         	call	_CantaIR
  6612  00128E  0012               	return		;funcret
  6613  001290                     __end_of_LcInit:
  6614                           	callstack 0
  6615                           
  6616 ;; *************** function _EscriuPrimeraOrdre *****************
  6617 ;; Defined at:
  6618 ;;		line 230 in file "LcTLCD.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  ordre           1    wreg     unsigned char 
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;  ordre           1    6[COMRAM] unsigned char 
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      void 
  6625 ;; Registers used:
  6626 ;;		wreg, status,2, status,0
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMRAM   BANK0   BANK1
  6632 ;;      Params:         0       0       0
  6633 ;;      Locals:         1       0       0
  6634 ;;      Temps:          1       0       0
  6635 ;;      Totals:         2       0       0
  6636 ;;Total ram usage:        2 bytes
  6637 ;; Hardware stack levels used: 1
  6638 ;; Hardware stack levels required when called: 2
  6639 ;; This function calls:
  6640 ;;		Nothing
  6641 ;; This function is called by:
  6642 ;;		_LcInit
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           	psect	text53
  6647  001518                     __ptext53:
  6648                           	callstack 0
  6649  001518                     _EscriuPrimeraOrdre:
  6650                           	callstack 27
  6651                           
  6652                           ;incstack = 0
  6653                           ;EscriuPrimeraOrdre@ordre stored from wreg
  6654  001518  6E69               	movwf	EscriuPrimeraOrdre@ordre^0,c
  6655                           
  6656                           ;LcTLCD.c: 232:  (TRISCbits.TRISC0 = TRISCbits.TRISC1 = TRISCbits.TRISC2 = TRISCbits.TRI
      +                          SC3 = 0); (LATCbits.LATC5 = 0); (LATDbits.LATD7 = 0);
  6657  00151A  9694               	bcf	148,3,c	;volatile
  6658  00151C  9494               	bcf	148,2,c	;volatile
  6659  00151E  9294               	bcf	148,1,c	;volatile
  6660  001520  9094               	bcf	148,0,c	;volatile
  6661  001522  9A8B               	bcf	139,5,c	;volatile
  6662  001524  9E8C               	bcf	140,7,c	;volatile
  6663                           
  6664                           ;LcTLCD.c: 233:  (LATCbits.LATC4 = 1); (LATCbits.LATC4 = 1);
  6665  001526  888B               	bsf	139,4,c	;volatile
  6666  001528  888B               	bsf	139,4,c	;volatile
  6667                           
  6668                           ;LcTLCD.c: 234:   (LATCbits.LATC3 = (ordre & 0x08 ? 1 : 0));
  6669  00152A  A669               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  6670  00152C  D003               	goto	u230
  6671  00152E  6A68               	clrf	??_EscriuPrimeraOrdre^0,c
  6672  001530  2A68               	incf	??_EscriuPrimeraOrdre^0,f,c
  6673  001532  D001               	goto	u248
  6674  001534                     u230:
  6675  001534  6A68               	clrf	??_EscriuPrimeraOrdre^0,c
  6676  001536                     u248:
  6677  001536  4668               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  6678  001538  4668               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  6679  00153A  4668               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  6680  00153C  508B               	movf	139,w,c	;volatile
  6681  00153E  1868               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6682  001540  0BF7               	andlw	-9
  6683  001542  1868               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6684  001544  6E8B               	movwf	139,c	;volatile
  6685                           
  6686                           ;LcTLCD.c: 235:   (LATCbits.LATC2 = (ordre & 0x04 ? 1 : 0));
  6687  001546  A469               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  6688  001548  D003               	goto	u250
  6689  00154A  6A68               	clrf	??_EscriuPrimeraOrdre^0,c
  6690  00154C  2A68               	incf	??_EscriuPrimeraOrdre^0,f,c
  6691  00154E  D001               	goto	u268
  6692  001550                     u250:
  6693  001550  6A68               	clrf	??_EscriuPrimeraOrdre^0,c
  6694  001552                     u268:
  6695  001552  4668               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  6696  001554  4668               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  6697  001556  508B               	movf	139,w,c	;volatile
  6698  001558  1868               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6699  00155A  0BFB               	andlw	-5
  6700  00155C  1868               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6701  00155E  6E8B               	movwf	139,c	;volatile
  6702                           
  6703                           ;LcTLCD.c: 236:   (LATCbits.LATC1 = (ordre & 0x02 ? 1 : 0));
  6704  001560  A269               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  6705  001562  D003               	goto	u270
  6706  001564  6A68               	clrf	??_EscriuPrimeraOrdre^0,c
  6707  001566  2A68               	incf	??_EscriuPrimeraOrdre^0,f,c
  6708  001568  D001               	goto	u288
  6709  00156A                     u270:
  6710  00156A  6A68               	clrf	??_EscriuPrimeraOrdre^0,c
  6711  00156C                     u288:
  6712  00156C  4668               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  6713  00156E  508B               	movf	139,w,c	;volatile
  6714  001570  1868               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6715  001572  0BFD               	andlw	-3
  6716  001574  1868               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6717  001576  6E8B               	movwf	139,c	;volatile
  6718                           
  6719                           ;LcTLCD.c: 237:   (LATCbits.LATC0 = (ordre & 0x01 ? 1 : 0));
  6720  001578  A069               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  6721  00157A  D003               	goto	u290
  6722  00157C  6A68               	clrf	??_EscriuPrimeraOrdre^0,c
  6723  00157E  2A68               	incf	??_EscriuPrimeraOrdre^0,f,c
  6724  001580  D001               	goto	u308
  6725  001582                     u290:
  6726  001582  6A68               	clrf	??_EscriuPrimeraOrdre^0,c
  6727  001584                     u308:
  6728  001584  508B               	movf	139,w,c	;volatile
  6729  001586  1868               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6730  001588  0BFE               	andlw	-2
  6731  00158A  1868               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  6732  00158C  6E8B               	movwf	139,c	;volatile
  6733                           
  6734                           ;LcTLCD.c: 238:  (LATCbits.LATC4 = 0);
  6735  00158E  988B               	bcf	139,4,c	;volatile
  6736  001590  0012               	return		;funcret
  6737  001592                     __end_of_EscriuPrimeraOrdre:
  6738                           	callstack 0
  6739                           
  6740 ;; *************** function _JoystickMotor *****************
  6741 ;; Defined at:
  6742 ;;		line 18 in file "Joystick.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;		None
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;		None
  6747 ;; Return value:  Size  Location     Type
  6748 ;;                  1    wreg      void 
  6749 ;; Registers used:
  6750 ;;		wreg, status,2, status,0, cstack
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/1
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMRAM   BANK0   BANK1
  6756 ;;      Params:         0       0       0
  6757 ;;      Locals:         0       0       0
  6758 ;;      Temps:          2       0       0
  6759 ;;      Totals:         2       0       0
  6760 ;;Total ram usage:        2 bytes
  6761 ;; Hardware stack levels used: 1
  6762 ;; Hardware stack levels required when called: 3
  6763 ;; This function calls:
  6764 ;;		_MNouJoystick
  6765 ;; This function is called by:
  6766 ;;		_main
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           	psect	text54
  6771  000FDC                     __ptext54:
  6772                           	callstack 0
  6773  000FDC                     _JoystickMotor:
  6774                           	callstack 27
  6775                           
  6776                           ;Joystick.c: 19:  static char state = 0;;Joystick.c: 20:     switch(state) {
  6777                           
  6778                           ;incstack = 0
  6779  000FDC  D05A               	goto	l2666
  6780  000FDE                     l881:
  6781                           
  6782                           ;Joystick.c: 22:    if (ADCON0bits.GODONE == 0 && ADRESH < 200 && ADRESH > 50) {
  6783  000FDE  B2C2               	btfsc	194,1,c	;volatile
  6784  000FE0  D00B               	goto	l882
  6785  000FE2  0EC8               	movlw	200
  6786  000FE4  60C4               	cpfslt	196,c	;volatile
  6787  000FE6  D008               	goto	l882
  6788  000FE8  0E32               	movlw	50
  6789  000FEA  64C4               	cpfsgt	196,c	;volatile
  6790  000FEC  D005               	goto	l882
  6791                           
  6792                           ;Joystick.c: 23:     ADCON0 = 0x07;
  6793  000FEE  0E07               	movlw	7
  6794  000FF0  6EC2               	movwf	194,c	;volatile
  6795                           
  6796                           ;Joystick.c: 24:                 cap1 = 1;
  6797  000FF2  8678               	bsf	(_cap1/(0+8))^0,_cap1& (0+7),c
  6798  000FF4                     l2596:
  6799                           
  6800                           ;Joystick.c: 25:     state++;
  6801  000FF4  2A0D               	incf	JoystickMotor@state^0,f,c
  6802                           
  6803                           ;Joystick.c: 26:    }
  6804  000FF6  D05B               	goto	l889
  6805  000FF8                     l882:
  6806  000FF8  B2C2               	btfsc	194,1,c	;volatile
  6807  000FFA  D010               	goto	l884
  6808  000FFC  0EC7               	movlw	199
  6809  000FFE  64C4               	cpfsgt	196,c	;volatile
  6810  001000  D00D               	goto	l884
  6811                           
  6812                           ;Joystick.c: 28:     if(ultimaTeclaAD != 2)MNouJoystick(2);
  6813  001002  0E02               	movlw	2
  6814  001004  180E               	xorwf	_ultimaTeclaAD^0,w,c
  6815  001006  B4D8               	btfsc	status,2,c
  6816  001008  D003               	goto	l2604
  6817  00100A  0E02               	movlw	2
  6818  00100C  EC4A  F00E         	call	_MNouJoystick
  6819  001010                     l2604:
  6820                           
  6821                           ;Joystick.c: 29:     ultimaTeclaAD = 2;
  6822  001010  0E02               	movlw	2
  6823  001012  6E0E               	movwf	_ultimaTeclaAD^0,c
  6824                           
  6825                           ;Joystick.c: 30:     ADCON0 = 0x07;
  6826  001014  0E07               	movlw	7
  6827  001016  6EC2               	movwf	194,c	;volatile
  6828                           
  6829                           ;Joystick.c: 31:                 cap1 = 0;
  6830  001018  9678               	bcf	(_cap1/(0+8))^0,_cap1& (0+7),c
  6831  00101A  D7EC               	goto	l2596
  6832  00101C                     l884:
  6833  00101C  B2C2               	btfsc	194,1,c	;volatile
  6834  00101E  D047               	goto	l889
  6835  001020  0E33               	movlw	51
  6836  001022  60C4               	cpfslt	196,c	;volatile
  6837  001024  D044               	goto	l889
  6838                           
  6839                           ;Joystick.c: 35:     if(ultimaTeclaAD != 8)MNouJoystick(8);
  6840  001026  0E08               	movlw	8
  6841  001028  180E               	xorwf	_ultimaTeclaAD^0,w,c
  6842  00102A  B4D8               	btfsc	status,2,c
  6843  00102C  D003               	goto	l2618
  6844  00102E  0E08               	movlw	8
  6845  001030  EC4A  F00E         	call	_MNouJoystick
  6846  001034                     l2618:
  6847                           
  6848                           ;Joystick.c: 36:     ultimaTeclaAD = 8;
  6849  001034  0E08               	movlw	8
  6850  001036  D7ED               	goto	L7
  6851  001038                     l890:
  6852                           
  6853                           ;Joystick.c: 43:    if (ADCON0bits.GODONE == 0 && ADRESH < 200 && ADRESH > 50) {
  6854  001038  B2C2               	btfsc	194,1,c	;volatile
  6855  00103A  D00B               	goto	l891
  6856  00103C  0EC8               	movlw	200
  6857  00103E  60C4               	cpfslt	196,c	;volatile
  6858  001040  D008               	goto	l891
  6859  001042  0E32               	movlw	50
  6860  001044  64C4               	cpfsgt	196,c	;volatile
  6861  001046  D005               	goto	l891
  6862                           
  6863                           ;Joystick.c: 44:     ADCON0 = 0x03;
  6864  001048  0E03               	movlw	3
  6865  00104A  6EC2               	movwf	194,c	;volatile
  6866                           
  6867                           ;Joystick.c: 45:                 cap2 = 1;
  6868  00104C  8478               	bsf	(_cap2/(0+8))^0,_cap2& (0+7),c
  6869  00104E                     l2634:
  6870                           
  6871                           ;Joystick.c: 46:     state--;
  6872  00104E  060D               	decf	JoystickMotor@state^0,f,c
  6873                           
  6874                           ;Joystick.c: 47:    }
  6875  001050  D02E               	goto	l889
  6876  001052                     l891:
  6877  001052  B2C2               	btfsc	194,1,c	;volatile
  6878  001054  D010               	goto	l893
  6879  001056  0EC7               	movlw	199
  6880  001058  64C4               	cpfsgt	196,c	;volatile
  6881  00105A  D00D               	goto	l893
  6882                           
  6883                           ;Joystick.c: 49:     if(ultimaTeclaAD != 6)MNouJoystick(6);
  6884  00105C  0E06               	movlw	6
  6885  00105E  180E               	xorwf	_ultimaTeclaAD^0,w,c
  6886  001060  B4D8               	btfsc	status,2,c
  6887  001062  D003               	goto	l2642
  6888  001064  0E06               	movlw	6
  6889  001066  EC4A  F00E         	call	_MNouJoystick
  6890  00106A                     l2642:
  6891                           
  6892                           ;Joystick.c: 50:     ultimaTeclaAD = 6;
  6893  00106A  0E06               	movlw	6
  6894  00106C  6E0E               	movwf	_ultimaTeclaAD^0,c
  6895                           
  6896                           ;Joystick.c: 51:     ADCON0 = 0x03;
  6897  00106E  0E03               	movlw	3
  6898  001070  6EC2               	movwf	194,c	;volatile
  6899                           
  6900                           ;Joystick.c: 52:                 cap2 = 0;
  6901  001072  9478               	bcf	(_cap2/(0+8))^0,_cap2& (0+7),c
  6902  001074  D7EC               	goto	l2634
  6903  001076                     l893:
  6904  001076  B2C2               	btfsc	194,1,c	;volatile
  6905  001078  D01A               	goto	l889
  6906  00107A  0E33               	movlw	51
  6907  00107C  60C4               	cpfslt	196,c	;volatile
  6908  00107E  D017               	goto	l889
  6909                           
  6910                           ;Joystick.c: 56:     if(ultimaTeclaAD != 4)MNouJoystick(4);
  6911  001080  0E04               	movlw	4
  6912  001082  180E               	xorwf	_ultimaTeclaAD^0,w,c
  6913  001084  B4D8               	btfsc	status,2,c
  6914  001086  D003               	goto	l2656
  6915  001088  0E04               	movlw	4
  6916  00108A  EC4A  F00E         	call	_MNouJoystick
  6917  00108E                     l2656:
  6918                           
  6919                           ;Joystick.c: 57:     ultimaTeclaAD = 4;
  6920  00108E  0E04               	movlw	4
  6921  001090  D7ED               	goto	L8
  6922  001092                     l2666:
  6923  001092  500D               	movf	JoystickMotor@state^0,w,c
  6924  001094  6E69               	movwf	??_JoystickMotor^0,c
  6925  001096  6A6A               	clrf	(??_JoystickMotor+1)^0,c
  6926                           
  6927                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6928                           ; Switch size 1, requested type "simple"
  6929                           ; Number of cases is 1, Range of values is 0 to 0
  6930                           ; switch strategies available:
  6931                           ; Name         Instructions Cycles
  6932                           ; simple_byte            4     3 (average)
  6933                           ;	Chosen strategy is simple_byte
  6934  001098  506A               	movf	(??_JoystickMotor+1)^0,w,c
  6935  00109A  0A00               	xorlw	0	; case 0
  6936  00109C  A4D8               	btfss	status,2,c
  6937  00109E  D007               	goto	l889
  6938                           
  6939                           ; Switch size 1, requested type "simple"
  6940                           ; Number of cases is 2, Range of values is 0 to 1
  6941                           ; switch strategies available:
  6942                           ; Name         Instructions Cycles
  6943                           ; simple_byte            7     4 (average)
  6944                           ;	Chosen strategy is simple_byte
  6945  0010A0  5069               	movf	??_JoystickMotor^0,w,c
  6946  0010A2  0A00               	xorlw	0	; case 0
  6947  0010A4  B4D8               	btfsc	status,2,c
  6948  0010A6  D79B               	goto	l881
  6949  0010A8  0A01               	xorlw	1	; case 1
  6950  0010AA  B4D8               	btfsc	status,2,c
  6951  0010AC  D7C5               	goto	l890
  6952  0010AE                     l889:
  6953                           
  6954                           ;Joystick.c: 65:     if(cap1 && cap2 && ultimaTeclaAD != 0){
  6955  0010AE  A678               	btfss	(_cap1/(0+8))^0,_cap1& (0+7),c
  6956  0010B0  0012               	return	
  6957  0010B2  A478               	btfss	(_cap2/(0+8))^0,_cap2& (0+7),c
  6958  0010B4  0012               	return	
  6959  0010B6  500E               	movf	_ultimaTeclaAD^0,w,c
  6960  0010B8  B4D8               	btfsc	status,2,c
  6961  0010BA  0012               	return	
  6962                           
  6963                           ;Joystick.c: 66:         MNouJoystick(0);
  6964  0010BC  0E00               	movlw	0
  6965  0010BE  EC4A  F00E         	call	_MNouJoystick
  6966                           
  6967                           ;Joystick.c: 67:         ultimaTeclaAD = 0;
  6968  0010C2  0E00               	movlw	0
  6969  0010C4  6E0E               	movwf	_ultimaTeclaAD^0,c
  6970  0010C6  0012               	return		;funcret
  6971  0010C8                     __end_of_JoystickMotor:
  6972                           	callstack 0
  6973                           
  6974 ;; *************** function _MNouJoystick *****************
  6975 ;; Defined at:
  6976 ;;		line 35 in file "Menu.c"
  6977 ;; Parameters:    Size  Location     Type
  6978 ;;  posicio         1    wreg     char 
  6979 ;; Auto vars:     Size  Location     Type
  6980 ;;  posicio         1    5[COMRAM] char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  1    wreg      void 
  6983 ;; Registers used:
  6984 ;;		wreg
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/1
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMRAM   BANK0   BANK1
  6990 ;;      Params:         0       0       0
  6991 ;;      Locals:         1       0       0
  6992 ;;      Temps:          0       0       0
  6993 ;;      Totals:         1       0       0
  6994 ;;Total ram usage:        1 bytes
  6995 ;; Hardware stack levels used: 1
  6996 ;; Hardware stack levels required when called: 2
  6997 ;; This function calls:
  6998 ;;		Nothing
  6999 ;; This function is called by:
  7000 ;;		_JoystickMotor
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           	psect	text55
  7005  001C94                     __ptext55:
  7006                           	callstack 0
  7007  001C94                     _MNouJoystick:
  7008                           	callstack 27
  7009                           
  7010                           ;incstack = 0
  7011                           ;MNouJoystick@posicio stored from wreg
  7012  001C94  6E68               	movwf	MNouJoystick@posicio^0,c
  7013                           
  7014                           ;Menu.c: 36:     novaDireccio = posicio;
  7015  001C96  C068  F056         	movff	MNouJoystick@posicio,_novaDireccio
  7016  001C9A  0012               	return		;funcret
  7017  001C9C                     __end_of_MNouJoystick:
  7018                           	callstack 0
  7019                           
  7020 ;; *************** function _JoystickInit *****************
  7021 ;; Defined at:
  7022 ;;		line 12 in file "Joystick.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;		None
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;		None
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  1    wreg      void 
  7029 ;; Registers used:
  7030 ;;		wreg, status,2
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMRAM   BANK0   BANK1
  7036 ;;      Params:         0       0       0
  7037 ;;      Locals:         0       0       0
  7038 ;;      Temps:          0       0       0
  7039 ;;      Totals:         0       0       0
  7040 ;;Total ram usage:        0 bytes
  7041 ;; Hardware stack levels used: 1
  7042 ;; Hardware stack levels required when called: 2
  7043 ;; This function calls:
  7044 ;;		Nothing
  7045 ;; This function is called by:
  7046 ;;		_main
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text56
  7051  001BB2                     __ptext56:
  7052                           	callstack 0
  7053  001BB2                     _JoystickInit:
  7054                           	callstack 28
  7055                           
  7056                           ;Joystick.c: 13:     ADCON0 = 0x01;
  7057                           
  7058                           ;incstack = 0
  7059  001BB2  0E01               	movlw	1
  7060  001BB4  6EC2               	movwf	194,c	;volatile
  7061                           
  7062                           ;Joystick.c: 14:     ADCON1 = 0x0D;
  7063  001BB6  0E0D               	movlw	13
  7064  001BB8  6EC1               	movwf	193,c	;volatile
  7065                           
  7066                           ;Joystick.c: 15:     ADCON2 = 0x09;
  7067  001BBA  0E09               	movlw	9
  7068  001BBC  6EC0               	movwf	192,c	;volatile
  7069                           
  7070                           ;Joystick.c: 16:     ADRESH = 127;
  7071  001BBE  0E7F               	movlw	127
  7072  001BC0  6EC4               	movwf	196,c	;volatile
  7073  001BC2  0012               	return		;funcret
  7074  001BC4                     __end_of_JoystickInit:
  7075                           	callstack 0
  7076                           
  7077 ;; *************** function _GLCDMotor *****************
  7078 ;; Defined at:
  7079 ;;		line 36 in file "GestioLCD.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;		None
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;		None
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  1    wreg      void 
  7086 ;; Registers used:
  7087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/1
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1
  7093 ;;      Params:         0       0       0
  7094 ;;      Locals:         0       0       0
  7095 ;;      Temps:          0       2       0
  7096 ;;      Totals:         0       2       0
  7097 ;;Total ram usage:        2 bytes
  7098 ;; Hardware stack levels used: 1
  7099 ;; Hardware stack levels required when called: 6
  7100 ;; This function calls:
  7101 ;;		_LcClear
  7102 ;;		_LcGotoXY
  7103 ;;		_LcLliure
  7104 ;;		_LcNewString
  7105 ;;		_LcPutChar
  7106 ;;		_TiGetTics
  7107 ;;		_TiResetTics
  7108 ;; This function is called by:
  7109 ;;		_main
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           	psect	text57
  7114  00072A                     __ptext57:
  7115                           	callstack 0
  7116  00072A                     _GLCDMotor:
  7117                           	callstack 24
  7118                           
  7119                           ;GestioLCD.c: 37:  static char state = 0;;GestioLCD.c: 38:     static char j=0;;GestioLC
      +                          D.c: 39:     static char max1 = 15;;GestioLCD.c: 40:     static char min1 = 0;;GestioLCD
      +                          .c: 41:     static char min2 = 0;;GestioLCD.c: 42:     static char max2 = 15;;GestioLCD.
      +                          c: 43:     static char k1 = 0;;GestioLCD.c: 44:     static char k2 = 0;;GestioLCD.c: 45:
      +                               static char length1=0;;GestioLCD.c: 46:     static char length2=0;;GestioLCD.c: 48:
      +                               switch(state) {
  7120                           
  7121                           ;incstack = 0
  7122  00072A  D1BD               	goto	l5938
  7123  00072C                     l5752:
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;GestioLCD.c: 50:    if (length1 < 17 && ferMenu == 1) {
  7127  00072C  0E11               	movlw	17
  7128  00072E  6010               	cpfslt	GLCDMotor@length1^0,c
  7129  000730  D018               	goto	l5762
  7130                           
  7131                           ; BSR set to: 0
  7132  000732  AA78               	btfss	(_ferMenu/(0+8))^0,_ferMenu& (0+7),c
  7133  000734  D016               	goto	l5762
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;GestioLCD.c: 51:     LcGotoXY(0,0);
  7137  000736  0E00               	movlw	0
  7138  000738  6E70               	movwf	LcGotoXY@Row^0,c
  7139  00073A  0E00               	movlw	0
  7140  00073C  EC6C  F00C         	call	_LcGotoXY
  7141                           
  7142                           ;GestioLCD.c: 52:     LcNewString(menuList[menuDaltGLCD]);
  7143  000740  5017               	movf	_menuDaltGLCD^0,w,c
  7144  000742  0D1D               	mullw	29
  7145  000744  50F3               	movf	243,w,c
  7146  000746  0F01               	addlw	low _menuList
  7147  000748  0100               	movlb	0	; () banked
  7148  00074A  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7149  00074C  C0C0  F06B         	movff	??_GLCDMotor,LcNewString@new_s
  7150  000750  506B               	movf	LcNewString@new_s^0,w,c
  7151  000752  A4D8               	btfss	status,2,c
  7152  000754  0E02               	movlw	high __smallconst
  7153  000756  6E6C               	movwf	(LcNewString@new_s+1)^0,c
  7154  000758  EC0A  F00E         	call	_LcNewString	;wreg free
  7155                           
  7156                           ;GestioLCD.c: 53:     state = 5;
  7157  00075C  0E05               	movlw	5
  7158  00075E  6E16               	movwf	GLCDMotor@state^0,c
  7159                           
  7160                           ;GestioLCD.c: 54:    }
  7161  000760  0012               	return	
  7162  000762                     l5762:
  7163                           
  7164                           ; BSR set to: 0
  7165  000762  0E10               	movlw	16
  7166  000764  6410               	cpfsgt	GLCDMotor@length1^0,c
  7167  000766  0012               	return	
  7168                           
  7169                           ; BSR set to: 0
  7170  000768  AA78               	btfss	(_ferMenu/(0+8))^0,_ferMenu& (0+7),c
  7171  00076A  0012               	return	
  7172  00076C                     u5510:
  7173                           
  7174                           ;GestioLCD.c: 56:     state++;
  7175  00076C  2A16               	incf	GLCDMotor@state^0,f,c
  7176  00076E  0012               	return	
  7177  000770                     l5768:
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;GestioLCD.c: 60:    if (j>=16) {
  7181  000770  0E0F               	movlw	15
  7182  000772  6415               	cpfsgt	GLCDMotor@j^0,c
  7183  000774  D02B               	goto	l5782
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;GestioLCD.c: 61:     min1++;
  7187  000776  2A14               	incf	GLCDMotor@min1^0,f,c
  7188                           
  7189                           ;GestioLCD.c: 62:     max1++;
  7190  000778  2A54               	incf	GLCDMotor@max1^0,f,c
  7191                           
  7192                           ; BSR set to: 0
  7193                           ;GestioLCD.c: 63:     if (menuList[menuDaltGLCD][max1] == '\0') max1=0;
  7194  00077A  5017               	movf	_menuDaltGLCD^0,w,c
  7195  00077C  0D1D               	mullw	29
  7196  00077E  50F3               	movf	243,w,c
  7197  000780  0F01               	addlw	low _menuList
  7198  000782  2454               	addwf	GLCDMotor@max1^0,w,c
  7199  000784  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7200  000786  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7201  00078A                     	if	1	;There is more than 1 active tblptr byte
  7202  00078A  0E02               	movlw	high __smallconst
  7203  00078C  6EF7               	movwf	tblptrh,c
  7204  00078E                     	endif
  7205  00078E                     	if	0	;tblptru may be non-zero
  7206  00078E                     	endif
  7207  00078E                     	if	0	;tblptru may be non-zero
  7208  00078E                     	endif
  7209  00078E  0008               	tblrd		*
  7210  000790  50F5               	movf	tablat,w,c
  7211  000792  0900               	iorlw	0
  7212  000794  A4D8               	btfss	status,2,c
  7213  000796  D002               	goto	l5776
  7214                           
  7215                           ; BSR set to: 0
  7216  000798  0E00               	movlw	0
  7217  00079A  6E54               	movwf	GLCDMotor@max1^0,c
  7218  00079C                     l5776:
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;GestioLCD.c: 64:     if (menuList[menuDaltGLCD][min1] == '\0') min1=0;
  7222  00079C  5017               	movf	_menuDaltGLCD^0,w,c
  7223  00079E  0D1D               	mullw	29
  7224  0007A0  50F3               	movf	243,w,c
  7225  0007A2  0F01               	addlw	low _menuList
  7226  0007A4  2414               	addwf	GLCDMotor@min1^0,w,c
  7227  0007A6  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7228  0007A8  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7229  0007AC                     	if	1	;There is more than 1 active tblptr byte
  7230  0007AC  0E02               	movlw	high __smallconst
  7231  0007AE  6EF7               	movwf	tblptrh,c
  7232  0007B0                     	endif
  7233  0007B0                     	if	0	;tblptru may be non-zero
  7234  0007B0                     	endif
  7235  0007B0                     	if	0	;tblptru may be non-zero
  7236  0007B0                     	endif
  7237  0007B0  0008               	tblrd		*
  7238  0007B2  50F5               	movf	tablat,w,c
  7239  0007B4  0900               	iorlw	0
  7240  0007B6  A4D8               	btfss	status,2,c
  7241  0007B8  D002               	goto	l812
  7242                           
  7243                           ; BSR set to: 0
  7244  0007BA  0E00               	movlw	0
  7245  0007BC  6E14               	movwf	GLCDMotor@min1^0,c
  7246  0007BE                     l812:
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;GestioLCD.c: 65:     j=0;
  7250  0007BE  0E00               	movlw	0
  7251  0007C0  6E15               	movwf	GLCDMotor@j^0,c
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;GestioLCD.c: 66:     k1=min1;
  7255  0007C2  C014  F012         	movff	GLCDMotor@min1,GLCDMotor@k1
  7256                           
  7257                           ;GestioLCD.c: 67:     state = 6;
  7258  0007C6  0E06               	movlw	6
  7259  0007C8  6E16               	movwf	GLCDMotor@state^0,c
  7260                           
  7261                           ;GestioLCD.c: 68:    }
  7262  0007CA  0012               	return	
  7263  0007CC                     l5782:
  7264                           
  7265                           ; BSR set to: 0
  7266  0007CC  0E10               	movlw	16
  7267  0007CE  6015               	cpfslt	GLCDMotor@j^0,c
  7268  0007D0  0012               	return	
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;GestioLCD.c: 70:     LcGotoXY(j,0);
  7272  0007D2  0E00               	movlw	0
  7273  0007D4  6E70               	movwf	LcGotoXY@Row^0,c
  7274  0007D6  5015               	movf	GLCDMotor@j^0,w,c
  7275  0007D8  EC6C  F00C         	call	_LcGotoXY
  7276                           
  7277                           ;GestioLCD.c: 71:     LcPutChar(menuList[menuDaltGLCD][k1]);
  7278  0007DC  5017               	movf	_menuDaltGLCD^0,w,c
  7279  0007DE  0D1D               	mullw	29
  7280  0007E0  50F3               	movf	243,w,c
  7281  0007E2  0F01               	addlw	low _menuList
  7282  0007E4  2412               	addwf	GLCDMotor@k1^0,w,c
  7283  0007E6  0100               	movlb	0	; () banked
  7284  0007E8  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7285  0007EA  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7286  0007EE                     	if	1	;There is more than 1 active tblptr byte
  7287  0007EE  0E02               	movlw	high __smallconst
  7288  0007F0  6EF7               	movwf	tblptrh,c
  7289  0007F2                     	endif
  7290  0007F2                     	if	0	;tblptru may be non-zero
  7291  0007F2                     	endif
  7292  0007F2                     	if	0	;tblptru may be non-zero
  7293  0007F2                     	endif
  7294  0007F2  0008               	tblrd		*
  7295  0007F4  50F5               	movf	tablat,w,c
  7296  0007F6  EC00  F00C         	call	_LcPutChar
  7297                           
  7298                           ;GestioLCD.c: 72:     j++;
  7299  0007FA  2A15               	incf	GLCDMotor@j^0,f,c
  7300                           
  7301                           ;GestioLCD.c: 73:     k1++;
  7302  0007FC  2A12               	incf	GLCDMotor@k1^0,f,c
  7303                           
  7304                           ;GestioLCD.c: 74:     if(menuList[menuDaltGLCD][k1] == '\0') k1 = 0;
  7305  0007FE  5017               	movf	_menuDaltGLCD^0,w,c
  7306  000800  0D1D               	mullw	29
  7307  000802  50F3               	movf	243,w,c
  7308  000804  0F01               	addlw	low _menuList
  7309  000806  2412               	addwf	GLCDMotor@k1^0,w,c
  7310  000808  0100               	movlb	0	; () banked
  7311  00080A  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7312  00080C  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7313  000810                     	if	1	;There is more than 1 active tblptr byte
  7314  000810  0E02               	movlw	high __smallconst
  7315  000812  6EF7               	movwf	tblptrh,c
  7316  000814                     	endif
  7317  000814                     	if	0	;tblptru may be non-zero
  7318  000814                     	endif
  7319  000814                     	if	0	;tblptru may be non-zero
  7320  000814                     	endif
  7321  000814  0008               	tblrd		*
  7322  000816  50F5               	movf	tablat,w,c
  7323  000818  0900               	iorlw	0
  7324  00081A  A4D8               	btfss	status,2,c
  7325  00081C  0012               	return	
  7326                           
  7327                           ; BSR set to: 0
  7328  00081E  0E00               	movlw	0
  7329  000820  6E12               	movwf	GLCDMotor@k1^0,c
  7330  000822  0012               	return	
  7331  000824                     l5796:
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;GestioLCD.c: 78:    if (menuDaltGLCD<4) {
  7335  000824  0E04               	movlw	4
  7336  000826  6017               	cpfslt	_menuDaltGLCD^0,c
  7337  000828  D012               	goto	u5610
  7338  00082A  D7A0               	goto	u5510
  7339  00082C                     u5580:
  7340                           
  7341                           ;GestioLCD.c: 82:     state = 0;
  7342  00082C  0E00               	movlw	0
  7343  00082E  6E16               	movwf	GLCDMotor@state^0,c
  7344  000830  0012               	return	
  7345  000832                     l5804:
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;GestioLCD.c: 86:    if (LcLliure() && menuDaltGLCD<4) {
  7349  000832  EC10  F00E         	call	_LcLliure	;wreg free
  7350  000836  A0D8               	btfss	status,0,c
  7351  000838  D006               	goto	l5810
  7352  00083A  0E04               	movlw	4
  7353  00083C  6017               	cpfslt	_menuDaltGLCD^0,c
  7354  00083E  D003               	goto	l5810
  7355                           
  7356                           ;GestioLCD.c: 87:     state = 7;
  7357  000840  0E07               	movlw	7
  7358  000842  6E16               	movwf	GLCDMotor@state^0,c
  7359                           
  7360                           ;GestioLCD.c: 88:    }
  7361  000844  0012               	return	
  7362  000846                     l5810:
  7363  000846  EC10  F00E         	call	_LcLliure	;wreg free
  7364  00084A  A0D8               	btfss	status,0,c
  7365  00084C  0012               	return	
  7366  00084E                     u5610:
  7367  00084E  0E03               	movlw	3
  7368  000850  6417               	cpfsgt	_menuDaltGLCD^0,c
  7369  000852  0012               	return	
  7370  000854  D7EB               	goto	u5580
  7371  000856                     l824:
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;GestioLCD.c: 94:    if (newString != 0 && ferMenu == 1) {
  7375  000856  A878               	btfss	(_newString/(0+8))^0,_newString& (0+7),c
  7376  000858  0012               	return	
  7377                           
  7378                           ; BSR set to: 0
  7379  00085A  AA78               	btfss	(_ferMenu/(0+8))^0,_ferMenu& (0+7),c
  7380  00085C  0012               	return	
  7381                           
  7382                           ; BSR set to: 0
  7383                           ;GestioLCD.c: 95:     length1 = 0;
  7384  00085E  0E00               	movlw	0
  7385  000860  6E10               	movwf	GLCDMotor@length1^0,c
  7386                           
  7387                           ;GestioLCD.c: 96:     length2 = 0;
  7388  000862  0E00               	movlw	0
  7389  000864  6E0F               	movwf	GLCDMotor@length2^0,c
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;GestioLCD.c: 97:     LcGotoXY(0,0);
  7393  000866  0E00               	movlw	0
  7394  000868  6E70               	movwf	LcGotoXY@Row^0,c
  7395  00086A  0E00               	movlw	0
  7396  00086C  EC6C  F00C         	call	_LcGotoXY
  7397                           
  7398                           ;GestioLCD.c: 98:     min1 = 0;
  7399  000870  0E00               	movlw	0
  7400  000872  6E14               	movwf	GLCDMotor@min1^0,c
  7401                           
  7402                           ;GestioLCD.c: 99:     max1 = 15;
  7403  000874  0E0F               	movlw	15
  7404  000876  6E54               	movwf	GLCDMotor@max1^0,c
  7405                           
  7406                           ;GestioLCD.c: 100:     min2 = 0;
  7407  000878  0E00               	movlw	0
  7408  00087A  6E13               	movwf	GLCDMotor@min2^0,c
  7409                           
  7410                           ;GestioLCD.c: 101:     max2 = 15;
  7411  00087C  0E0F               	movlw	15
  7412  00087E  6E53               	movwf	GLCDMotor@max2^0,c
  7413                           
  7414                           ;GestioLCD.c: 102:     j = 0;
  7415  000880  0E00               	movlw	0
  7416  000882  6E15               	movwf	GLCDMotor@j^0,c
  7417                           
  7418                           ;GestioLCD.c: 103:     k1 = 0;
  7419  000884  0E00               	movlw	0
  7420  000886  6E12               	movwf	GLCDMotor@k1^0,c
  7421                           
  7422                           ;GestioLCD.c: 104:     k2 = 0;
  7423  000888  0E00               	movlw	0
  7424  00088A  6E11               	movwf	GLCDMotor@k2^0,c
  7425                           
  7426                           ;GestioLCD.c: 105:     newString = 0;
  7427  00088C  9878               	bcf	(_newString/(0+8))^0,_newString& (0+7),c
  7428  00088E  D76E               	goto	u5510
  7429  000890                     l5840:
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;GestioLCD.c: 110:    if (menuList[menuDaltGLCD][length1] == '\0' && menuDaltGLCD>=4) {
  7433  000890  5017               	movf	_menuDaltGLCD^0,w,c
  7434  000892  0D1D               	mullw	29
  7435  000894  50F3               	movf	243,w,c
  7436  000896  0F01               	addlw	low _menuList
  7437  000898  2410               	addwf	GLCDMotor@length1^0,w,c
  7438  00089A  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7439  00089C  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7440  0008A0                     	if	1	;There is more than 1 active tblptr byte
  7441  0008A0  0E02               	movlw	high __smallconst
  7442  0008A2  6EF7               	movwf	tblptrh,c
  7443  0008A4                     	endif
  7444  0008A4                     	if	0	;tblptru may be non-zero
  7445  0008A4                     	endif
  7446  0008A4                     	if	0	;tblptru may be non-zero
  7447  0008A4                     	endif
  7448  0008A4  0008               	tblrd		*
  7449  0008A6  50F5               	movf	tablat,w,c
  7450  0008A8  0900               	iorlw	0
  7451  0008AA  A4D8               	btfss	status,2,c
  7452  0008AC  D004               	goto	l5846
  7453                           
  7454                           ; BSR set to: 0
  7455  0008AE  0E03               	movlw	3
  7456  0008B0  6417               	cpfsgt	_menuDaltGLCD^0,c
  7457  0008B2  D001               	goto	l5846
  7458  0008B4  D75B               	goto	u5510
  7459  0008B6                     l5846:
  7460                           
  7461                           ; BSR set to: 0
  7462  0008B6  5017               	movf	_menuDaltGLCD^0,w,c
  7463  0008B8  0D1D               	mullw	29
  7464  0008BA  50F3               	movf	243,w,c
  7465  0008BC  0F01               	addlw	low _menuList
  7466  0008BE  2410               	addwf	GLCDMotor@length1^0,w,c
  7467  0008C0  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7468  0008C2  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7469  0008C6                     	if	1	;There is more than 1 active tblptr byte
  7470  0008C6  0E02               	movlw	high __smallconst
  7471  0008C8  6EF7               	movwf	tblptrh,c
  7472  0008CA                     	endif
  7473  0008CA                     	if	0	;tblptru may be non-zero
  7474  0008CA                     	endif
  7475  0008CA                     	if	0	;tblptru may be non-zero
  7476  0008CA                     	endif
  7477  0008CA  0008               	tblrd		*
  7478  0008CC  50F5               	movf	tablat,w,c
  7479  0008CE  0900               	iorlw	0
  7480  0008D0  B4D8               	btfsc	status,2,c
  7481  0008D2  D002               	goto	l5850
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;GestioLCD.c: 114:     length1++;
  7485  0008D4  2A10               	incf	GLCDMotor@length1^0,f,c
  7486                           
  7487                           ;GestioLCD.c: 115:    }
  7488  0008D6  0012               	return	
  7489  0008D8                     l5850:
  7490                           
  7491                           ; BSR set to: 0
  7492  0008D8  0E04               	movlw	4
  7493  0008DA  6017               	cpfslt	_menuDaltGLCD^0,c
  7494  0008DC  0012               	return	
  7495                           
  7496                           ; BSR set to: 0
  7497  0008DE  5017               	movf	_menuDaltGLCD^0,w,c
  7498  0008E0  0D1D               	mullw	29
  7499  0008E2  50F3               	movf	243,w,c
  7500  0008E4  0F01               	addlw	low _menuList
  7501  0008E6  2410               	addwf	GLCDMotor@length1^0,w,c
  7502  0008E8  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7503  0008EA  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7504  0008EE                     	if	1	;There is more than 1 active tblptr byte
  7505  0008EE  0E02               	movlw	high __smallconst
  7506  0008F0  6EF7               	movwf	tblptrh,c
  7507  0008F2                     	endif
  7508  0008F2                     	if	0	;tblptru may be non-zero
  7509  0008F2                     	endif
  7510  0008F2                     	if	0	;tblptru may be non-zero
  7511  0008F2                     	endif
  7512  0008F2  0008               	tblrd		*
  7513  0008F4  50F5               	movf	tablat,w,c
  7514  0008F6  0900               	iorlw	0
  7515  0008F8  A4D8               	btfss	status,2,c
  7516  0008FA  0012               	return	
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;GestioLCD.c: 117:     state = 13;
  7520  0008FC  0E0D               	movlw	13
  7521  0008FE  6E16               	movwf	GLCDMotor@state^0,c
  7522  000900  0012               	return	
  7523  000902                     l5856:
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;GestioLCD.c: 121:    if (length2 < 17 && ferMenu == 1) {
  7527  000902  0E11               	movlw	17
  7528  000904  600F               	cpfslt	GLCDMotor@length2^0,c
  7529  000906  D01A               	goto	l5866
  7530                           
  7531                           ; BSR set to: 0
  7532  000908  AA78               	btfss	(_ferMenu/(0+8))^0,_ferMenu& (0+7),c
  7533  00090A  D018               	goto	l5866
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;GestioLCD.c: 122:     LcGotoXY(0,1);
  7537  00090C  0E01               	movlw	1
  7538  00090E  6E70               	movwf	LcGotoXY@Row^0,c
  7539  000910  0E00               	movlw	0
  7540  000912  EC6C  F00C         	call	_LcGotoXY
  7541                           
  7542                           ;GestioLCD.c: 123:     LcNewString(menuList[menuDaltGLCD+1]);
  7543  000916  5017               	movf	_menuDaltGLCD^0,w,c
  7544  000918  0D1D               	mullw	29
  7545  00091A  CFF3 F0C0          	movff	prodl,??_GLCDMotor
  7546  00091E  0E1D               	movlw	29
  7547  000920  0100               	movlb	0	; () banked
  7548  000922  27C0               	addwf	??_GLCDMotor& (0+255),f,b
  7549  000924  51C0               	movf	??_GLCDMotor& (0+255),w,b
  7550  000926  0F01               	addlw	low _menuList
  7551  000928  6FC1               	movwf	(??_GLCDMotor+1)& (0+255),b
  7552  00092A  C0C1  F06B         	movff	??_GLCDMotor+1,LcNewString@new_s
  7553  00092E  506B               	movf	LcNewString@new_s^0,w,c
  7554  000930  A4D8               	btfss	status,2,c
  7555  000932  0E02               	movlw	high __smallconst
  7556  000934  6E6C               	movwf	(LcNewString@new_s+1)^0,c
  7557  000936  EC0A  F00E         	call	_LcNewString	;wreg free
  7558  00093A  D718               	goto	u5510
  7559  00093C                     l5866:
  7560                           
  7561                           ; BSR set to: 0
  7562  00093C  0E10               	movlw	16
  7563  00093E  640F               	cpfsgt	GLCDMotor@length2^0,c
  7564  000940  0012               	return	
  7565                           
  7566                           ; BSR set to: 0
  7567  000942  AA78               	btfss	(_ferMenu/(0+8))^0,_ferMenu& (0+7),c
  7568  000944  0012               	return	
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;GestioLCD.c: 127:     state = 9;
  7572  000946  0E09               	movlw	9
  7573  000948  6E16               	movwf	GLCDMotor@state^0,c
  7574  00094A  0012               	return	
  7575  00094C                     l5872:
  7576                           
  7577                           ; BSR set to: 0
  7578                           ;GestioLCD.c: 131:    if (j<16) {
  7579  00094C  0E10               	movlw	16
  7580  00094E  6015               	cpfslt	GLCDMotor@j^0,c
  7581  000950  D02D               	goto	l5886
  7582                           
  7583                           ; BSR set to: 0
  7584                           ;GestioLCD.c: 132:     LcGotoXY(j,1);
  7585  000952  0E01               	movlw	1
  7586  000954  6E70               	movwf	LcGotoXY@Row^0,c
  7587  000956  5015               	movf	GLCDMotor@j^0,w,c
  7588  000958  EC6C  F00C         	call	_LcGotoXY
  7589                           
  7590                           ;GestioLCD.c: 133:     LcPutChar(menuList[menuDaltGLCD+1][k2]);
  7591  00095C  5017               	movf	_menuDaltGLCD^0,w,c
  7592  00095E  0D1D               	mullw	29
  7593  000960  50F3               	movf	243,w,c
  7594  000962  0F01               	addlw	low _menuList
  7595  000964  2411               	addwf	GLCDMotor@k2^0,w,c
  7596  000966  0100               	movlb	0	; () banked
  7597  000968  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7598  00096A  0E1D               	movlw	29
  7599  00096C  27C0               	addwf	??_GLCDMotor& (0+255),f,b
  7600  00096E  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7601  000972                     	if	1	;There is more than 1 active tblptr byte
  7602  000972  0E02               	movlw	high __smallconst
  7603  000974  6EF7               	movwf	tblptrh,c
  7604  000976                     	endif
  7605  000976                     	if	0	;tblptru may be non-zero
  7606  000976                     	endif
  7607  000976                     	if	0	;tblptru may be non-zero
  7608  000976                     	endif
  7609  000976  0008               	tblrd		*
  7610  000978  50F5               	movf	tablat,w,c
  7611  00097A  EC00  F00C         	call	_LcPutChar
  7612                           
  7613                           ;GestioLCD.c: 134:     j++;
  7614  00097E  2A15               	incf	GLCDMotor@j^0,f,c
  7615                           
  7616                           ;GestioLCD.c: 135:     k2++;
  7617  000980  2A11               	incf	GLCDMotor@k2^0,f,c
  7618                           
  7619                           ;GestioLCD.c: 136:     if(menuList[menuDaltGLCD+1][k2] == '\0') k2 = 0;
  7620  000982  5017               	movf	_menuDaltGLCD^0,w,c
  7621  000984  0D1D               	mullw	29
  7622  000986  50F3               	movf	243,w,c
  7623  000988  0F01               	addlw	low _menuList
  7624  00098A  2411               	addwf	GLCDMotor@k2^0,w,c
  7625  00098C  0100               	movlb	0	; () banked
  7626  00098E  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7627  000990  0E1D               	movlw	29
  7628  000992  27C0               	addwf	??_GLCDMotor& (0+255),f,b
  7629  000994  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7630  000998                     	if	1	;There is more than 1 active tblptr byte
  7631  000998  0E02               	movlw	high __smallconst
  7632  00099A  6EF7               	movwf	tblptrh,c
  7633  00099C                     	endif
  7634  00099C                     	if	0	;tblptru may be non-zero
  7635  00099C                     	endif
  7636  00099C                     	if	0	;tblptru may be non-zero
  7637  00099C                     	endif
  7638  00099C  0008               	tblrd		*
  7639  00099E  50F5               	movf	tablat,w,c
  7640  0009A0  0900               	iorlw	0
  7641  0009A2  A4D8               	btfss	status,2,c
  7642  0009A4  0012               	return	
  7643                           
  7644                           ; BSR set to: 0
  7645  0009A6  0E00               	movlw	0
  7646  0009A8  6E11               	movwf	GLCDMotor@k2^0,c
  7647  0009AA  0012               	return	
  7648  0009AC                     l5886:
  7649                           
  7650                           ; BSR set to: 0
  7651  0009AC  0E0F               	movlw	15
  7652  0009AE  6415               	cpfsgt	GLCDMotor@j^0,c
  7653  0009B0  0012               	return	
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;GestioLCD.c: 139:     min2++;
  7657  0009B2  2A13               	incf	GLCDMotor@min2^0,f,c
  7658                           
  7659                           ;GestioLCD.c: 140:     max2++;
  7660  0009B4  2A53               	incf	GLCDMotor@max2^0,f,c
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;GestioLCD.c: 141:     if (menuList[menuDaltGLCD+1][max2] == '\0') max2=0;
  7664  0009B6  5017               	movf	_menuDaltGLCD^0,w,c
  7665  0009B8  0D1D               	mullw	29
  7666  0009BA  50F3               	movf	243,w,c
  7667  0009BC  0F01               	addlw	low _menuList
  7668  0009BE  2453               	addwf	GLCDMotor@max2^0,w,c
  7669  0009C0  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7670  0009C2  0E1D               	movlw	29
  7671  0009C4  27C0               	addwf	??_GLCDMotor& (0+255),f,b
  7672  0009C6  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7673  0009CA                     	if	1	;There is more than 1 active tblptr byte
  7674  0009CA  0E02               	movlw	high __smallconst
  7675  0009CC  6EF7               	movwf	tblptrh,c
  7676  0009CE                     	endif
  7677  0009CE                     	if	0	;tblptru may be non-zero
  7678  0009CE                     	endif
  7679  0009CE                     	if	0	;tblptru may be non-zero
  7680  0009CE                     	endif
  7681  0009CE  0008               	tblrd		*
  7682  0009D0  50F5               	movf	tablat,w,c
  7683  0009D2  0900               	iorlw	0
  7684  0009D4  A4D8               	btfss	status,2,c
  7685  0009D6  D002               	goto	l5894
  7686                           
  7687                           ; BSR set to: 0
  7688  0009D8  0E00               	movlw	0
  7689  0009DA  6E53               	movwf	GLCDMotor@max2^0,c
  7690  0009DC                     l5894:
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;GestioLCD.c: 142:     if (menuList[menuDaltGLCD+1][min2] == '\0') min2=0;
  7694  0009DC  5017               	movf	_menuDaltGLCD^0,w,c
  7695  0009DE  0D1D               	mullw	29
  7696  0009E0  50F3               	movf	243,w,c
  7697  0009E2  0F01               	addlw	low _menuList
  7698  0009E4  2413               	addwf	GLCDMotor@min2^0,w,c
  7699  0009E6  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7700  0009E8  0E1D               	movlw	29
  7701  0009EA  27C0               	addwf	??_GLCDMotor& (0+255),f,b
  7702  0009EC  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7703  0009F0                     	if	1	;There is more than 1 active tblptr byte
  7704  0009F0  0E02               	movlw	high __smallconst
  7705  0009F2  6EF7               	movwf	tblptrh,c
  7706  0009F4                     	endif
  7707  0009F4                     	if	0	;tblptru may be non-zero
  7708  0009F4                     	endif
  7709  0009F4                     	if	0	;tblptru may be non-zero
  7710  0009F4                     	endif
  7711  0009F4  0008               	tblrd		*
  7712  0009F6  50F5               	movf	tablat,w,c
  7713  0009F8  0900               	iorlw	0
  7714  0009FA  A4D8               	btfss	status,2,c
  7715  0009FC  D002               	goto	l842
  7716                           
  7717                           ; BSR set to: 0
  7718  0009FE  0E00               	movlw	0
  7719  000A00  6E13               	movwf	GLCDMotor@min2^0,c
  7720  000A02                     l842:
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;GestioLCD.c: 143:     j=0;
  7724  000A02  0E00               	movlw	0
  7725  000A04  6E15               	movwf	GLCDMotor@j^0,c
  7726                           
  7727                           ; BSR set to: 0
  7728                           ;GestioLCD.c: 144:     k2=min2;
  7729  000A06  C013  F011         	movff	GLCDMotor@min2,GLCDMotor@k2
  7730  000A0A  D6B0               	goto	u5510
  7731  000A0C                     l5902:
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;GestioLCD.c: 149:    if (TiGetTics(timerGLCD)>= 1205 && newString == 0 && ferMenu == 1)
      +                           {
  7735  000A0C  5018               	movf	_timerGLCD^0,w,c
  7736  000A0E  EC3C  F00D         	call	_TiGetTics
  7737  000A12  BE69               	btfsc	(?_TiGetTics+1)^0,7,c
  7738  000A14  D00E               	goto	l844
  7739  000A16  0EB5               	movlw	181
  7740  000A18  5C68               	subwf	?_TiGetTics^0,w,c
  7741  000A1A  0E04               	movlw	4
  7742  000A1C  5869               	subwfb	(?_TiGetTics+1)^0,w,c
  7743  000A1E  B0D8               	btfsc	status,0,c
  7744  000A20  B878               	btfsc	(_newString/(0+8))^0,_newString& (0+7),c
  7745  000A22  D007               	goto	l844
  7746  000A24  AA78               	btfss	(_ferMenu/(0+8))^0,_ferMenu& (0+7),c
  7747  000A26  D005               	goto	l844
  7748                           
  7749                           ;GestioLCD.c: 150:     LcClear();
  7750  000A28  EC64  F00D         	call	_LcClear	;wreg free
  7751  000A2C                     l5910:
  7752                           
  7753                           ;GestioLCD.c: 151:     state = 2;
  7754  000A2C  0E02               	movlw	2
  7755  000A2E  6E16               	movwf	GLCDMotor@state^0,c
  7756                           
  7757                           ;GestioLCD.c: 152:    }
  7758  000A30  0012               	return	
  7759  000A32                     l844:
  7760  000A32  A878               	btfss	(_newString/(0+8))^0,_newString& (0+7),c
  7761  000A34  0012               	return	
  7762  000A36  AA78               	btfss	(_ferMenu/(0+8))^0,_ferMenu& (0+7),c
  7763  000A38  0012               	return	
  7764                           
  7765                           ;GestioLCD.c: 154:     LcClear();
  7766  000A3A  EC64  F00D         	call	_LcClear	;wreg free
  7767  000A3E  D6F6               	goto	u5580
  7768  000A40                     l5918:
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;GestioLCD.c: 159:    TiResetTics(timerGLCD);
  7772  000A40  5018               	movf	_timerGLCD^0,w,c
  7773  000A42  ECB8  F00D         	call	_TiResetTics
  7774  000A46  D692               	goto	u5510
  7775  000A48                     l5922:
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;GestioLCD.c: 163:    if (LcLliure()) {
  7779  000A48  EC10  F00E         	call	_LcLliure	;wreg free
  7780  000A4C  A0D8               	btfss	status,0,c
  7781  000A4E  0012               	return	
  7782                           
  7783                           ;GestioLCD.c: 164:     TiResetTics(timerGLCD);
  7784  000A50  5018               	movf	_timerGLCD^0,w,c
  7785  000A52  ECB8  F00D         	call	_TiResetTics
  7786                           
  7787                           ;GestioLCD.c: 165:     state = 11;
  7788  000A56  0E0B               	movlw	11
  7789  000A58  6E16               	movwf	GLCDMotor@state^0,c
  7790  000A5A  0012               	return	
  7791  000A5C                     l5928:
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;GestioLCD.c: 169:    if (menuList[menuDaltGLCD+1][length2] != '\0') {
  7795  000A5C  5017               	movf	_menuDaltGLCD^0,w,c
  7796  000A5E  0D1D               	mullw	29
  7797  000A60  50F3               	movf	243,w,c
  7798  000A62  0F01               	addlw	low _menuList
  7799  000A64  240F               	addwf	GLCDMotor@length2^0,w,c
  7800  000A66  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7801  000A68  0E1D               	movlw	29
  7802  000A6A  27C0               	addwf	??_GLCDMotor& (0+255),f,b
  7803  000A6C  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7804  000A70                     	if	1	;There is more than 1 active tblptr byte
  7805  000A70  0E02               	movlw	high __smallconst
  7806  000A72  6EF7               	movwf	tblptrh,c
  7807  000A74                     	endif
  7808  000A74                     	if	0	;tblptru may be non-zero
  7809  000A74                     	endif
  7810  000A74                     	if	0	;tblptru may be non-zero
  7811  000A74                     	endif
  7812  000A74  0008               	tblrd		*
  7813  000A76  50F5               	movf	tablat,w,c
  7814  000A78  0900               	iorlw	0
  7815  000A7A  B4D8               	btfsc	status,2,c
  7816  000A7C  D002               	goto	l5932
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;GestioLCD.c: 170:     length2++;
  7820  000A7E  2A0F               	incf	GLCDMotor@length2^0,f,c
  7821                           
  7822                           ;GestioLCD.c: 171:    }
  7823  000A80  0012               	return	
  7824  000A82                     l5932:
  7825                           
  7826                           ; BSR set to: 0
  7827  000A82  5017               	movf	_menuDaltGLCD^0,w,c
  7828  000A84  0D1D               	mullw	29
  7829  000A86  50F3               	movf	243,w,c
  7830  000A88  0F01               	addlw	low _menuList
  7831  000A8A  240F               	addwf	GLCDMotor@length2^0,w,c
  7832  000A8C  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7833  000A8E  0E1D               	movlw	29
  7834  000A90  27C0               	addwf	??_GLCDMotor& (0+255),f,b
  7835  000A92  C0C0  FFF6         	movff	??_GLCDMotor,tblptrl
  7836  000A96                     	if	1	;There is more than 1 active tblptr byte
  7837  000A96  0E02               	movlw	high __smallconst
  7838  000A98  6EF7               	movwf	tblptrh,c
  7839  000A9A                     	endif
  7840  000A9A                     	if	0	;tblptru may be non-zero
  7841  000A9A                     	endif
  7842  000A9A                     	if	0	;tblptru may be non-zero
  7843  000A9A                     	endif
  7844  000A9A  0008               	tblrd		*
  7845  000A9C  50F5               	movf	tablat,w,c
  7846  000A9E  0900               	iorlw	0
  7847  000AA0  A4D8               	btfss	status,2,c
  7848  000AA2  0012               	return	
  7849  000AA4  D7C3               	goto	l5910
  7850  000AA6                     l5938:
  7851  000AA6  5016               	movf	GLCDMotor@state^0,w,c
  7852  000AA8  0100               	movlb	0	; () banked
  7853  000AAA  6FC0               	movwf	??_GLCDMotor& (0+255),b
  7854  000AAC  6BC1               	clrf	(??_GLCDMotor+1)& (0+255),b
  7855                           
  7856                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7857                           ; Switch size 1, requested type "simple"
  7858                           ; Number of cases is 1, Range of values is 0 to 0
  7859                           ; switch strategies available:
  7860                           ; Name         Instructions Cycles
  7861                           ; simple_byte            4     3 (average)
  7862                           ;	Chosen strategy is simple_byte
  7863  000AAE  51C1               	movf	(??_GLCDMotor+1)& (0+255),w,b
  7864  000AB0  0A00               	xorlw	0	; case 0
  7865  000AB2  A4D8               	btfss	status,2,c
  7866  000AB4  0012               	return	
  7867                           
  7868                           ; BSR set to: 0
  7869                           ; Switch size 1, requested type "simple"
  7870                           ; Number of cases is 12, Range of values is 0 to 13
  7871                           ; switch strategies available:
  7872                           ; Name         Instructions Cycles
  7873                           ; simple_byte           37    19 (average)
  7874                           ;	Chosen strategy is simple_byte
  7875  000AB6  51C0               	movf	??_GLCDMotor& (0+255),w,b
  7876  000AB8  0A00               	xorlw	0	; case 0
  7877  000ABA  B4D8               	btfsc	status,2,c
  7878  000ABC  D6CC               	goto	l824
  7879  000ABE  0A01               	xorlw	1	; case 1
  7880  000AC0  B4D8               	btfsc	status,2,c
  7881  000AC2  D6E6               	goto	l5840
  7882  000AC4  0A03               	xorlw	3	; case 2
  7883  000AC6  B4D8               	btfsc	status,2,c
  7884  000AC8  D631               	goto	l5752
  7885  000ACA  0A01               	xorlw	1	; case 3
  7886  000ACC  B4D8               	btfsc	status,2,c
  7887  000ACE  D650               	goto	l5768
  7888  000AD0  0A06               	xorlw	6	; case 5
  7889  000AD2  B4D8               	btfsc	status,2,c
  7890  000AD4  D6AE               	goto	l5804
  7891  000AD6  0A03               	xorlw	3	; case 6
  7892  000AD8  B4D8               	btfsc	status,2,c
  7893  000ADA  D6A4               	goto	l5796
  7894  000ADC  0A01               	xorlw	1	; case 7
  7895  000ADE  B4D8               	btfsc	status,2,c
  7896  000AE0  D710               	goto	l5856
  7897  000AE2  0A0F               	xorlw	15	; case 8
  7898  000AE4  B4D8               	btfsc	status,2,c
  7899  000AE6  D7B0               	goto	l5922
  7900  000AE8  0A01               	xorlw	1	; case 9
  7901  000AEA  B4D8               	btfsc	status,2,c
  7902  000AEC  D72F               	goto	l5872
  7903  000AEE  0A03               	xorlw	3	; case 10
  7904  000AF0  B4D8               	btfsc	status,2,c
  7905  000AF2  D7A6               	goto	l5918
  7906  000AF4  0A01               	xorlw	1	; case 11
  7907  000AF6  B4D8               	btfsc	status,2,c
  7908  000AF8  D789               	goto	l5902
  7909  000AFA  0A06               	xorlw	6	; case 13
  7910  000AFC  A4D8               	btfss	status,2,c
  7911  000AFE  0012               	return	
  7912  000B00  D7AD               	goto	l5928
  7913  000B02                     __end_of_GLCDMotor:
  7914                           	callstack 0
  7915                           
  7916 ;; *************** function _LcPutChar *****************
  7917 ;; Defined at:
  7918 ;;		line 134 in file "LcTLCD.c"
  7919 ;; Parameters:    Size  Location     Type
  7920 ;;  c               1    wreg     unsigned char 
  7921 ;; Auto vars:     Size  Location     Type
  7922 ;;  c               1   19[COMRAM] unsigned char 
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  1    wreg      void 
  7925 ;; Registers used:
  7926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1
  7932 ;;      Params:         0       0       0
  7933 ;;      Locals:         1       0       0
  7934 ;;      Temps:          0       0       0
  7935 ;;      Totals:         1       0       0
  7936 ;;Total ram usage:        1 bytes
  7937 ;; Hardware stack levels used: 1
  7938 ;; Hardware stack levels required when called: 5
  7939 ;; This function calls:
  7940 ;;		_CantaData
  7941 ;;		_LcGotoXY
  7942 ;;		_WaitForBusy
  7943 ;; This function is called by:
  7944 ;;		_LcLCD
  7945 ;;		_menu
  7946 ;;		_GLCDMotor
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950                           	psect	text58
  7951  001800                     __ptext58:
  7952                           	callstack 0
  7953  001800                     _LcPutChar:
  7954                           	callstack 24
  7955                           
  7956                           ;incstack = 0
  7957                           ;LcPutChar@c stored from wreg
  7958  001800  6E76               	movwf	LcPutChar@c^0,c
  7959                           
  7960                           ;LcTLCD.c: 136:  WaitForBusy(); CantaData(c);
  7961  001802  EC4C  F00C         	call	_WaitForBusy	;wreg free
  7962  001806  5076               	movf	LcPutChar@c^0,w,c
  7963  001808  ECDD  F00C         	call	_CantaData
  7964                           
  7965                           ;LcTLCD.c: 138:  ++ColumnAct;
  7966  00180C  2A32               	incf	_ColumnAct^0,f,c
  7967                           
  7968                           ;LcTLCD.c: 140:  if (Rows == 2) {
  7969  00180E  0E02               	movlw	2
  7970  001810  1835               	xorwf	_Rows^0,w,c
  7971  001812  A4D8               	btfss	status,2,c
  7972  001814  D010               	goto	l3826
  7973                           
  7974                           ;LcTLCD.c: 141:   if (ColumnAct >= 40) {
  7975  001816  0E27               	movlw	39
  7976  001818  6432               	cpfsgt	_ColumnAct^0,c
  7977  00181A  D00D               	goto	l3826
  7978                           
  7979                           ;LcTLCD.c: 142:    ColumnAct = 0;
  7980  00181C  0E00               	movlw	0
  7981  00181E  6E32               	movwf	_ColumnAct^0,c
  7982                           
  7983                           ;LcTLCD.c: 143:    if (++RowAct >= 2) RowAct = 0;
  7984  001820  2A33               	incf	_RowAct^0,f,c
  7985  001822  0E01               	movlw	1
  7986  001824  6433               	cpfsgt	_RowAct^0,c
  7987  001826  D002               	goto	l3824
  7988  001828  0E00               	movlw	0
  7989  00182A  6E33               	movwf	_RowAct^0,c
  7990  00182C                     l3824:
  7991                           
  7992                           ;LcTLCD.c: 144:    LcGotoXY(ColumnAct, RowAct);
  7993  00182C  C033  F070         	movff	_RowAct,LcGotoXY@Row
  7994  001830  5032               	movf	_ColumnAct^0,w,c
  7995  001832  EC6C  F00C         	call	_LcGotoXY
  7996  001836                     l3826:
  7997                           
  7998                           ;LcTLCD.c: 155:  if (RowAct == 1) {
  7999  001836  0433               	decf	_RowAct^0,w,c
  8000  001838  A4D8               	btfss	status,2,c
  8001  00183A  0012               	return	
  8002                           
  8003                           ;LcTLCD.c: 156:   if (ColumnAct >= 40) ColumnAct = 0;
  8004  00183C  0E27               	movlw	39
  8005  00183E  6432               	cpfsgt	_ColumnAct^0,c
  8006  001840  D002               	goto	l3832
  8007  001842  0E00               	movlw	0
  8008  001844  6E32               	movwf	_ColumnAct^0,c
  8009  001846                     l3832:
  8010                           
  8011                           ;LcTLCD.c: 157:   LcGotoXY(ColumnAct, RowAct);
  8012  001846  C033  F070         	movff	_RowAct,LcGotoXY@Row
  8013  00184A  5032               	movf	_ColumnAct^0,w,c
  8014  00184C  EC6C  F00C         	call	_LcGotoXY
  8015  001850  0012               	return		;funcret
  8016  001852                     __end_of_LcPutChar:
  8017                           	callstack 0
  8018                           
  8019 ;; *************** function _CantaData *****************
  8020 ;; Defined at:
  8021 ;;		line 196 in file "LcTLCD.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  Data            1    wreg     unsigned char 
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;  Data            1    7[COMRAM] unsigned char 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  1    wreg      void 
  8028 ;; Registers used:
  8029 ;;		wreg, status,2, status,0, cstack
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMRAM   BANK0   BANK1
  8035 ;;      Params:         0       0       0
  8036 ;;      Locals:         1       0       0
  8037 ;;      Temps:          0       0       0
  8038 ;;      Totals:         1       0       0
  8039 ;;Total ram usage:        1 bytes
  8040 ;; Hardware stack levels used: 1
  8041 ;; Hardware stack levels required when called: 3
  8042 ;; This function calls:
  8043 ;;		_CantaPartAlta
  8044 ;;		_CantaPartBaixa
  8045 ;; This function is called by:
  8046 ;;		_LcPutChar
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           	psect	text59
  8051  0019BA                     __ptext59:
  8052                           	callstack 0
  8053  0019BA                     _CantaData:
  8054                           	callstack 25
  8055                           
  8056                           ;incstack = 0
  8057                           ;CantaData@Data stored from wreg
  8058  0019BA  6E6A               	movwf	CantaData@Data^0,c
  8059                           
  8060                           ;LcTLCD.c: 197:  (TRISCbits.TRISC0 = TRISCbits.TRISC1 = TRISCbits.TRISC2 = TRISCbits.TRI
      +                          SC3 = 0);
  8061  0019BC  9694               	bcf	148,3,c	;volatile
  8062  0019BE  9494               	bcf	148,2,c	;volatile
  8063  0019C0  9294               	bcf	148,1,c	;volatile
  8064  0019C2  9094               	bcf	148,0,c	;volatile
  8065                           
  8066                           ;LcTLCD.c: 198:  (LATCbits.LATC5 = 1);
  8067  0019C4  8A8B               	bsf	139,5,c	;volatile
  8068                           
  8069                           ;LcTLCD.c: 199:  (LATDbits.LATD7 = 0);
  8070  0019C6  9E8C               	bcf	140,7,c	;volatile
  8071                           
  8072                           ;LcTLCD.c: 200:  (LATCbits.LATC4 = 1);
  8073  0019C8  888B               	bsf	139,4,c	;volatile
  8074                           
  8075                           ;LcTLCD.c: 201:  CantaPartAlta(Data);
  8076  0019CA  506A               	movf	CantaData@Data^0,w,c
  8077  0019CC  EC70  F00B         	call	_CantaPartAlta
  8078                           
  8079                           ;LcTLCD.c: 202:  (LATCbits.LATC4 = 1);
  8080  0019D0  888B               	bsf	139,4,c	;volatile
  8081                           
  8082                           ;LcTLCD.c: 203:  (LATCbits.LATC4 = 0);
  8083  0019D2  988B               	bcf	139,4,c	;volatile
  8084                           
  8085                           ;LcTLCD.c: 204:  (LATCbits.LATC4 = 0);
  8086  0019D4  988B               	bcf	139,4,c	;volatile
  8087                           
  8088                           ;LcTLCD.c: 205:  (LATCbits.LATC4 = 1);
  8089  0019D6  888B               	bsf	139,4,c	;volatile
  8090                           
  8091                           ;LcTLCD.c: 206:  CantaPartBaixa(Data);
  8092  0019D8  506A               	movf	CantaData@Data^0,w,c
  8093  0019DA  EC3C  F00B         	call	_CantaPartBaixa
  8094                           
  8095                           ;LcTLCD.c: 207:  (LATCbits.LATC4 = 1);
  8096  0019DE  888B               	bsf	139,4,c	;volatile
  8097                           
  8098                           ;LcTLCD.c: 208:  (LATCbits.LATC4 = 0);
  8099  0019E0  988B               	bcf	139,4,c	;volatile
  8100                           
  8101                           ;LcTLCD.c: 209:  (TRISCbits.TRISC0 = TRISCbits.TRISC1 = TRISCbits.TRISC2 = TRISCbits.TRI
      +                          SC3 = 1);
  8102  0019E2  8694               	bsf	148,3,c	;volatile
  8103  0019E4  8494               	bsf	148,2,c	;volatile
  8104  0019E6  8294               	bsf	148,1,c	;volatile
  8105  0019E8  8094               	bsf	148,0,c	;volatile
  8106  0019EA  0012               	return		;funcret
  8107  0019EC                     __end_of_CantaData:
  8108                           	callstack 0
  8109                           
  8110 ;; *************** function _LcNewString *****************
  8111 ;; Defined at:
  8112 ;;		line 241 in file "LcTLCD.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;  new_s           2    8[COMRAM] PTR unsigned char 
  8115 ;;		 -> hora(6), menuList(145), usuaris.username(9), usuaris(184), 
  8116 ;;		 -> STR_5(16), STR_4(13), STR_3(9), STR_2(7), 
  8117 ;;		 -> STR_1(7), registerText(11), loginText(8), 
  8118 ;; Auto vars:     Size  Location     Type
  8119 ;;		None
  8120 ;; Return value:  Size  Location     Type
  8121 ;;                  1    wreg      void 
  8122 ;; Registers used:
  8123 ;;		wreg, status,2, status,0
  8124 ;; Tracked objects:
  8125 ;;		On entry : 0/1
  8126 ;;		On exit  : 0/0
  8127 ;;		Unchanged: 0/0
  8128 ;; Data sizes:     COMRAM   BANK0   BANK1
  8129 ;;      Params:         2       0       0
  8130 ;;      Locals:         0       0       0
  8131 ;;      Temps:          0       0       0
  8132 ;;      Totals:         2       0       0
  8133 ;;Total ram usage:        2 bytes
  8134 ;; Hardware stack levels used: 1
  8135 ;; Hardware stack levels required when called: 2
  8136 ;; This function calls:
  8137 ;;		Nothing
  8138 ;; This function is called by:
  8139 ;;		_menu
  8140 ;;		_GLCDMotor
  8141 ;;		_motorJoc
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           	psect	text60
  8146  001C14                     __ptext60:
  8147                           	callstack 0
  8148  001C14                     _LcNewString:
  8149                           	callstack 27
  8150                           
  8151                           ;LcTLCD.c: 242:     s_ptr = new_s;
  8152                           
  8153                           ;incstack = 0
  8154  001C14  C06B  F005         	movff	LcNewString@new_s,_s_ptr
  8155  001C18  C06C  F006         	movff	LcNewString@new_s+1,_s_ptr+1
  8156                           
  8157                           ;LcTLCD.c: 243:     nou_s = 1;
  8158  001C1C  8879               	bsf	(_nou_s/(0+8))^0,_nou_s& (0+7),c
  8159  001C1E  0012               	return		;funcret
  8160  001C20                     __end_of_LcNewString:
  8161                           	callstack 0
  8162                           
  8163 ;; *************** function _LcLliure *****************
  8164 ;; Defined at:
  8165 ;;		line 257 in file "LcTLCD.c"
  8166 ;; Parameters:    Size  Location     Type
  8167 ;;		None
  8168 ;; Auto vars:     Size  Location     Type
  8169 ;;		None
  8170 ;; Return value:  Size  Location     Type
  8171 ;;		None               void
  8172 ;; Registers used:
  8173 ;;		status,0
  8174 ;; Tracked objects:
  8175 ;;		On entry : 0/1
  8176 ;;		On exit  : 0/0
  8177 ;;		Unchanged: 0/0
  8178 ;; Data sizes:     COMRAM   BANK0   BANK1
  8179 ;;      Params:         0       0       0
  8180 ;;      Locals:         0       0       0
  8181 ;;      Temps:          0       0       0
  8182 ;;      Totals:         0       0       0
  8183 ;;Total ram usage:        0 bytes
  8184 ;; Hardware stack levels used: 1
  8185 ;; Hardware stack levels required when called: 2
  8186 ;; This function calls:
  8187 ;;		Nothing
  8188 ;; This function is called by:
  8189 ;;		_menu
  8190 ;;		_GLCDMotor
  8191 ;;		_motorJoc
  8192 ;; This function uses a non-reentrant model
  8193 ;;
  8194                           
  8195                           	psect	text61
  8196  001C20                     __ptext61:
  8197                           	callstack 0
  8198  001C20                     _LcLliure:
  8199                           	callstack 27
  8200                           
  8201                           ;LcTLCD.c: 258:     return !nou_s;
  8202                           
  8203                           ;incstack = 0
  8204  001C20  A879               	btfss	(_nou_s/(0+8))^0,_nou_s& (0+7),c
  8205  001C22  D002               	goto	l3842
  8206  001C24  90D8               	bcf	status,0,c
  8207  001C26  0012               	return	
  8208  001C28                     l3842:
  8209  001C28  80D8               	bsf	status,0,c
  8210  001C2A  0012               	return		;funcret
  8211  001C2C                     __end_of_LcLliure:
  8212                           	callstack 0
  8213                           
  8214 ;; *************** function _LcClear *****************
  8215 ;; Defined at:
  8216 ;;		line 84 in file "LcTLCD.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;		None
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;		None
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      void 
  8223 ;; Registers used:
  8224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMRAM   BANK0   BANK1
  8230 ;;      Params:         0       0       0
  8231 ;;      Locals:         0       0       0
  8232 ;;      Temps:          0       0       0
  8233 ;;      Totals:         0       0       0
  8234 ;;Total ram usage:        0 bytes
  8235 ;; Hardware stack levels used: 1
  8236 ;; Hardware stack levels required when called: 5
  8237 ;; This function calls:
  8238 ;;		_CantaIR
  8239 ;;		_Espera
  8240 ;;		_LcGotoXY
  8241 ;;		_WaitForBusy
  8242 ;; This function is called by:
  8243 ;;		_menu
  8244 ;;		_GLCDMotor
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248                           	psect	text62
  8249  001AC8                     __ptext62:
  8250                           	callstack 0
  8251  001AC8                     _LcClear:
  8252                           	callstack 24
  8253                           
  8254                           ;LcTLCD.c: 87:  WaitForBusy(); CantaIR(0x01);
  8255                           
  8256                           ;incstack = 0
  8257  001AC8  EC4C  F00C         	call	_WaitForBusy	;wreg free
  8258  001ACC  0E01               	movlw	1
  8259  001ACE  ECF6  F00C         	call	_CantaIR
  8260                           
  8261                           ;LcTLCD.c: 88:  Espera(Timer, 3);
  8262  001AD2  0E00               	movlw	0
  8263  001AD4  6E70               	movwf	(Espera@ms+1)^0,c
  8264  001AD6  0E03               	movlw	3
  8265  001AD8  6E6F               	movwf	Espera@ms^0,c
  8266  001ADA  5031               	movf	_Timer^0,w,c
  8267  001ADC  EC76  F00D         	call	_Espera
  8268                           
  8269                           ;LcTLCD.c: 89:     LcGotoXY(0,0);
  8270  001AE0  0E00               	movlw	0
  8271  001AE2  6E70               	movwf	LcGotoXY@Row^0,c
  8272  001AE4  0E00               	movlw	0
  8273  001AE6  EC6C  F00C         	call	_LcGotoXY
  8274  001AEA  0012               	return		;funcret
  8275  001AEC                     __end_of_LcClear:
  8276                           	callstack 0
  8277                           
  8278 ;; *************** function _LcGotoXY *****************
  8279 ;; Defined at:
  8280 ;;		line 106 in file "LcTLCD.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;  Column          1    wreg     unsigned char 
  8283 ;;  Row             1   13[COMRAM] unsigned char 
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;  Column          1   18[COMRAM] unsigned char 
  8286 ;;  Fisics          2   14[COMRAM] int 
  8287 ;; Return value:  Size  Location     Type
  8288 ;;                  1    wreg      void 
  8289 ;; Registers used:
  8290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/1
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMRAM   BANK0   BANK1
  8296 ;;      Params:         1       0       0
  8297 ;;      Locals:         5       0       0
  8298 ;;      Temps:          0       0       0
  8299 ;;      Totals:         6       0       0
  8300 ;;Total ram usage:        6 bytes
  8301 ;; Hardware stack levels used: 1
  8302 ;; Hardware stack levels required when called: 4
  8303 ;; This function calls:
  8304 ;;		_CantaIR
  8305 ;;		_WaitForBusy
  8306 ;; This function is called by:
  8307 ;;		_LcClear
  8308 ;;		_LcPutChar
  8309 ;;		_menu
  8310 ;;		_GLCDMotor
  8311 ;;		_motorJoc
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           	psect	text63
  8316  0018D8                     __ptext63:
  8317                           	callstack 0
  8318  0018D8                     _LcGotoXY:
  8319                           	callstack 25
  8320                           
  8321                           ;incstack = 0
  8322                           ;LcGotoXY@Column stored from wreg
  8323  0018D8  6E75               	movwf	LcGotoXY@Column^0,c
  8324                           
  8325                           ;LcTLCD.c: 110:  int Fisics;;LcTLCD.c: 114:    Fisics = Column + (!Row ? 0 : 0x40);
  8326  0018DA  5070               	movf	LcGotoXY@Row^0,w,c
  8327  0018DC  B4D8               	btfsc	status,2,c
  8328  0018DE  D004               	goto	l3752
  8329  0018E0  0E00               	movlw	0
  8330  0018E2  6E74               	movwf	(_LcGotoXY$336+1)^0,c
  8331  0018E4  0E40               	movlw	64
  8332  0018E6  D003               	goto	L9
  8333  0018E8                     l3752:
  8334  0018E8  0E00               	movlw	0
  8335  0018EA  6E74               	movwf	(_LcGotoXY$336+1)^0,c
  8336  0018EC  0E00               	movlw	0
  8337  0018EE                     L9:
  8338  0018EE  6E73               	movwf	_LcGotoXY$336^0,c
  8339  0018F0  5075               	movf	LcGotoXY@Column^0,w,c
  8340  0018F2  2473               	addwf	_LcGotoXY$336^0,w,c
  8341  0018F4  6E71               	movwf	LcGotoXY@Fisics^0,c
  8342  0018F6  0E00               	movlw	0
  8343  0018F8  2074               	addwfc	(_LcGotoXY$336+1)^0,w,c
  8344  0018FA  6E72               	movwf	(LcGotoXY@Fisics+1)^0,c
  8345                           
  8346                           ;LcTLCD.c: 127:  WaitForBusy();
  8347  0018FC  EC4C  F00C         	call	_WaitForBusy	;wreg free
  8348                           
  8349                           ;LcTLCD.c: 128:  CantaIR(0x80 | Fisics);
  8350  001900  5071               	movf	LcGotoXY@Fisics^0,w,c
  8351  001902  0980               	iorlw	128
  8352  001904  ECF6  F00C         	call	_CantaIR
  8353                           
  8354                           ;LcTLCD.c: 130:  RowAct = Row;
  8355  001908  C070  F033         	movff	LcGotoXY@Row,_RowAct
  8356                           
  8357                           ;LcTLCD.c: 131:  ColumnAct = Column;
  8358  00190C  C075  F032         	movff	LcGotoXY@Column,_ColumnAct
  8359  001910  0012               	return		;funcret
  8360  001912                     __end_of_LcGotoXY:
  8361                           	callstack 0
  8362                           
  8363 ;; *************** function _WaitForBusy *****************
  8364 ;; Defined at:
  8365 ;;		line 212 in file "LcTLCD.c"
  8366 ;; Parameters:    Size  Location     Type
  8367 ;;		None
  8368 ;; Auto vars:     Size  Location     Type
  8369 ;;  Busy            1   12[COMRAM] unsigned char 
  8370 ;; Return value:  Size  Location     Type
  8371 ;;                  1    wreg      void 
  8372 ;; Registers used:
  8373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8374 ;; Tracked objects:
  8375 ;;		On entry : 0/0
  8376 ;;		On exit  : 0/0
  8377 ;;		Unchanged: 0/0
  8378 ;; Data sizes:     COMRAM   BANK0   BANK1
  8379 ;;      Params:         0       0       0
  8380 ;;      Locals:         1       0       0
  8381 ;;      Temps:          0       0       0
  8382 ;;      Totals:         1       0       0
  8383 ;;Total ram usage:        1 bytes
  8384 ;; Hardware stack levels used: 1
  8385 ;; Hardware stack levels required when called: 3
  8386 ;; This function calls:
  8387 ;;		_TiGetTics
  8388 ;;		_TiResetTics
  8389 ;; This function is called by:
  8390 ;;		_LcInit
  8391 ;;		_LcClear
  8392 ;;		_LcGotoXY
  8393 ;;		_LcPutChar
  8394 ;; This function uses a non-reentrant model
  8395 ;;
  8396                           
  8397                           	psect	text64
  8398  001898                     __ptext64:
  8399                           	callstack 0
  8400  001898                     _WaitForBusy:
  8401                           	callstack 25
  8402                           
  8403                           ;LcTLCD.c: 213:  (TRISCbits.TRISC0 = TRISCbits.TRISC1 = TRISCbits.TRISC2 = TRISCbits.TRI
      +                          SC3 = 1);
  8404                           
  8405                           ;incstack = 0
  8406  001898  8694               	bsf	148,3,c	;volatile
  8407  00189A  8494               	bsf	148,2,c	;volatile
  8408  00189C  8294               	bsf	148,1,c	;volatile
  8409  00189E  8094               	bsf	148,0,c	;volatile
  8410                           
  8411                           ;LcTLCD.c: 214:  (LATCbits.LATC5 = 0);
  8412  0018A0  9A8B               	bcf	139,5,c	;volatile
  8413                           
  8414                           ;LcTLCD.c: 215:  (LATDbits.LATD7 = 1);
  8415  0018A2  8E8C               	bsf	140,7,c	;volatile
  8416                           
  8417                           ;LcTLCD.c: 216:  TiResetTics(Timer);
  8418  0018A4  5031               	movf	_Timer^0,w,c
  8419  0018A6  ECB8  F00D         	call	_TiResetTics
  8420  0018AA                     l3720:
  8421                           
  8422                           ;LcTLCD.c: 218:   (LATCbits.LATC4 = 1);(LATCbits.LATC4 = 1);
  8423  0018AA  888B               	bsf	139,4,c	;volatile
  8424  0018AC  888B               	bsf	139,4,c	;volatile
  8425                           
  8426                           ;LcTLCD.c: 219:   Busy = (PORTCbits.RC3);
  8427  0018AE  0E00               	movlw	0
  8428  0018B0  B682               	btfsc	130,3,c	;volatile
  8429  0018B2  0E01               	movlw	1
  8430  0018B4  6E6F               	movwf	WaitForBusy@Busy^0,c
  8431                           
  8432                           ;LcTLCD.c: 220:   (LATCbits.LATC4 = 0);
  8433  0018B6  988B               	bcf	139,4,c	;volatile
  8434                           
  8435                           ;LcTLCD.c: 221:   (LATCbits.LATC4 = 0);
  8436  0018B8  988B               	bcf	139,4,c	;volatile
  8437                           
  8438                           ;LcTLCD.c: 222:   (LATCbits.LATC4 = 1);(LATCbits.LATC4 = 1);
  8439  0018BA  888B               	bsf	139,4,c	;volatile
  8440  0018BC  888B               	bsf	139,4,c	;volatile
  8441                           
  8442                           ;LcTLCD.c: 224:   (LATCbits.LATC4 = 0);
  8443  0018BE  988B               	bcf	139,4,c	;volatile
  8444                           
  8445                           ;LcTLCD.c: 225:   (LATCbits.LATC4 = 0);
  8446  0018C0  988B               	bcf	139,4,c	;volatile
  8447                           
  8448                           ;LcTLCD.c: 226:   if (TiGetTics(Timer)) break;
  8449  0018C2  5031               	movf	_Timer^0,w,c
  8450  0018C4  EC3C  F00D         	call	_TiGetTics
  8451  0018C8  5068               	movf	?_TiGetTics^0,w,c
  8452  0018CA  1069               	iorwf	(?_TiGetTics+1)^0,w,c
  8453  0018CC  A4D8               	btfss	status,2,c
  8454  0018CE  0012               	return	
  8455                           
  8456                           ;LcTLCD.c: 227:  } while(Busy);
  8457  0018D0  506F               	movf	WaitForBusy@Busy^0,w,c
  8458  0018D2  B4D8               	btfsc	status,2,c
  8459  0018D4  0012               	return	
  8460  0018D6  D7E9               	goto	l3720
  8461  0018D8                     __end_of_WaitForBusy:
  8462                           	callstack 0
  8463                           
  8464 ;; *************** function _CantaIR *****************
  8465 ;; Defined at:
  8466 ;;		line 180 in file "LcTLCD.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;  IR              1    wreg     unsigned char 
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;  IR              1    7[COMRAM] unsigned char 
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  1    wreg      void 
  8473 ;; Registers used:
  8474 ;;		wreg, status,2, status,0, cstack
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMRAM   BANK0   BANK1
  8480 ;;      Params:         0       0       0
  8481 ;;      Locals:         1       0       0
  8482 ;;      Temps:          0       0       0
  8483 ;;      Totals:         1       0       0
  8484 ;;Total ram usage:        1 bytes
  8485 ;; Hardware stack levels used: 1
  8486 ;; Hardware stack levels required when called: 3
  8487 ;; This function calls:
  8488 ;;		_CantaPartAlta
  8489 ;;		_CantaPartBaixa
  8490 ;; This function is called by:
  8491 ;;		_LcInit
  8492 ;;		_LcClear
  8493 ;;		_LcGotoXY
  8494 ;; This function uses a non-reentrant model
  8495 ;;
  8496                           
  8497                           	psect	text65
  8498  0019EC                     __ptext65:
  8499                           	callstack 0
  8500  0019EC                     _CantaIR:
  8501                           	callstack 25
  8502                           
  8503                           ;incstack = 0
  8504                           ;CantaIR@IR stored from wreg
  8505  0019EC  6E6A               	movwf	CantaIR@IR^0,c
  8506                           
  8507                           ;LcTLCD.c: 181:  (TRISCbits.TRISC0 = TRISCbits.TRISC1 = TRISCbits.TRISC2 = TRISCbits.TRI
      +                          SC3 = 0);
  8508  0019EE  9694               	bcf	148,3,c	;volatile
  8509  0019F0  9494               	bcf	148,2,c	;volatile
  8510  0019F2  9294               	bcf	148,1,c	;volatile
  8511  0019F4  9094               	bcf	148,0,c	;volatile
  8512                           
  8513                           ;LcTLCD.c: 182:  (LATCbits.LATC5 = 0);
  8514  0019F6  9A8B               	bcf	139,5,c	;volatile
  8515                           
  8516                           ;LcTLCD.c: 183:  (LATDbits.LATD7 = 0);
  8517  0019F8  9E8C               	bcf	140,7,c	;volatile
  8518                           
  8519                           ;LcTLCD.c: 184:  (LATCbits.LATC4 = 1);
  8520  0019FA  888B               	bsf	139,4,c	;volatile
  8521                           
  8522                           ;LcTLCD.c: 185:  CantaPartAlta(IR);
  8523  0019FC  506A               	movf	CantaIR@IR^0,w,c
  8524  0019FE  EC70  F00B         	call	_CantaPartAlta
  8525                           
  8526                           ;LcTLCD.c: 186:  (LATCbits.LATC4 = 1);
  8527  001A02  888B               	bsf	139,4,c	;volatile
  8528                           
  8529                           ;LcTLCD.c: 187:  (LATCbits.LATC4 = 0);
  8530  001A04  988B               	bcf	139,4,c	;volatile
  8531                           
  8532                           ;LcTLCD.c: 188:  (LATCbits.LATC4 = 0);
  8533  001A06  988B               	bcf	139,4,c	;volatile
  8534                           
  8535                           ;LcTLCD.c: 189:  (LATCbits.LATC4 = 1);
  8536  001A08  888B               	bsf	139,4,c	;volatile
  8537                           
  8538                           ;LcTLCD.c: 190:  CantaPartBaixa(IR);
  8539  001A0A  506A               	movf	CantaIR@IR^0,w,c
  8540  001A0C  EC3C  F00B         	call	_CantaPartBaixa
  8541                           
  8542                           ;LcTLCD.c: 191:  (LATCbits.LATC4 = 1);
  8543  001A10  888B               	bsf	139,4,c	;volatile
  8544                           
  8545                           ;LcTLCD.c: 192:  (LATCbits.LATC4 = 0);
  8546  001A12  988B               	bcf	139,4,c	;volatile
  8547                           
  8548                           ;LcTLCD.c: 193:  (TRISCbits.TRISC0 = TRISCbits.TRISC1 = TRISCbits.TRISC2 = TRISCbits.TRI
      +                          SC3 = 1);
  8549  001A14  8694               	bsf	148,3,c	;volatile
  8550  001A16  8494               	bsf	148,2,c	;volatile
  8551  001A18  8294               	bsf	148,1,c	;volatile
  8552  001A1A  8094               	bsf	148,0,c	;volatile
  8553  001A1C  0012               	return		;funcret
  8554  001A1E                     __end_of_CantaIR:
  8555                           	callstack 0
  8556                           
  8557 ;; *************** function _CantaPartBaixa *****************
  8558 ;; Defined at:
  8559 ;;		line 173 in file "LcTLCD.c"
  8560 ;; Parameters:    Size  Location     Type
  8561 ;;  c               1    wreg     unsigned char 
  8562 ;; Auto vars:     Size  Location     Type
  8563 ;;  c               1    6[COMRAM] unsigned char 
  8564 ;; Return value:  Size  Location     Type
  8565 ;;                  1    wreg      void 
  8566 ;; Registers used:
  8567 ;;		wreg, status,2, status,0
  8568 ;; Tracked objects:
  8569 ;;		On entry : 0/0
  8570 ;;		On exit  : 0/0
  8571 ;;		Unchanged: 0/0
  8572 ;; Data sizes:     COMRAM   BANK0   BANK1
  8573 ;;      Params:         0       0       0
  8574 ;;      Locals:         1       0       0
  8575 ;;      Temps:          1       0       0
  8576 ;;      Totals:         2       0       0
  8577 ;;Total ram usage:        2 bytes
  8578 ;; Hardware stack levels used: 1
  8579 ;; Hardware stack levels required when called: 2
  8580 ;; This function calls:
  8581 ;;		Nothing
  8582 ;; This function is called by:
  8583 ;;		_CantaIR
  8584 ;;		_CantaData
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text66
  8589  001678                     __ptext66:
  8590                           	callstack 0
  8591  001678                     _CantaPartBaixa:
  8592                           	callstack 25
  8593                           
  8594                           ;incstack = 0
  8595                           ;CantaPartBaixa@c stored from wreg
  8596  001678  6E69               	movwf	CantaPartBaixa@c^0,c
  8597                           
  8598                           ;LcTLCD.c: 174:   (LATCbits.LATC3 = (c & 0x08 ? 1 : 0));
  8599  00167A  A669               	btfss	CantaPartBaixa@c^0,3,c
  8600  00167C  D003               	goto	u2760
  8601  00167E  6A68               	clrf	??_CantaPartBaixa^0,c
  8602  001680  2A68               	incf	??_CantaPartBaixa^0,f,c
  8603  001682  D001               	goto	u2778
  8604  001684                     u2760:
  8605  001684  6A68               	clrf	??_CantaPartBaixa^0,c
  8606  001686                     u2778:
  8607  001686  4668               	rlncf	??_CantaPartBaixa^0,f,c
  8608  001688  4668               	rlncf	??_CantaPartBaixa^0,f,c
  8609  00168A  4668               	rlncf	??_CantaPartBaixa^0,f,c
  8610  00168C  508B               	movf	139,w,c	;volatile
  8611  00168E  1868               	xorwf	??_CantaPartBaixa^0,w,c
  8612  001690  0BF7               	andlw	-9
  8613  001692  1868               	xorwf	??_CantaPartBaixa^0,w,c
  8614  001694  6E8B               	movwf	139,c	;volatile
  8615                           
  8616                           ;LcTLCD.c: 175:   (LATCbits.LATC2 = (c & 0x04 ? 1 : 0));
  8617  001696  A469               	btfss	CantaPartBaixa@c^0,2,c
  8618  001698  D003               	goto	u2780
  8619  00169A  6A68               	clrf	??_CantaPartBaixa^0,c
  8620  00169C  2A68               	incf	??_CantaPartBaixa^0,f,c
  8621  00169E  D001               	goto	u2798
  8622  0016A0                     u2780:
  8623  0016A0  6A68               	clrf	??_CantaPartBaixa^0,c
  8624  0016A2                     u2798:
  8625  0016A2  4668               	rlncf	??_CantaPartBaixa^0,f,c
  8626  0016A4  4668               	rlncf	??_CantaPartBaixa^0,f,c
  8627  0016A6  508B               	movf	139,w,c	;volatile
  8628  0016A8  1868               	xorwf	??_CantaPartBaixa^0,w,c
  8629  0016AA  0BFB               	andlw	-5
  8630  0016AC  1868               	xorwf	??_CantaPartBaixa^0,w,c
  8631  0016AE  6E8B               	movwf	139,c	;volatile
  8632                           
  8633                           ;LcTLCD.c: 176:   (LATCbits.LATC1 = (c & 0x02 ? 1 : 0));
  8634  0016B0  A269               	btfss	CantaPartBaixa@c^0,1,c
  8635  0016B2  D003               	goto	u2800
  8636  0016B4  6A68               	clrf	??_CantaPartBaixa^0,c
  8637  0016B6  2A68               	incf	??_CantaPartBaixa^0,f,c
  8638  0016B8  D001               	goto	u2818
  8639  0016BA                     u2800:
  8640  0016BA  6A68               	clrf	??_CantaPartBaixa^0,c
  8641  0016BC                     u2818:
  8642  0016BC  4668               	rlncf	??_CantaPartBaixa^0,f,c
  8643  0016BE  508B               	movf	139,w,c	;volatile
  8644  0016C0  1868               	xorwf	??_CantaPartBaixa^0,w,c
  8645  0016C2  0BFD               	andlw	-3
  8646  0016C4  1868               	xorwf	??_CantaPartBaixa^0,w,c
  8647  0016C6  6E8B               	movwf	139,c	;volatile
  8648                           
  8649                           ;LcTLCD.c: 177:   (LATCbits.LATC0 = (c & 0x01 ? 1 : 0));
  8650  0016C8  A069               	btfss	CantaPartBaixa@c^0,0,c
  8651  0016CA  D003               	goto	u2820
  8652  0016CC  6A68               	clrf	??_CantaPartBaixa^0,c
  8653  0016CE  2A68               	incf	??_CantaPartBaixa^0,f,c
  8654  0016D0  D001               	goto	u2838
  8655  0016D2                     u2820:
  8656  0016D2  6A68               	clrf	??_CantaPartBaixa^0,c
  8657  0016D4                     u2838:
  8658  0016D4  508B               	movf	139,w,c	;volatile
  8659  0016D6  1868               	xorwf	??_CantaPartBaixa^0,w,c
  8660  0016D8  0BFE               	andlw	-2
  8661  0016DA  1868               	xorwf	??_CantaPartBaixa^0,w,c
  8662  0016DC  6E8B               	movwf	139,c	;volatile
  8663  0016DE  0012               	return		;funcret
  8664  0016E0                     __end_of_CantaPartBaixa:
  8665                           	callstack 0
  8666                           
  8667 ;; *************** function _CantaPartAlta *****************
  8668 ;; Defined at:
  8669 ;;		line 166 in file "LcTLCD.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;  c               1    wreg     unsigned char 
  8672 ;; Auto vars:     Size  Location     Type
  8673 ;;  c               1    6[COMRAM] unsigned char 
  8674 ;; Return value:  Size  Location     Type
  8675 ;;                  1    wreg      void 
  8676 ;; Registers used:
  8677 ;;		wreg, status,2, status,0
  8678 ;; Tracked objects:
  8679 ;;		On entry : 0/0
  8680 ;;		On exit  : 0/0
  8681 ;;		Unchanged: 0/0
  8682 ;; Data sizes:     COMRAM   BANK0   BANK1
  8683 ;;      Params:         0       0       0
  8684 ;;      Locals:         1       0       0
  8685 ;;      Temps:          1       0       0
  8686 ;;      Totals:         2       0       0
  8687 ;;Total ram usage:        2 bytes
  8688 ;; Hardware stack levels used: 1
  8689 ;; Hardware stack levels required when called: 2
  8690 ;; This function calls:
  8691 ;;		Nothing
  8692 ;; This function is called by:
  8693 ;;		_CantaIR
  8694 ;;		_CantaData
  8695 ;; This function uses a non-reentrant model
  8696 ;;
  8697                           
  8698                           	psect	text67
  8699  0016E0                     __ptext67:
  8700                           	callstack 0
  8701  0016E0                     _CantaPartAlta:
  8702                           	callstack 25
  8703                           
  8704                           ;incstack = 0
  8705                           ;CantaPartAlta@c stored from wreg
  8706  0016E0  6E69               	movwf	CantaPartAlta@c^0,c
  8707                           
  8708                           ;LcTLCD.c: 167:   (LATCbits.LATC3 = (c & 0x80 ? 1 : 0));
  8709  0016E2  AE69               	btfss	CantaPartAlta@c^0,7,c
  8710  0016E4  D003               	goto	u2680
  8711  0016E6  6A68               	clrf	??_CantaPartAlta^0,c
  8712  0016E8  2A68               	incf	??_CantaPartAlta^0,f,c
  8713  0016EA  D001               	goto	u2698
  8714  0016EC                     u2680:
  8715  0016EC  6A68               	clrf	??_CantaPartAlta^0,c
  8716  0016EE                     u2698:
  8717  0016EE  4668               	rlncf	??_CantaPartAlta^0,f,c
  8718  0016F0  4668               	rlncf	??_CantaPartAlta^0,f,c
  8719  0016F2  4668               	rlncf	??_CantaPartAlta^0,f,c
  8720  0016F4  508B               	movf	139,w,c	;volatile
  8721  0016F6  1868               	xorwf	??_CantaPartAlta^0,w,c
  8722  0016F8  0BF7               	andlw	-9
  8723  0016FA  1868               	xorwf	??_CantaPartAlta^0,w,c
  8724  0016FC  6E8B               	movwf	139,c	;volatile
  8725                           
  8726                           ;LcTLCD.c: 168:   (LATCbits.LATC2 = (c & 0x40 ? 1 : 0));
  8727  0016FE  AC69               	btfss	CantaPartAlta@c^0,6,c
  8728  001700  D003               	goto	u2700
  8729  001702  6A68               	clrf	??_CantaPartAlta^0,c
  8730  001704  2A68               	incf	??_CantaPartAlta^0,f,c
  8731  001706  D001               	goto	u2718
  8732  001708                     u2700:
  8733  001708  6A68               	clrf	??_CantaPartAlta^0,c
  8734  00170A                     u2718:
  8735  00170A  4668               	rlncf	??_CantaPartAlta^0,f,c
  8736  00170C  4668               	rlncf	??_CantaPartAlta^0,f,c
  8737  00170E  508B               	movf	139,w,c	;volatile
  8738  001710  1868               	xorwf	??_CantaPartAlta^0,w,c
  8739  001712  0BFB               	andlw	-5
  8740  001714  1868               	xorwf	??_CantaPartAlta^0,w,c
  8741  001716  6E8B               	movwf	139,c	;volatile
  8742                           
  8743                           ;LcTLCD.c: 169:   (LATCbits.LATC1 = (c & 0x20 ? 1 : 0));
  8744  001718  AA69               	btfss	CantaPartAlta@c^0,5,c
  8745  00171A  D003               	goto	u2720
  8746  00171C  6A68               	clrf	??_CantaPartAlta^0,c
  8747  00171E  2A68               	incf	??_CantaPartAlta^0,f,c
  8748  001720  D001               	goto	u2738
  8749  001722                     u2720:
  8750  001722  6A68               	clrf	??_CantaPartAlta^0,c
  8751  001724                     u2738:
  8752  001724  4668               	rlncf	??_CantaPartAlta^0,f,c
  8753  001726  508B               	movf	139,w,c	;volatile
  8754  001728  1868               	xorwf	??_CantaPartAlta^0,w,c
  8755  00172A  0BFD               	andlw	-3
  8756  00172C  1868               	xorwf	??_CantaPartAlta^0,w,c
  8757  00172E  6E8B               	movwf	139,c	;volatile
  8758                           
  8759                           ;LcTLCD.c: 170:   (LATCbits.LATC0 = (c & 0x10 ? 1 : 0));
  8760  001730  A869               	btfss	CantaPartAlta@c^0,4,c
  8761  001732  D003               	goto	u2740
  8762  001734  6A68               	clrf	??_CantaPartAlta^0,c
  8763  001736  2A68               	incf	??_CantaPartAlta^0,f,c
  8764  001738  D001               	goto	u2758
  8765  00173A                     u2740:
  8766  00173A  6A68               	clrf	??_CantaPartAlta^0,c
  8767  00173C                     u2758:
  8768  00173C  508B               	movf	139,w,c	;volatile
  8769  00173E  1868               	xorwf	??_CantaPartAlta^0,w,c
  8770  001740  0BFE               	andlw	-2
  8771  001742  1868               	xorwf	??_CantaPartAlta^0,w,c
  8772  001744  6E8B               	movwf	139,c	;volatile
  8773  001746  0012               	return		;funcret
  8774  001748                     __end_of_CantaPartAlta:
  8775                           	callstack 0
  8776                           
  8777 ;; *************** function _Espera *****************
  8778 ;; Defined at:
  8779 ;;		line 161 in file "LcTLCD.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;  Timer           1    wreg     unsigned char 
  8782 ;;  ms              2   12[COMRAM] int 
  8783 ;; Auto vars:     Size  Location     Type
  8784 ;;  Timer           1   15[COMRAM] unsigned char 
  8785 ;; Return value:  Size  Location     Type
  8786 ;;                  1    wreg      void 
  8787 ;; Registers used:
  8788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8789 ;; Tracked objects:
  8790 ;;		On entry : 0/0
  8791 ;;		On exit  : 0/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMRAM   BANK0   BANK1
  8794 ;;      Params:         2       0       0
  8795 ;;      Locals:         1       0       0
  8796 ;;      Temps:          1       0       0
  8797 ;;      Totals:         4       0       0
  8798 ;;Total ram usage:        4 bytes
  8799 ;; Hardware stack levels used: 1
  8800 ;; Hardware stack levels required when called: 3
  8801 ;; This function calls:
  8802 ;;		_TiGetTics
  8803 ;;		_TiResetTics
  8804 ;; This function is called by:
  8805 ;;		_LcInit
  8806 ;;		_LcClear
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           	psect	text68
  8811  001AEC                     __ptext68:
  8812                           	callstack 0
  8813  001AEC                     _Espera:
  8814                           	callstack 25
  8815                           
  8816                           ;incstack = 0
  8817                           ;Espera@Timer stored from wreg
  8818  001AEC  6E72               	movwf	Espera@Timer^0,c
  8819                           
  8820                           ;LcTLCD.c: 162:  TiResetTics(Timer);
  8821  001AEE  5072               	movf	Espera@Timer^0,w,c
  8822  001AF0  ECB8  F00D         	call	_TiResetTics
  8823  001AF4                     l3746:
  8824  001AF4  5072               	movf	Espera@Timer^0,w,c
  8825  001AF6  EC3C  F00D         	call	_TiGetTics
  8826  001AFA  506F               	movf	Espera@ms^0,w,c
  8827  001AFC  5C68               	subwf	?_TiGetTics^0,w,c
  8828  001AFE  5069               	movf	(?_TiGetTics+1)^0,w,c
  8829  001B00  0A80               	xorlw	128
  8830  001B02  6E71               	movwf	??_Espera^0,c
  8831  001B04  5070               	movf	(Espera@ms+1)^0,w,c
  8832  001B06  0A80               	xorlw	128
  8833  001B08  5871               	subwfb	??_Espera^0,w,c
  8834  001B0A  B0D8               	btfsc	status,0,c
  8835  001B0C  0012               	return	
  8836  001B0E  D7F2               	goto	l3746
  8837  001B10                     __end_of_Espera:
  8838                           	callstack 0
  8839                           
  8840 ;; *************** function _TiResetTics *****************
  8841 ;; Defined at:
  8842 ;;		line 55 in file "TiTTimer.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;  Handle          1    wreg     unsigned char 
  8845 ;; Auto vars:     Size  Location     Type
  8846 ;;  Handle          1    5[COMRAM] unsigned char 
  8847 ;; Return value:  Size  Location     Type
  8848 ;;                  1    wreg      void 
  8849 ;; Registers used:
  8850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8851 ;; Tracked objects:
  8852 ;;		On entry : 0/1
  8853 ;;		On exit  : 0/0
  8854 ;;		Unchanged: 0/0
  8855 ;; Data sizes:     COMRAM   BANK0   BANK1
  8856 ;;      Params:         0       0       0
  8857 ;;      Locals:         1       0       0
  8858 ;;      Temps:          0       0       0
  8859 ;;      Totals:         1       0       0
  8860 ;;Total ram usage:        1 bytes
  8861 ;; Hardware stack levels used: 1
  8862 ;; Hardware stack levels required when called: 2
  8863 ;; This function calls:
  8864 ;;		Nothing
  8865 ;; This function is called by:
  8866 ;;		_Espera
  8867 ;;		_WaitForBusy
  8868 ;;		_SMotor
  8869 ;;		_TeTeclat
  8870 ;;		_menu
  8871 ;;		_motorAltaveu
  8872 ;;		_GLCDMotor
  8873 ;;		_motorHora
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           	psect	text69
  8878  001B70                     __ptext69:
  8879                           	callstack 0
  8880  001B70                     _TiResetTics:
  8881                           	callstack 25
  8882                           
  8883                           ;incstack = 0
  8884                           ;TiResetTics@Handle stored from wreg
  8885  001B70  6E68               	movwf	TiResetTics@Handle^0,c
  8886                           
  8887                           ;TiTTimer.c: 59:     s_Timers[Handle].h_initialTics=h_Tics;
  8888  001B72  5068               	movf	TiResetTics@Handle^0,w,c
  8889  001B74  0D03               	mullw	3
  8890  001B76  50F3               	movf	243,w,c
  8891  001B78  0F80               	addlw	low _s_Timers
  8892  001B7A  6ED9               	movwf	fsr2l,c
  8893  001B7C  6ADA               	clrf	fsr2h,c
  8894  001B7E  C003  FFDE         	movff	_h_Tics,postinc2
  8895  001B82  C004  FFDD         	movff	_h_Tics+1,postdec2
  8896  001B86  0012               	return		;funcret
  8897  001B88                     __end_of_TiResetTics:
  8898                           	callstack 0
  8899                           
  8900 ;; *************** function _TiGetTics *****************
  8901 ;; Defined at:
  8902 ;;		line 61 in file "TiTTimer.c"
  8903 ;; Parameters:    Size  Location     Type
  8904 ;;  Handle          1    wreg     unsigned char 
  8905 ;; Auto vars:     Size  Location     Type
  8906 ;;  Handle          1    9[COMRAM] unsigned char 
  8907 ;;  actual          2   10[COMRAM] volatile unsigned int 
  8908 ;; Return value:  Size  Location     Type
  8909 ;;                  2    5[COMRAM] int 
  8910 ;; Registers used:
  8911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8912 ;; Tracked objects:
  8913 ;;		On entry : 0/1
  8914 ;;		On exit  : 0/0
  8915 ;;		Unchanged: 0/0
  8916 ;; Data sizes:     COMRAM   BANK0   BANK1
  8917 ;;      Params:         2       0       0
  8918 ;;      Locals:         3       0       0
  8919 ;;      Temps:          2       0       0
  8920 ;;      Totals:         7       0       0
  8921 ;;Total ram usage:        7 bytes
  8922 ;; Hardware stack levels used: 1
  8923 ;; Hardware stack levels required when called: 2
  8924 ;; This function calls:
  8925 ;;		Nothing
  8926 ;; This function is called by:
  8927 ;;		_Espera
  8928 ;;		_WaitForBusy
  8929 ;;		_SMotor
  8930 ;;		_TeTeclat
  8931 ;;		_menu
  8932 ;;		_motorAltaveu
  8933 ;;		_GLCDMotor
  8934 ;;		_motorHora
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           	psect	text70
  8939  001A78                     __ptext70:
  8940                           	callstack 0
  8941  001A78                     _TiGetTics:
  8942                           	callstack 25
  8943                           
  8944                           ;incstack = 0
  8945                           ;TiGetTics@Handle stored from wreg
  8946  001A78  6E6C               	movwf	TiGetTics@Handle^0,c
  8947                           
  8948                           ;TiTTimer.c: 65:     volatile unsigned int actual;;TiTTimer.c: 66:     actual=h_Tics;
  8949  001A7A  C003  F06D         	movff	_h_Tics,TiGetTics@actual	;volatile
  8950  001A7E  C004  F06E         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  8951                           
  8952                           ;TiTTimer.c: 67:     return (actual-(s_Timers[Handle].h_initialTics));
  8953  001A82  506C               	movf	TiGetTics@Handle^0,w,c
  8954  001A84  0D03               	mullw	3
  8955  001A86  50F3               	movf	243,w,c
  8956  001A88  0F80               	addlw	low _s_Timers
  8957  001A8A  6ED9               	movwf	fsr2l,c
  8958  001A8C  6ADA               	clrf	fsr2h,c
  8959  001A8E  CFDE F06A          	movff	postinc2,??_TiGetTics
  8960  001A92  CFDD F06B          	movff	postdec2,??_TiGetTics+1
  8961  001A96  506A               	movf	??_TiGetTics^0,w,c
  8962  001A98  5C6D               	subwf	TiGetTics@actual^0,w,c	;volatile
  8963  001A9A  6E68               	movwf	?_TiGetTics^0,c
  8964  001A9C  506B               	movf	(??_TiGetTics+1)^0,w,c
  8965  001A9E  586E               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  8966  001AA0  6E69               	movwf	(?_TiGetTics+1)^0,c
  8967  001AA2  0012               	return		;funcret
  8968  001AA4                     __end_of_TiGetTics:
  8969                           	callstack 0
  8970                           
  8971 ;; *************** function _GLCDInit *****************
  8972 ;; Defined at:
  8973 ;;		line 26 in file "GestioLCD.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;		None
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;		None
  8978 ;; Return value:  Size  Location     Type
  8979 ;;                  1    wreg      void 
  8980 ;; Registers used:
  8981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMRAM   BANK0   BANK1
  8987 ;;      Params:         0       0       0
  8988 ;;      Locals:         0       0       0
  8989 ;;      Temps:          0       0       0
  8990 ;;      Totals:         0       0       0
  8991 ;;Total ram usage:        0 bytes
  8992 ;; Hardware stack levels used: 1
  8993 ;; Hardware stack levels required when called: 3
  8994 ;; This function calls:
  8995 ;;		_TiGetTimer
  8996 ;; This function is called by:
  8997 ;;		_main
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           	psect	text71
  9002  001C9C                     __ptext71:
  9003                           	callstack 0
  9004  001C9C                     _GLCDInit:
  9005                           	callstack 27
  9006                           
  9007                           ;GestioLCD.c: 27:     timerGLCD=TiGetTimer();
  9008                           
  9009                           ;incstack = 0
  9010  001C9C  EC89  F00C         	call	_TiGetTimer	;wreg free
  9011  001CA0  6E18               	movwf	_timerGLCD^0,c
  9012  001CA2  0012               	return		;funcret
  9013  001CA4                     __end_of_GLCDInit:
  9014                           	callstack 0
  9015                           
  9016 ;; *************** function _TiGetTimer *****************
  9017 ;; Defined at:
  9018 ;;		line 70 in file "TiTTimer.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;		None
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;		None
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  1    wreg      unsigned char 
  9025 ;; Registers used:
  9026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMRAM   BANK0   BANK1
  9032 ;;      Params:         0       0       0
  9033 ;;      Locals:         0       0       0
  9034 ;;      Temps:          1       0       0
  9035 ;;      Totals:         1       0       0
  9036 ;;Total ram usage:        1 bytes
  9037 ;; Hardware stack levels used: 1
  9038 ;; Hardware stack levels required when called: 2
  9039 ;; This function calls:
  9040 ;;		Nothing
  9041 ;; This function is called by:
  9042 ;;		_LcInit
  9043 ;;		_Sinit
  9044 ;;		_TeInit
  9045 ;;		_Minit
  9046 ;;		_initAltaveu
  9047 ;;		_GLCDInit
  9048 ;;		_initHora
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           	psect	text72
  9053  001912                     __ptext72:
  9054                           	callstack 0
  9055  001912                     _TiGetTimer:
  9056                           	callstack 27
  9057                           
  9058                           ;TiTTimer.c: 74:     counter=0;
  9059                           
  9060                           ;incstack = 0
  9061  001912  0E00               	movlw	0
  9062  001914  6E29               	movwf	_counter^0,c
  9063                           
  9064                           ;TiTTimer.c: 75:     while (s_Timers[counter].b_busy==1) {
  9065  001916  D007               	goto	l3792
  9066  001918                     l3784:
  9067                           
  9068                           ;TiTTimer.c: 76:         counter++;
  9069  001918  2A29               	incf	_counter^0,f,c
  9070                           
  9071                           ;TiTTimer.c: 77:  if (counter == 8) return -1;
  9072  00191A  0E08               	movlw	8
  9073  00191C  1829               	xorwf	_counter^0,w,c
  9074  00191E  A4D8               	btfss	status,2,c
  9075  001920  D002               	goto	l3792
  9076  001922  0EFF               	movlw	255
  9077  001924  0012               	return	
  9078  001926                     l3792:
  9079                           
  9080                           ;TiTTimer.c: 75:     while (s_Timers[counter].b_busy==1) {
  9081  001926  5029               	movf	_counter^0,w,c
  9082  001928  0D03               	mullw	3
  9083  00192A  50F3               	movf	243,w,c
  9084  00192C  0F82               	addlw	low (_s_Timers+2)
  9085  00192E  6ED9               	movwf	fsr2l,c
  9086  001930  6ADA               	clrf	fsr2h,c
  9087  001932  04DE               	decf	postinc2,w,c
  9088  001934  B4D8               	btfsc	status,2,c
  9089  001936  D7F0               	goto	l3784
  9090                           
  9091                           ;TiTTimer.c: 79:     s_Timers[counter].b_busy=1;
  9092  001938  5029               	movf	_counter^0,w,c
  9093  00193A  0D03               	mullw	3
  9094  00193C  50F3               	movf	243,w,c
  9095  00193E  0F82               	addlw	low (_s_Timers+2)
  9096  001940  6ED9               	movwf	fsr2l,c
  9097  001942  6ADA               	clrf	fsr2h,c
  9098  001944  0E01               	movlw	1
  9099  001946  6EDF               	movwf	indf2,c
  9100                           
  9101                           ;TiTTimer.c: 80:     return (counter);
  9102  001948  5029               	movf	_counter^0,w,c
  9103  00194A  0012               	return		;funcret
  9104  00194C                     __end_of_TiGetTimer:
  9105                           	callstack 0
  9106                           
  9107 ;; *************** function _high_rsi *****************
  9108 ;; Defined at:
  9109 ;;		line 21 in file "main.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;		None
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;		None
  9114 ;; Return value:  Size  Location     Type
  9115 ;;                  1    wreg      void 
  9116 ;; Registers used:
  9117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMRAM   BANK0   BANK1
  9123 ;;      Params:         0       0       0
  9124 ;;      Locals:         0       0       0
  9125 ;;      Temps:          4       0       0
  9126 ;;      Totals:         4       0       0
  9127 ;;Total ram usage:        4 bytes
  9128 ;; Hardware stack levels used: 1
  9129 ;; Hardware stack levels required when called: 1
  9130 ;; This function calls:
  9131 ;;		__TiRSITimer
  9132 ;; This function is called by:
  9133 ;;		Interrupt level 2
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	intcode
  9138  000008                     __pintcode:
  9139                           	callstack 0
  9140  000008                     _high_rsi:
  9141                           	callstack 24
  9142                           
  9143                           ;incstack = 0
  9144  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9145  00000A  CFD9 F064          	movff	fsr2l,??_high_rsi
  9146  00000E  CFDA F065          	movff	fsr2h,??_high_rsi+1
  9147  000012  CFF3 F066          	movff	prodl,??_high_rsi+2
  9148  000016  CFF4 F067          	movff	prodh,??_high_rsi+3
  9149  00001A  ECD3  F00B         	call	__TiRSITimer	;wreg free
  9150  00001E  C067  FFF4         	movff	??_high_rsi+3,prodh
  9151  000022  C066  FFF3         	movff	??_high_rsi+2,prodl
  9152  000026  C065  FFDA         	movff	??_high_rsi+1,fsr2h
  9153  00002A  C064  FFD9         	movff	??_high_rsi,fsr2l
  9154  00002E  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9155  000030  0011               	retfie		f
  9156  000032                     __end_of_high_rsi:
  9157                           	callstack 0
  9158                           
  9159 ;; *************** function __TiRSITimer *****************
  9160 ;; Defined at:
  9161 ;;		line 37 in file "TiTTimer.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;		None
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;		None
  9166 ;; Return value:  Size  Location     Type
  9167 ;;                  1    wreg      void 
  9168 ;; Registers used:
  9169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMRAM   BANK0   BANK1
  9175 ;;      Params:         0       0       0
  9176 ;;      Locals:         0       0       0
  9177 ;;      Temps:          1       0       0
  9178 ;;      Totals:         1       0       0
  9179 ;;Total ram usage:        1 bytes
  9180 ;; Hardware stack levels used: 1
  9181 ;; This function calls:
  9182 ;;		Nothing
  9183 ;; This function is called by:
  9184 ;;		_high_rsi
  9185 ;; This function uses a non-reentrant model
  9186 ;;
  9187                           
  9188                           	psect	text74
  9189  0017A6                     __ptext74:
  9190                           	callstack 0
  9191  0017A6                     __TiRSITimer:
  9192                           	callstack 24
  9193                           
  9194                           ;TiTTimer.c: 39:     TMR0H = 223;
  9195                           
  9196                           ;incstack = 0
  9197  0017A6  0EDF               	movlw	223
  9198  0017A8  6ED7               	movwf	215,c	;volatile
  9199                           
  9200                           ;TiTTimer.c: 40:     TMR0L = 148;
  9201  0017AA  0E94               	movlw	148
  9202  0017AC  6ED6               	movwf	214,c	;volatile
  9203                           
  9204                           ;TiTTimer.c: 41:     INTCONbits.TMR0IF = 0;
  9205  0017AE  94F2               	bcf	242,2,c	;volatile
  9206                           
  9207                           ;TiTTimer.c: 42:     h_Tics++;
  9208  0017B0  4A03               	infsnz	_h_Tics^0,f,c
  9209  0017B2  2A04               	incf	(_h_Tics+1)^0,f,c
  9210                           
  9211                           ;TiTTimer.c: 44:     if (h_Tics>=61000) {
  9212  0017B4  0E48               	movlw	72
  9213  0017B6  5C03               	subwf	_h_Tics^0,w,c
  9214  0017B8  0EEE               	movlw	238
  9215  0017BA  5804               	subwfb	(_h_Tics+1)^0,w,c
  9216  0017BC  A0D8               	btfss	status,0,c
  9217  0017BE  0012               	return	
  9218                           
  9219                           ;TiTTimer.c: 46:         for (counter=0;counter<8;counter++){
  9220  0017C0  0E00               	movlw	0
  9221  0017C2  6E29               	movwf	_counter^0,c
  9222  0017C4                     i2l4016:
  9223  0017C4  0E07               	movlw	7
  9224  0017C6  6429               	cpfsgt	_counter^0,c
  9225  0017C8  D001               	goto	i2l4020
  9226  0017CA  D015               	goto	i2l4028
  9227  0017CC                     i2l4020:
  9228                           
  9229                           ;TiTTimer.c: 47:             if (s_Timers[counter].b_busy==1){
  9230  0017CC  5029               	movf	_counter^0,w,c
  9231  0017CE  0D03               	mullw	3
  9232  0017D0  50F3               	movf	243,w,c
  9233  0017D2  0F82               	addlw	low (_s_Timers+2)
  9234  0017D4  6ED9               	movwf	fsr2l,c
  9235  0017D6  6ADA               	clrf	fsr2h,c
  9236  0017D8  04DE               	decf	postinc2,w,c
  9237  0017DA  A4D8               	btfss	status,2,c
  9238  0017DC  D00A               	goto	i2l4024
  9239                           
  9240                           ;TiTTimer.c: 48:                 s_Timers[counter].h_initialTics -= h_Tics;
  9241  0017DE  5029               	movf	_counter^0,w,c
  9242  0017E0  0D03               	mullw	3
  9243  0017E2  50F3               	movf	243,w,c
  9244  0017E4  0F80               	addlw	low _s_Timers
  9245  0017E6  6ED9               	movwf	fsr2l,c
  9246  0017E8  6ADA               	clrf	fsr2h,c
  9247  0017EA  5003               	movf	_h_Tics^0,w,c
  9248  0017EC  5EDE               	subwf	postinc2,f,c
  9249  0017EE  5004               	movf	(_h_Tics+1)^0,w,c
  9250  0017F0  5ADD               	subwfb	postdec2,f,c
  9251  0017F2                     i2l4024:
  9252                           
  9253                           ;TiTTimer.c: 50:         }
  9254  0017F2  2A29               	incf	_counter^0,f,c
  9255  0017F4  D7E7               	goto	i2l4016
  9256  0017F6                     i2l4028:
  9257                           
  9258                           ;TiTTimer.c: 51:         h_Tics=0;
  9259  0017F6  0E00               	movlw	0
  9260  0017F8  6E04               	movwf	(_h_Tics+1)^0,c
  9261  0017FA  0E00               	movlw	0
  9262  0017FC  6E03               	movwf	_h_Tics^0,c
  9263  0017FE  0012               	return		;funcret
  9264  001800                     __end_of__TiRSITimer:
  9265                           	callstack 0
  9266                           
  9267                           	psect	rparam
  9268  0000                     
  9269                           	psect	temp
  9270  00007A                     btemp:
  9271                           	callstack 0
  9272  00007A                     	ds	1
  9273  0000                     int$flags	set	btemp
  9274  0000                     wtemp8	set	btemp+1
  9275  0000                     ttemp5	set	btemp+1
  9276  0000                     ttemp6	set	btemp+4
  9277  0000                     ttemp7	set	btemp+8
  9278                           
  9279                           	psect	idloc
  9280                           
  9281                           ;Config register IDLOC0 @ 0x200000
  9282                           ;	unspecified, using default values
  9283  200000                     	org	2097152
  9284  200000  FF                 	db	255
  9285                           
  9286                           ;Config register IDLOC1 @ 0x200001
  9287                           ;	unspecified, using default values
  9288  200001                     	org	2097153
  9289  200001  FF                 	db	255
  9290                           
  9291                           ;Config register IDLOC2 @ 0x200002
  9292                           ;	unspecified, using default values
  9293  200002                     	org	2097154
  9294  200002  FF                 	db	255
  9295                           
  9296                           ;Config register IDLOC3 @ 0x200003
  9297                           ;	unspecified, using default values
  9298  200003                     	org	2097155
  9299  200003  FF                 	db	255
  9300                           
  9301                           ;Config register IDLOC4 @ 0x200004
  9302                           ;	unspecified, using default values
  9303  200004                     	org	2097156
  9304  200004  FF                 	db	255
  9305                           
  9306                           ;Config register IDLOC5 @ 0x200005
  9307                           ;	unspecified, using default values
  9308  200005                     	org	2097157
  9309  200005  FF                 	db	255
  9310                           
  9311                           ;Config register IDLOC6 @ 0x200006
  9312                           ;	unspecified, using default values
  9313  200006                     	org	2097158
  9314  200006  FF                 	db	255
  9315                           
  9316                           ;Config register IDLOC7 @ 0x200007
  9317                           ;	unspecified, using default values
  9318  200007                     	org	2097159
  9319  200007  FF                 	db	255
  9320                           
  9321                           	psect	config
  9322                           
  9323                           ; Padding undefined space
  9324  300000                     	org	3145728
  9325  300000  FF                 	db	255
  9326                           
  9327                           ;Config register CONFIG1H @ 0x300001
  9328                           ;	Oscillator
  9329                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  9330                           ;	Fail-Safe Clock Monitor Enable bit
  9331                           ;	FCMEN = 0x0, unprogrammed default
  9332                           ;	Internal/External Oscillator Switchover bit
  9333                           ;	IESO = 0x0, unprogrammed default
  9334  300001                     	org	3145729
  9335  300001  06                 	db	6
  9336                           
  9337                           ;Config register CONFIG2L @ 0x300002
  9338                           ;	unspecified, using default values
  9339                           ;	Power-up Timer Enable bit
  9340                           ;	PWRT = 0x1, unprogrammed default
  9341                           ;	Brown-out Reset Enable bits
  9342                           ;	BOR = 0x3, unprogrammed default
  9343                           ;	Brown-out Reset Voltage bits
  9344                           ;	BORV = 0x3, unprogrammed default
  9345  300002                     	org	3145730
  9346  300002  1F                 	db	31
  9347                           
  9348                           ;Config register CONFIG2H @ 0x300003
  9349                           ;	Watchdog Timer Enable bit
  9350                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  9351                           ;	Watchdog Timer Postscale Select bits
  9352                           ;	WDTPS = 0xF, unprogrammed default
  9353  300003                     	org	3145731
  9354  300003  1E                 	db	30
  9355                           
  9356                           ; Padding undefined space
  9357  300004                     	org	3145732
  9358  300004  FF                 	db	255
  9359                           
  9360                           ;Config register CONFIG3H @ 0x300005
  9361                           ;	CCP2 MUX bit
  9362                           ;	CCP2MX = 0x1, unprogrammed default
  9363                           ;	PORTB A/D Enable bit
  9364                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  9365                           ;	Low-Power Timer1 Oscillator Enable bit
  9366                           ;	LPT1OSC = 0x0, unprogrammed default
  9367                           ;	MCLR Pin Enable bit
  9368                           ;	MCLRE = 0x1, unprogrammed default
  9369  300005                     	org	3145733
  9370  300005  81                 	db	129
  9371                           
  9372                           ;Config register CONFIG4L @ 0x300006
  9373                           ;	Stack Full/Underflow Reset Enable bit
  9374                           ;	STVREN = 0x1, unprogrammed default
  9375                           ;	Single-Supply ICSP Enable bit
  9376                           ;	LVP = OFF, Single-Supply ICSP disabled
  9377                           ;	Boot Block Size Select bits
  9378                           ;	BBSIZ = 0x0, unprogrammed default
  9379                           ;	Extended Instruction Set Enable bit
  9380                           ;	XINST = 0x0, unprogrammed default
  9381                           ;	Background Debugger Enable bit
  9382                           ;	DEBUG = 0x1, unprogrammed default
  9383  300006                     	org	3145734
  9384  300006  81                 	db	129
  9385                           
  9386                           ; Padding undefined space
  9387  300007                     	org	3145735
  9388  300007  FF                 	db	255
  9389                           
  9390                           ;Config register CONFIG5L @ 0x300008
  9391                           ;	unspecified, using default values
  9392                           ;	Code Protection bit
  9393                           ;	CP0 = 0x1, unprogrammed default
  9394                           ;	Code Protection bit
  9395                           ;	CP1 = 0x1, unprogrammed default
  9396  300008                     	org	3145736
  9397  300008  03                 	db	3
  9398                           
  9399                           ;Config register CONFIG5H @ 0x300009
  9400                           ;	unspecified, using default values
  9401                           ;	Boot Block Code Protection bitProtect Boot
  9402                           ;	CPB = 0x1, unprogrammed default
  9403                           ;	Data EEPROM Code Protection bit
  9404                           ;	CPD = 0x1, unprogrammed default
  9405  300009                     	org	3145737
  9406  300009  C0                 	db	192
  9407                           
  9408                           ;Config register CONFIG6L @ 0x30000A
  9409                           ;	unspecified, using default values
  9410                           ;	Write Protection bit
  9411                           ;	WRT0 = 0x1, unprogrammed default
  9412                           ;	Write Protection bit
  9413                           ;	WRT1 = 0x1, unprogrammed default
  9414  30000A                     	org	3145738
  9415  30000A  03                 	db	3
  9416                           
  9417                           ;Config register CONFIG6H @ 0x30000B
  9418                           ;	unspecified, using default values
  9419                           ;	Configuration Register Write Protection bit
  9420                           ;	WRTC = 0x1, unprogrammed default
  9421                           ;	Boot Block Write Protection bit
  9422                           ;	WRTB = 0x1, unprogrammed default
  9423                           ;	Data EEPROM Write Protection bit
  9424                           ;	WRTD = 0x1, unprogrammed default
  9425  30000B                     	org	3145739
  9426  30000B  E0                 	db	224
  9427                           
  9428                           ;Config register CONFIG7L @ 0x30000C
  9429                           ;	unspecified, using default values
  9430                           ;	Table Read Protection bit
  9431                           ;	EBTR0 = 0x1, unprogrammed default
  9432                           ;	Table Read Protection bit
  9433                           ;	EBTR1 = 0x1, unprogrammed default
  9434  30000C                     	org	3145740
  9435  30000C  03                 	db	3
  9436                           
  9437                           ;Config register CONFIG7H @ 0x30000D
  9438                           ;	unspecified, using default values
  9439                           ;	Boot Block Table Read Protection bit
  9440                           ;	EBTRB = 0x1, unprogrammed default
  9441  30000D                     	org	3145741
  9442  30000D  40                 	db	64
  9443                           tosu	equ	0xFFF
  9444                           tosh	equ	0xFFE
  9445                           tosl	equ	0xFFD
  9446                           stkptr	equ	0xFFC
  9447                           pclatu	equ	0xFFB
  9448                           pclath	equ	0xFFA
  9449                           pcl	equ	0xFF9
  9450                           tblptru	equ	0xFF8
  9451                           tblptrh	equ	0xFF7
  9452                           tblptrl	equ	0xFF6
  9453                           tablat	equ	0xFF5
  9454                           prodh	equ	0xFF4
  9455                           prodl	equ	0xFF3
  9456                           indf0	equ	0xFEF
  9457                           postinc0	equ	0xFEE
  9458                           postdec0	equ	0xFED
  9459                           preinc0	equ	0xFEC
  9460                           plusw0	equ	0xFEB
  9461                           fsr0h	equ	0xFEA
  9462                           fsr0l	equ	0xFE9
  9463                           wreg	equ	0xFE8
  9464                           indf1	equ	0xFE7
  9465                           postinc1	equ	0xFE6
  9466                           postdec1	equ	0xFE5
  9467                           preinc1	equ	0xFE4
  9468                           plusw1	equ	0xFE3
  9469                           fsr1h	equ	0xFE2
  9470                           fsr1l	equ	0xFE1
  9471                           bsr	equ	0xFE0
  9472                           indf2	equ	0xFDF
  9473                           postinc2	equ	0xFDE
  9474                           postdec2	equ	0xFDD
  9475                           preinc2	equ	0xFDC
  9476                           plusw2	equ	0xFDB
  9477                           fsr2h	equ	0xFDA
  9478                           fsr2l	equ	0xFD9
  9479                           status	equ	0xFD8

Data Sizes:
    Strings     52
    Constant    145
    Data        63
    BSS         283
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     21     121
    BANK0           128      2      66
    BANK1           256      0     184

Pointer List with Targets:

    userPtr	PTR unsigned char  size(2) Largest target is 184
		 -> usuaris.username(BANK1[9]), usuaris(BANK1[184]), NULL(NULL[0]), 

    sp__HGetTime	PTR unsigned char  size(1) Largest target is 6
		 -> hora(COMRAM[6]), 

    HActualitzaHora@nova	PTR unsigned char  size(1) Largest target is 4
		 -> horaTmp(COMRAM[4]), 

    compareStrings@b	PTR const unsigned char  size(2) Largest target is 184
		 -> usuaris.username(BANK1[9]), usuaris(BANK1[184]), 

    compareStrings@a	PTR const unsigned char  size(1) Largest target is 9
		 -> tmpUsername(COMRAM[9]), 

    sp__UgetUserName	PTR unsigned char  size(2) Largest target is 184
		 -> usuaris.username(BANK1[9]), usuaris(BANK1[184]), 

    LcNewString@new_s	PTR unsigned char  size(2) Largest target is 184
		 -> hora(COMRAM[6]), menuList(CODE[145]), usuaris.username(BANK1[9]), usuaris(BANK1[184]), 
		 -> STR_5(CODE[16]), STR_4(CODE[13]), STR_3(CODE[9]), STR_2(CODE[7]), 
		 -> STR_1(CODE[7]), registerText(BANK0[11]), loginText(BANK0[8]), 

    s_ptr	PTR unsigned char  size(2) Largest target is 184
		 -> hora(COMRAM[6]), menuList(CODE[145]), usuaris.username(BANK1[9]), usuaris(BANK1[184]), 
		 -> STR_5(CODE[16]), STR_4(CODE[13]), STR_3(CODE[9]), STR_2(CODE[7]), 
		 -> STR_1(CODE[7]), registerText(BANK0[11]), loginText(BANK0[8]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_motorJoc
    _motorSIO->_UgetUserName
    _motorJoc->_LcGotoXY
    _motorHora->_TiGetTics
    _motorAltaveu->_TiGetTics
    _menu->_LcPutChar
    _initHora->_TiGetTimer
    _initAltaveu->_TiGetTimer
    _UmotorUsers->_compareStrings
    _TeTeclat->_TiGetTics
    _TeInit->_TiGetTimer
    _Sinit->_TiGetTimer
    _SMotor->_TiGetTics
    _Minit->_TiGetTimer
    _LcLCD->_LcPutChar
    _LcInit->_Espera
    _JoystickMotor->_MNouJoystick
    _GLCDMotor->_LcPutChar
    _LcPutChar->_LcGotoXY
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcNewString->_UgetUserName
    _LcClear->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _WaitForBusy->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _Espera->_TiGetTics
    _GLCDInit->_TiGetTimer

Critical Paths under _high_rsi in COMRAM

    _high_rsi->__TiRSITimer

Critical Paths under _main in BANK0

    _main->_GLCDMotor
    _main->_menu

Critical Paths under _high_rsi in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_rsi in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   20583
                           _GLCDInit
                          _GLCDMotor
                       _JoystickInit
                      _JoystickMotor
                             _LcInit
                              _LcLCD
                              _Minit
                             _SMotor
                              _Sinit
                             _TeInit
                           _TeTeclat
                        _TiInitTimer
                              _Uinit
                        _UmotorUsers
             _escriure2usuarisStruct
                     _escriureEEPROM
                        _initAltaveu
                           _initHora
                        _init_eusart
                         _init_ports
                               _menu
                       _motorAltaveu
                          _motorHora
                           _motorJoc
                           _motorSIO
 ---------------------------------------------------------------------------------
 (1) _motorSIO                                             2     2      0      22
                                              8 COMRAM     2     2      0
                       _UgetUserName
 ---------------------------------------------------------------------------------
 (1) _motorJoc                                             2     2      0    2412
                                             19 COMRAM     2     2      0
                     _HClearNouSegon
                           _HGetTime
                            _HJugant
                          _HNouSegon
                          _HnoJugant
                           _LcGotoXY
                           _LcLliure
                        _LcNewString
                          _SIOJugant
                    _SIONovaDireccio
                       _SIONovaTecla
                       _SIOStartGame
 ---------------------------------------------------------------------------------
 (2) _SIOStartGame                                         1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SIONovaTecla                                         1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SIONovaDireccio                                      1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SIOJugant                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HnoJugant                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HNouSegon                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HJugant                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HGetTime                                             2     0      2       0
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _HClearNouSegon                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorHora                                            2     2      0      67
                                             12 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
                        _playAltaveu
 ---------------------------------------------------------------------------------
 (2) _playAltaveu                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorAltaveu                                         3     3      0      67
                                             12 COMRAM     3     3      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _menu                                                 2     2      0    7381
                                              0 BANK0      2     2      0
                     _GLCDMostraMenu
                    _HActualitzaHora
                            _JJuguem
                            _JUsuari
                            _LcClear
                           _LcGotoXY
                           _LcLliure
                        _LcNewString
                          _LcPutChar
                          _NoFerMenu
                             _SMSoff
                              _SMSon
                          _SiFerMenu
                          _TiGetTics
                        _TiResetTics
                          _URegister
                       _UcheckExists
               _UcheckExistsGetError
            _UcheckExistsNotFinished
                         _UenviaChar
                          _UenviaPas
                     _UgetNumUsuaris
                       _UgetUserName
 ---------------------------------------------------------------------------------
 (2) _UgetUserName                                         3     1      2      22
                                              5 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _UgetNumUsuaris                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UenviaPas                                            2     1      1     196
                                              5 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _UenviaChar                                           2     1      1     196
                                              5 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _UcheckExistsNotFinished                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UcheckExistsGetError                                 1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UcheckExists                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _URegister                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SiFerMenu                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMSon                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMSoff                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _NoFerMenu                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JUsuari                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JJuguem                                              1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _HActualitzaHora                                      1     0      1     164
                                              5 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _GLCDMostraMenu                                       1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_eusart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initHora                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _initAltaveu                                          0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _escriureEEPROM                                       1     1      0      30
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _escriure2usuarisStruct                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UmotorUsers                                          2     2      0     460
                                             10 COMRAM     2     2      0
                     _compareStrings
                 _escriureCharEEPROM
 ---------------------------------------------------------------------------------
 (2) _escriureCharEEPROM                                   2     1      1     196
                                              5 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _compareStrings                                       5     2      3     264
                                              5 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _Uinit                                                5     5      0     135
                                              5 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _TiInitTimer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TeTeclat                                             3     3      0     111
                                             12 COMRAM     3     3      0
                      _MsetNovaTecla
                      _SsetNovaTecla
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _SsetNovaTecla                                        1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MsetNovaTecla                                        1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TeInit                                               0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _Sinit                                                0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _SMotor                                               2     2      0      82
                                             12 COMRAM     2     2      0
                        _MNovaLletra
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _MNovaLletra                                          1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Minit                                                0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (1) _LcLCD                                                0     0      0    1841
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    1201
                                             16 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _JoystickMotor                                        2     2      0      15
                                              6 COMRAM     2     2      0
                       _MNouJoystick
 ---------------------------------------------------------------------------------
 (2) _MNouJoystick                                         1     1      0      15
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _JoystickInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GLCDMotor                                            2     2      0    6759
                                              0 BANK0      2     2      0
                            _LcClear
                           _LcGotoXY
                           _LcLliure
                        _LcNewString
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1841
                                             19 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LcNewString                                          2     0      2     858
                                              8 COMRAM     2     0      2
                           _HGetTime (ARG)
                       _UgetUserName (ARG)
 ---------------------------------------------------------------------------------
 (2) _LcLliure                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LcClear                                              0     0      0    2484
                            _CantaIR
                             _Espera
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcGotoXY                                             6     5      1    1509
                                             13 COMRAM     6     5      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0      90
                                             12 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (3) _CantaIR                                              1     1      0     220
                                              7 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (4) _CantaPartBaixa                                       2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaPartAlta                                        2     2      0      88
                                              5 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Espera                                               4     2      2     665
                                             12 COMRAM     4     2      2
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (4) _TiResetTics                                          1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _TiGetTics                                            7     5      2      45
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _GLCDInit                                             0     0      0       0
                         _TiGetTimer
 ---------------------------------------------------------------------------------
 (2) _TiGetTimer                                           1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_rsi                                             4     4      0       0
                                              1 COMRAM     4     4      0
                        __TiRSITimer
 ---------------------------------------------------------------------------------
 (7) __TiRSITimer                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GLCDInit
     _TiGetTimer
   _GLCDMotor
     _LcClear
       _CantaIR
         _CantaPartAlta
         _CantaPartBaixa
       _Espera
         _TiGetTics
         _TiResetTics
       _LcGotoXY
         _CantaIR
         _WaitForBusy
           _TiGetTics
           _TiResetTics
       _WaitForBusy
     _LcGotoXY
     _LcLliure
     _LcNewString
       _HGetTime (ARG)
       _UgetUserName (ARG)
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     _TiGetTics
     _TiResetTics
   _JoystickInit
   _JoystickMotor
     _MNouJoystick
   _LcInit
     _CantaIR
     _EscriuPrimeraOrdre
     _Espera
     _TiGetTimer
     _WaitForBusy
   _LcLCD
     _LcPutChar
   _Minit
     _TiGetTimer
   _SMotor
     _MNovaLletra
     _TiGetTics
     _TiResetTics
   _Sinit
     _TiGetTimer
   _TeInit
     _TiGetTimer
   _TeTeclat
     _MsetNovaTecla
     _SsetNovaTecla
     _TiGetTics
     _TiResetTics
   _TiInitTimer
   _Uinit
   _UmotorUsers
     _compareStrings
     _escriureCharEEPROM
   _escriure2usuarisStruct
   _escriureEEPROM
   _initAltaveu
     _TiGetTimer
   _initHora
     _TiGetTimer
   _init_eusart
   _init_ports
   _menu
     _GLCDMostraMenu
     _HActualitzaHora
     _JJuguem
     _JUsuari
     _LcClear
     _LcGotoXY
     _LcLliure
     _LcNewString
     _LcPutChar
     _NoFerMenu
     _SMSoff
     _SMSon
     _SiFerMenu
     _TiGetTics
     _TiResetTics
     _URegister
     _UcheckExists
     _UcheckExistsGetError
     _UcheckExistsNotFinished
     _UenviaChar
     _UenviaPas
     _UgetNumUsuaris
     _UgetUserName
   _motorAltaveu
     _TiGetTics
     _TiResetTics
   _motorHora
     _TiGetTics
     _TiResetTics
     _playAltaveu
   _motorJoc
     _HClearNouSegon
     _HGetTime
     _HJugant
     _HNouSegon
     _HnoJugant
     _LcGotoXY
     _LcLliure
     _LcNewString
     _SIOJugant
     _SIONovaDireccio
     _SIONovaTecla
     _SIOStartGame
   _motorSIO
     _UgetUserName

 _high_rsi (ROOT)
   __TiRSITimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      B8       6       71.9%
BITBANK0            80      0       0       3        0.0%
BANK0               80      2      42       4       51.6%
BITCOMRAM           7E      0       2       0        1.6%
COMRAM              7E     15      79       1       96.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     173       7        0.0%
DATA                 0      0     173       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed May 04 13:05:12 2022

               TiResetTics@Handle 0068                  _loginNOTRegister 03CA  
                               _i 001F                                 _j 001E  
                UgetUserName@quin 006A         ??_UcheckExistsNotFinished 0068  
          __end_of_compareStrings 1898                               l700 1A3C  
                             l631 1AC0                               l640 135E  
                             l650 13AE                               l483 0326  
                             l731 1292                               l812 07BE  
                             l652 13B4                               l645 1372  
                             l637 1350                               l647 1378  
                             l824 0856                               l672 0D00  
                             l673 0D10                               l842 0A02  
                             l675 0D1C                               l844 0A32  
                             l881 0FDE                               l890 1038  
                             l882 0FF8                               l891 1052  
                             l884 101C                               l893 1076  
                             l889 10AE                               u230 1534  
                             u250 1550                               u308 1584  
                             u270 156A                               u248 1536  
                             u290 1582                               u268 1552  
                             u288 156C                               _tmp 0028  
                ??_CantaPartBaixa 0068                               prod 000FF3  
                             wreg 000FE8                       _ultimaTecla 0059  
              __size_of_GLCDMotor 03D8                              l2018 1BF8  
                            l2038 1BEC                              l2402 13F0  
                            l2154 1A22                              l4100 0BA2  
                            l4120 0BEC                              l4040 1970  
                            l4114 0BD6                              l4106 0BBA  
                            l2604 1010                              l4140 0C2C  
                            l4132 0C0C                              l4060 0B18  
                            l4052 0B04                              l4036 1968  
                            l2372 136E                              l5110 0F24  
                            l4230 1412                              l4310 1144  
                            l4302 1134                              l4152 0C4E  
                            l4128 0C00                              l4208 0CC2  
                            l5104 0F16                              l4224 13FC  
                            l4320 1168                              l2642 106A  
                            l2634 104E                              l2618 1034  
                            l4170 0C7C                              l5130 0F7A  
                            l5114 0F30                              l4330 1184  
                            l4164 0C72                              l4148 0C4A  
                            l4076 0B4C                              l5124 0F6C  
                            l4244 1432                              l4078 0B52  
                            l5134 0F82                              l5118 0F3C  
                            l5070 0EBC                              l4246 1438  
                            l4238 1426                              l3720 18AA  
                            l2656 108E                              l4184 0CA6  
                            l4088 0B7C                              l5144 0F9A  
                            l5400 02CA                              l4360 14DC  
                            l2666 1092                              l4178 0C96  
                            l5138 0F8E                              l5082 0EDC  
                            l4354 14CE                              l4338 149C  
                            l4258 1468                              l4290 1102  
                            l2596 0FF4                              l4188 0CAE  
                            l5092 0EF2                              l5084 0EE2  
                            l5076 0ECC                              l4268 147C  
                            l4284 10E4                              l4276 10CA  
                            l5078 0ED0                              l5510 043A  
                            l5422 0314                              l5406 02DE  
                            l4366 14EA                              l4382 14FA  
                            l3752 18E8                              l3832 1846  
                            l3824 182C                              l4800 0D26  
                            l5504 042A                              l5424 031A  
                            l5416 0302                              l3746 1AF4  
                            l3842 1C28                              l3826 1836  
                            l5098 0F00                              l4810 0D56  
                            l5522 0452                              l5506 0430  
                            l4386 1500                              l4298 1126  
                            l3932 1870                              l5700 062E  
                            l5604 0516                              l5540 0482  
                            l5452 0386                              l5444 036C  
                            l5436 0344                              l3926 1854  
                            l4814 0D60                              l4806 0D52  
                            l5462 03AE                              l5454 038C  
                            l3784 1918                              l3792 1926  
                            l4832 0DC4                              l4816 0D66  
                            l5712 064E                              l5552 04A6  
                            l5480 03D6                              l5464 03B4  
                            l5810 0846                              l5642 059E  
                            l5634 0578                              l5618 0544  
                            l5546 04A0                              l4770 12F6  
                            l4762 12C8                              l4754 12B8  
                            l4746 12A4                              l5804 0832  
                            l4860 0E42                              l4844 0E1C  
                            l4828 0DB2                              l3868 1C04  
                            l5716 0658                              l5564 04AC  
                            l5468 03BE                              l5740 0690  
                            l4748 12AA                              l5910 0A2C  
                            l5902 0A0C                              l3958 11D6  
                            l4854 0E34                              l5646 05B6  
                            l5494 0402                              l4782 1322  
                            l5840 0890                              l5752 072C  
                            l5728 066C                              l5592 04E8  
                            l5584 04D6                              l5576 04C4  
                            l5496 0408                              l5922 0A48  
                            l5850 08D8                              l5762 0762  
                            l5666 05E8                              l5932 0A82  
                            l4796 0D16                              l4868 0E4E  
                            l5684 060E                              l5918 0A40  
                            l5846 08B6                              l5782 07CC  
                            l5928 0A5C                              l5872 094C  
                            l5856 0902                              l5776 079C  
                            l5768 0770                              l5866 093C  
                            l5938 0AA6                              l5796 0824  
                            l5894 09DC                              l5886 09AC  
                            l5976 164A                              STR_1 02BF  
                            STR_2 02B8                              STR_3 02AF  
                            STR_4 02A2                              STR_5 0292  
                            u3000 1284                              u3020 176C  
                            u3030 1794                              _LATD 000F8C  
                            u3027 1762                              u3037 178A  
                            u3240 0BE6                              u3160 0B70  
                            u2700 1708                              u2720 1722  
                            u2800 16BA                              u3360 0C84  
                            u3280 0C1C                              u3370 0C9E  
                            u3530 112E                              u2740 173A  
                            u2820 16D2                              u5140 0462  
                            u2718 170A                              u5070 03E6  
                            u2680 16EC                              u2760 1684  
                            u4280 0D20                              u5160 0496  
                            u2738 1724                              u2818 16BC  
                            u5170 0498                              u2780 16A0  
                            u2758 173C                              u2838 16D4  
                            u5510 076C                              u4800 0E9C  
                            u2698 16EE                              u2778 1686  
                            u5610 084E                              u4810 0EAC  
                            u2798 16A2                              u4806 0E9E  
                            u2990 187C                              u4816 0EAE  
                            u5580 082C                              u4780 0E82  
                            u4790 0E8C                              u4796 0E8E  
                            u4788 0E84                   ??_SsetNovaTecla 0068  
                            _cap1 03C3                              _Rows 0035  
                            _cap2 03C2                              _main 1608  
                            _hora 005D                              _menu 02C8  
                            _nota 001C                   __end_of_HJugant 1CB8  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 007A                   __end_of_JJuguem 1C54  
                            prodh 000FF4                              prodl 000FF3  
                 __end_of_LcClear 1AEC                              start 0032  
                 __end_of_CantaIR 1A1E                   __end_of_JUsuari 1CDC  
                    ?_initAltaveu 0063                     LcInit@columns 0073  
                    ___param_bank 000000                  __end_of_GLCDInit 1CA4  
        __size_of_SIONovaDireccio 0008                    _HClearNouSegon 1CBC  
                     Espera@Timer 0072                             ?_main 0063  
         __size_of_escriureEEPROM 002E                             ?_menu 0063  
                           _EEADR 000FA9                     ??_TiInitTimer 0068  
                           _T0CON 000FD5                   ?_compareStrings 0068  
                           _RCREG 000FAE                             _RCSTA 000FAB  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _SPBRG 000FAF                             _LcLCD 1748  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                    ?_init_eusart 0063                             _TXREG 000FAD  
                           _SMSon 1CA4                             _TXSTA 000FAC  
                     _MNovaLletra 1C84                             _Minit 1C8C  
                __end_of_HGetTime 1CBC                             _Sinit 1C7C  
                           _Timer 0031                             _Uinit 1346  
                           _rebut 0008                             _s_ptr 0005  
                           _nou_s 03CC             __end_of_JoystickMotor 10C8  
              __size_of_SIOJugant 000C                   _HActualitzaHora 1984  
     __size_of_escriureCharEEPROM 0024                    __pbitbssCOMRAM 03C0  
                           tablat 000FF5                       _LcNewString 1C14  
                   ??_TiResetTics 0068                             ttemp5 007B  
                           ttemp6 007E                             ttemp7 0082  
                           status 000FD8                             wtemp8 007B  
   __size_of_UcheckExistsGetError 0008                __size_of_HNouSegon 000C  
                __end_of_LcGotoXY 1912                  __end_of_LcLliure 1C2C  
                   ??__TiRSITimer 0063                        _TiGetTimer 1912  
         EscriuPrimeraOrdre@ordre 0069                   __initialization 1592  
              __size_of_CantaData 0032                      __end_of_main 1678  
          __end_of_HClearNouSegon 1CC0                      __end_of_menu 072A  
           __size_of_MNouJoystick 0008                      ?_playAltaveu 0063  
               __end_of_GLCDMotor 0B02                  __end_of_TeTeclat 0FDC  
                   _indexNextUser 0021                            ??_main 0078  
                          ??_menu 00C0                __size_of_LcPutChar 0052  
                   __activetblptr 000002                     _ultimaTeclaAD 000E  
                GLCDMotor@length1 0010                  GLCDMotor@length2 000F  
                          ?_LcLCD 0063                            ?_SMSon 0063  
                          ?_Minit 0063                            ?_Sinit 0063  
                          ?_Uinit 0063                __size_of_NoFerMenu 0004  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          _ADCON2 000FC0               __end_of_TiInitTimer 1984  
                          _ADRESH 000FC4                            _EEDATA 000FA8  
                       ??_HJugant 0068                            _EECON2 000FA7  
              __size_of_URegister 0004                __size_of_HnoJugant 0004  
                       ??_JJuguem 0068                __size_of_SiFerMenu 0004  
        ??_escriure2usuarisStruct 0068                         ??_LcClear 0076  
                       ??_CantaIR 006A                            i2l4020 17CC  
                          i2l4024 17F2                            i2l4016 17C4  
                          i2l4028 17F6                    LcGotoXY@Fisics 0071  
                  LcGotoXY@Column 0075                         ??_JUsuari 0068  
                   ??_WaitForBusy 006F                __size_of_TiGetTics 002C  
                          _SPBRGH 000FB0                    _sumaPulsacions 0030  
                          _SMSoff 1CAA                SIONovaDireccio@num 0068  
                          _LcInit 11B0                      _MNouJoystick 1C94  
                  _UgetNumUsuaris 1CC4                            _SMotor 0B02  
             escriureCharEEPROM@c 0069                            _TeInit 1C74  
                          _Espera 1AEC                      _LcGotoXY$336 0073  
                          _RowAct 0033               __end_of_TiResetTics 1B88  
                          Uinit@i 006A                            Uinit@j 006B  
                __end_of_high_rsi 0032                            _h_Tics 0003  
                 ?_HClearNouSegon 0063                  __end_of_initHora 1C5C  
                          _borram 03C7                 __end_of_SIOJugant 1BF0  
             __end_of__TiRSITimer 1800                  __end_of_menuList 0292  
                          clear_0 15D8                            clear_1 15E4  
                          clear_2 15F4                            _jugant 03C1  
                          _segons 000B                        _UenviaChar 1BD4  
                          isa$std 000001                        UenviaPas@c 0069  
     __size_of_EscriuPrimeraOrdre 007A                 __end_of_HNouSegon 1BFC  
                    __pdataCOMRAM 0043            __size_of_CantaPartAlta 0068  
                __end_of_motorSIO 11B0                __size_of_UenviaPas 0010  
         __end_of_HActualitzaHora 19BA                 ??_SIONovaDireccio 0068  
                __end_of_motorJoc 149A                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                   _currentUsrIndex 0023  
               __end_of_CantaData 19EC                      TeTeclat@cols 002B  
                       ?_GLCDInit 0063                     ?_UcheckExists 0063  
                      __accesstop 0080           __end_of__initialization 15FA  
          __end_of_UgetNumUsuaris 1CC8                 __end_of_LcPutChar 1852  
                   ___rparam_used 000001                     __end_of_LcLCD 17A6  
                     ?_TiGetTimer 0063                     __end_of_SMSon 1CAA  
               SIONovaTecla@tecla 0068                    __pcstackCOMRAM 0063  
                   __end_of_Minit 1C94               __end_of_WaitForBusy 18D8  
                   __end_of_Sinit 1C84                     __end_of_Uinit 13FA  
               __end_of_NoFerMenu 1CD8                         ?_HGetTime 0068  
                    __pidataBANK0 1B50              __size_of_initAltaveu 0008  
               __end_of_URegister 1CD0                 __end_of_HnoJugant 1CB4  
               __end_of_SiFerMenu 1CD4                    _escriureEEPROM 1A1E  
               __end_of_TiGetTics 1AA4                       _TiInitTimer 194C  
                         ??_LcLCD 0077                           ??_SMSon 0068  
                       ?_LcGotoXY 0070                         ?_LcLliure 0063  
                         ??_Minit 0069                           ??_Sinit 0069  
                         ??_Uinit 0068              __size_of_init_eusart 0016  
                  ??_UcheckExists 0068               MNouJoystick@posicio 0068  
                      ??_GLCDInit 0069           __size_of_GLCDMostraMenu 000C  
                      __pbssBANK0 0080                        __pbssBANK1 0100  
 __size_of_escriure2usuarisStruct 002C                         ?_TeTeclat 0063  
                     _TiResetTics 1B70                   ?_UgetNumUsuaris 0063  
                   ??_UmotorUsers 006D                     ?_JoystickInit 0063  
                         ?_SMSoff 0063                           ?_LcInit 0073  
                   _CantaPartAlta 16E0                           ?_SMotor 0063  
                         ?_TeInit 0063                           ?_Espera 006F  
               __end_of_UenviaPas 1BD4                       __TiRSITimer 17A6  
             _indexNextUserStruct 0020                        ??_HGetTime 006A  
                   ?_UgetUserName 0068                  ??_compareStrings 006B  
          __end_of_escriureEEPROM 1A4C                           _BAUDCON 000FB8  
                     ?_UenviaChar 0068              __size_of_playAltaveu 0004  
              __size_of_motorHora 007E            __size_of_MsetNovaTecla 0008  
                         LcInit@i 0075                  ?_HActualitzaHora 0068  
                      ??_LcGotoXY 0071                      ?_MNovaLletra 0063  
                      ??_LcLliure 0068               __size_of_TiGetTimer 003A  
                         _HJugant 1CB4                         ?_high_rsi 0063  
                         _JJuguem 1C4C                           _LcClear 1AC8  
                         _CantaIR 19EC                      ?_LcNewString 006B  
                  ??_JoystickInit 0068                           _JUsuari 1CD8  
                       ?_initHora 0063                        ??_TeTeclat 006F  
                     _WaitForBusy 1898                    ?_CantaPartAlta 0063  
                         _Columns 0034             __end_of_SsetNovaTecla 1C6C  
                 __size_of_SMSoff 0006                   __size_of_LcInit 00E0  
                         __Hparam 0000                   __size_of_SMotor 01FC  
                 __size_of_TeInit 0008                   __size_of_Espera 0024  
                         __Lparam 0000                         ?_motorSIO 0063  
                       ?_motorJoc 0063                    ??_UgetUserName 006A  
             __end_of_UmotorUsers 0E78          ?_UcheckExistsNotFinished 0063  
                 ?_escriureEEPROM 0063                     ?_motorAltaveu 0063  
                    __psmallconst 0200            _escriure2usuarisStruct 1A4C  
                         __pcinit 1592      __end_of_UcheckExistsGetError 1C4C  
                         _ferMenu 03C5                        _init_ports 1B30  
                         __ramtop 0200                           __ptext0 1608  
                         __ptext1 10C8                           __ptext2 13FA  
                         __ptext3 1C2C                           __ptext4 1C34  
                         __ptext5 1C3C                           __ptext6 1BE4  
                         __ptext7 1CB0                           __ptext8 1BF0  
                         __ptext9 1CB4                         _T0CONbits 000FD5  
                       _GLCDMotor 072A                         CantaIR@IR 006A  
                         _counter 0029                           _horaTmp 003F  
                     UenviaChar@c 0069        __end_of_escriureCharEEPROM 1AC8  
                LcNewString@new_s 006B                   WaitForBusy@Busy 006F  
                     Uinit@j_1130 006C                           _userPtr 0001  
               GLCDMostraMenu@num 0068                        ??_high_rsi 0064  
            end_of_initialization 15FA                           _usuaris 0100  
                      ??_initHora 0069           __size_of_CantaPartBaixa 0068  
                   __Lmediumconst 0000                   TiGetTics@Handle 006C  
                   _MsetNovaTecla 1C6C               __size_of_UenviaChar 0010  
               __end_of_motorHora 1518                  ??_HClearNouSegon 0068  
                      _novaLletra 0057                   _usuariActualSIO 0051  
                      ??_motorSIO 006B                        ??_motorJoc 0076  
                 TiGetTics@actual 006D                     ?_SIONovaTecla 0063  
                      GLCDMotor@j 0015                           postdec1 000FE5  
                         postdec2 000FDD                   _SIONovaDireccio 1C3C  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                    ??_motorAltaveu 006F  
                      _numUsuaris 0022              __end_of_UcheckExists 1CCC  
                   TeTeclat@files 002A                SIOStartGame@usuari 0068  
          __size_of_JoystickMotor 00EC                     TeTeclat@state 002C  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                      ?_GLCDMotor 0063                         _SIOJugant 1BE4  
                   ?_SIOStartGame 0063                         _TRISCbits 000F94  
                       _TRISDbits 000F95                         _HNouSegon 1BF0  
                  _GLCDMostraMenu 1C08                   ??_CantaPartAlta 0068  
                  ?_MsetNovaTecla 0063                         _CantaData 19BA  
               __size_of_GLCDInit 0008                       _UmotorUsers 0CFE  
                       _TXSTAbits 000FAC   __end_of_UcheckExistsNotFinished 1C08  
                  __end_of_SMSoff 1CB0                      ??_TiGetTimer 0068  
                  __end_of_LcInit 1290                    ??_SIONovaTecla 0068  
                  __end_of_SMotor 0CFE                         _LcPutChar 1800  
                  __end_of_TeInit 1C7C                 motorAltaveu@state 0019  
                  __end_of_Espera 1B10                    GLCDMotor@state 0016  
      __end_of_EscriuPrimeraOrdre 1592                 __size_of_HGetTime 0004  
                   __pidataCOMRAM 1B10                       ?_init_ports 0063  
                       _NoFerMenu 1CD4                         _ColumnAct 0032  
            __end_of_JoystickInit 1BC4                    ??_SIOStartGame 0068  
                       _URegister 1CCC                         _HnoJugant 1CB0  
                    ?_TiInitTimer 0063                        ?_SIOJugant 0063  
                       _SiFerMenu 1CD0               start_initialization 1592  
                       _TiGetTics 1A78            __end_of_GLCDMostraMenu 1C14  
                      ?_HNouSegon 0063                  ??_UgetNumUsuaris 0068  
                UmotorUsers@state 001D                 __size_of_LcGotoXY 003A  
            __end_of_UgetUserName 1BB2                __end_of_TiGetTimer 194C  
                   JJuguem@usuari 0068              __size_of_MNovaLletra 0008  
               __size_of_LcLliure 000C                     _JoystickMotor 0FDC  
                    ?_TiResetTics 0063                        ?_CantaData 0063  
            _UcheckExistsGetError 1C44           __end_of_SIONovaDireccio 1C44  
            __size_of_LcNewString 000C                          ??_SMSoff 0068  
                        ??_LcInit 0074                         _NovaTecla 0058  
               __size_of_TeTeclat 0164                          ??_SMotor 006F  
                        ??_TeInit 0069                      ?__TiRSITimer 0063  
                   ??_initAltaveu 0069                          ??_Espera 0071  
                      ?_LcPutChar 0063                         _UenviaPas 1BC4  
                     __pdataBANK0 00A1                    motorHora@state 000A  
                    _menuDaltGLCD 0017                      ??_UenviaChar 0069  
                      ?_NoFerMenu 0063                       ??_GLCDMotor 00C0  
                      ?_URegister 0063                        ?_HnoJugant 0063  
                   ??_init_eusart 0068                        ?_SiFerMenu 0063  
                     __pbssCOMRAM 0001                     __pcstackBANK0 00C0  
                      ?_TiGetTics 0068                   ?_GLCDMostraMenu 0063  
                        ?_HJugant 0063                    ?_JoystickMotor 0063  
                 ??_MsetNovaTecla 0068              __end_of_motorAltaveu 1346  
                        ?_JJuguem 0063                          ?_LcClear 0063  
                        ?_CantaIR 0063                    _CantaPartBaixa 1678  
                        ?_JUsuari 0063             ?_UcheckExistsGetError 0063  
               __size_of_high_rsi 002A                      ?_WaitForBusy 0063  
             __size_of_init_ports 0020                MsetNovaTecla@tecla 0068  
              SsetNovaTecla@tecla 0068                __end_of_UenviaChar 1BE4  
               __size_of_initHora 0008                  ??_escriureEEPROM 0068  
           __size_of_UcheckExists 0004           ?_escriure2usuarisStruct 0063  
                       __pintcode 0008                     ??_playAltaveu 0068  
                      ?_UenviaPas 0068                 __size_of_motorSIO 00E8  
               __size_of_motorJoc 00A0                   CantaPartBaixa@c 0069  
             __end_of_initAltaveu 1C64                         _arrayZero 004C  
                     ??_SIOJugant 0068                       __smallconst 0200  
                  __size_of_LcLCD 005E                    __size_of_SMSon 0006  
__size_of_UcheckExistsNotFinished 000C                    __size_of_Minit 0008  
            __end_of_SIONovaTecla 1C3C                    __size_of_Sinit 0008  
                     ??_HNouSegon 0068                    __size_of_Uinit 00B4  
          __end_of_CantaPartBaixa 16E0                JoystickMotor@state 000D  
                        _GLCDInit 1C9C                escriureEEPROM@caca 0068  
                     _do_register 03C8               __end_of_init_eusart 1B9E  
                       _newString 03C4                      _UcheckExists 1CC8  
                       _loginText 00B8          __size_of_HActualitzaHora 0036  
                     ??_CantaData 006A                          _LATBbits 000F8A  
                        _LATCbits 000F8B                          _LATDbits 000F8C  
                   ?_MNouJoystick 0063                  ?_SIONovaDireccio 0063  
            __end_of_SIOStartGame 1C34                     UenviaChar@pos 0068  
  __end_of_escriure2usuarisStruct 1A78                _escriureCharEEPROM 1AA4  
                       _novaTecla 005B                     motorSIO@state 0007  
                     ??_LcPutChar 0076                         _timerGLCD 0018  
                       _motorHora 149A                          _RCONbits 000FD0  
                       _reproduir 03C6                          _HGetTime 1CB8  
           __size_of_JoystickInit 0012                         _timerHora 000C  
                       _timerMenu 0027               ?_escriureCharEEPROM 0068  
                     ??_NoFerMenu 0068                        _ADCON0bits 000FC2  
                     ??_URegister 0068                       ??_HnoJugant 0068  
                     ??_SiFerMenu 0068             __size_of_UgetUserName 0014  
             __end_of_playAltaveu 1CC4            __size_of_SsetNovaTecla 0008  
                        Espera@ms 006F                         _zeroTecla 002F  
                        _LcGotoXY 18D8                    _usuariLoguejat 0055  
                        _LcLliure 1C20                       ??_TiGetTics 006A  
         __size_of_compareStrings 0046              __size_of_TiInitTimer 0038  
                 ??_JoystickMotor 0069                     GLCDMotor@max1 0054  
                   GLCDMotor@max2 0053                     GLCDMotor@min1 0014  
                   GLCDMotor@min2 0013                      _teclaPremuda 00A1  
                       _usuariJoc 0052                       LcGotoXY@Row 0070  
                       copy_data0 15A6                         copy_data1 15C6  
            ??_escriureCharEEPROM 0069                   ?_CantaPartBaixa 0063  
                __size_of_HJugant 0004            ??_UcheckExistsGetError 0068  
           escriureCharEEPROM@pos 0068                  __size_of_JJuguem 0008  
                __size_of_LcClear 0024                  __size_of_CantaIR 0032  
                        _TeTeclat 0E78                    ??_MNouJoystick 0068  
                    ?_UmotorUsers 0063                  __size_of_JUsuari 0004  
                    _JoystickInit 1BB2                        _EECON1bits 000FA6  
                    _registerText 00AD                       _indexUsuari 0025  
            __size_of_TiResetTics 0018                     motorJoc@state 0009  
                        __Hrparam 0000                       _initAltaveu 1C5C  
                       menu@state 0024                          __Lrparam 0000  
                      ?_motorHora 0063              __size_of__TiRSITimer 005A  
                    _UgetUserName 1B9E                       ??_UenviaPas 0069  
                    _novaDireccio 0056                      ??_init_ports 0068  
             HActualitzaHora@nova 0068                       _init_eusart 1B88  
           __size_of_motorAltaveu 00B6                      _novaTeclaSIO 004F  
                 _do_check_exists 03C9                          __ptext10 1CB8  
                        __ptext11 1CBC                _EscriuPrimeraOrdre 1518  
                        __ptext20 1BFC                          __ptext12 149A  
                        __ptext21 1C44                          __ptext13 1CC0  
                        __ptext30 1984                          __ptext22 1CC8  
                        __ptext14 1290                          __ptext31 1C08  
                        __ptext23 1CCC                          __ptext15 02C8  
                        __ptext40 1852                          __ptext32 1B30  
                        __ptext24 1CD0                          __ptext16 1B9E  
                        __ptext41 1346                          __ptext33 1B88  
                        __ptext25 1CA4                          __ptext17 1CC4  
                        __ptext50 1C8C                          __ptext42 194C  
                        __ptext34 1C54                          __ptext26 1CAA  
                        __ptext18 1BC4                          __ptext51 1748  
                        __ptext43 0E78                          __ptext35 1C5C  
                        __ptext27 1CD4                          __ptext19 1BD4  
                        __ptext60 1C14                          __ptext52 11B0  
                        __ptext44 1C64                          __ptext36 1A1E  
                        __ptext28 1CD8                          __ptext61 1C20  
                        __ptext53 1518                          __ptext45 1C6C  
                        __ptext37 1A4C                          __ptext29 1C4C  
                        __ptext70 1A78                          __ptext62 1AC8  
                        __ptext54 0FDC                          __ptext46 1C74  
                        __ptext38 0CFE                          __ptext71 1C9C  
                        __ptext63 18D8                          __ptext55 1C94  
                        __ptext47 1C7C                          __ptext39 1AA4  
                        __ptext72 1912                          __ptext64 1898  
                        __ptext56 1BB2                          __ptext48 0B02  
                        __ptext65 19EC                          __ptext57 072A  
                        __ptext49 1C84                          __ptext74 17A6  
                        __ptext66 1678                          __ptext58 1800  
                        __ptext67 16E0                          __ptext59 19BA  
                        __ptext68 1AEC                          __ptext69 1B70  
                        _direccio 0050                    CantaPartAlta@c 0069  
                     _lletraASCII 005C                          _high_rsi 0008  
                        _copsNota 001A                          _s_Timers 0080  
                        _initHora 1C54                       _lletraInici 0043  
                        _menuDalt 0026                          _menuList 0201  
             ?_EscriuPrimeraOrdre 0063                     __size_of_main 0070  
                   __size_of_menu 0462             __end_of_CantaPartAlta 1748  
                   CantaData@Data 006A                          _tiTeclat 002D  
              __end_of_init_ports 1B50                          _setSMSon 03CB  
                   _SsetNovaTecla 1C64              __size_of_WaitForBusy 0040  
                        _nouSegon 03C0                          _motorSIO 10C8  
               ??_HActualitzaHora 0069                          _motorJoc 13FA  
                        _timerSMS 005A                          isa$xinst 000000  
                        int$flags 007A                      UenviaPas@pos 0068  
                     _playAltaveu 1CC0                      _motorAltaveu 1290  
         __size_of_HClearNouSegon 0004              ??_EscriuPrimeraOrdre 0068  
                      LcInit@rows 0074                  ??_GLCDMostraMenu 0068  
           __size_of_SIONovaTecla 0008           _UcheckExistsNotFinished 1BFC  
                      _INTCONbits 000FF2                     ??_MNovaLletra 0068  
           __size_of_SIOStartGame 0008                     ??_LcNewString 006D  
                        intlevel2 0000                      _timerAltaveu 001B  
                      LcPutChar@c 0076                    ?_SsetNovaTecla 0063  
               MNovaLletra@lletra 0068                   compareStrings@a 0068  
                 compareStrings@b 0069                       ??_motorHora 006F  
                    _SIONovaTecla 1C34                       GLCDMotor@k1 0012  
                     GLCDMotor@k2 0011              __end_of_MNouJoystick 1C9C  
                    _SIOStartGame 1C2C                    _compareStrings 1852  
                     _tmpPassword 0098               __end_of_MNovaLletra 1C8C  
           __end_of_MsetNovaTecla 1C74                       _tmpUsername 0036  
                     SMotor@state 002E           __size_of_UgetNumUsuaris 0004  
             __end_of_LcNewString 1C20              __size_of_UmotorUsers 017A  
